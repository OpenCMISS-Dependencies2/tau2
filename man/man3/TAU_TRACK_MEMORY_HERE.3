.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "TAU_TRACK_MEMORY_HER" "3" "08/31/2005" "" "TAU Instrumentation API"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
TAU_TRACK_MEMORY_HERE \- Triggers memory tracking at a given execution point
.SH "SYNOPSIS"
.PP
\fBC/C++:\fR
.HP 22
\fB\fBTAU_TRACK_MEMORY_HERE\fR\fR\fB(\fR\fBvoid);\fR
.PP
\fBFortran:\fR
.HP 22
\fB\fBTAU_TRACK_MEMORY_HERE\fR\fR\fB(\fR\fBvoid);\fR
.SH "DESCRIPTION"
.PP
Triggers memory tracking at a given execution point
.SH "EXAMPLE"
.PP
\fBC/C++ :\fR
.sp
.nf
int main(int argc, char **argv) {
  TAU_PROFILE("main()", " ", TAU_DEFAULT);
  TAU_PROFILE_SET_NODE(0);

  TAU_TRACK_MEMORY_HERE();

  int *x = new int[5*1024*1024];
  TAU_TRACK_MEMORY_HERE();
  return 0;
}
    
.fi
.PP
\fBFortran :\fR
.sp
.nf
INTEGER, ALLOCATABLE :: STORAGEARY(:)
allocate(STORAGEARY(1:999), STAT=IERR)

! if we wish to record a sample of the heap memory 
! utilization at this point, invoke the following call:
call TAU_TRACK_MEMORY_HERE()

    
.fi
.SH "SEE ALSO"
.PP
TAU_TRACK_MEMORY(3)
