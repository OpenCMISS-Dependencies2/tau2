
#line 1 "test8.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Tests whether specific clauses are found and inserted into the CTC string.

program test8
      include 'test8.f90.opari.inc'
  integer i
  integer k

  integer, save :: j
#line 25 "test8.f90"
  !$omp threadprivate(j)

      pomp_num_threads = 4
      pomp_if = ( k.eq.0 )
      call POMP2_Parallel_fork(pomp2_region_1,&
      pomp_if, pomp_num_threads, pomp2_old_task, &
        "101*regionType=parallel*sscl=test8.f90:27:27*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 27 "test8.f90"
  !$omp parallel                           reduction(+:k)&
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task)&
  !$omp if(pomp_if) num_threads(pomp_num_threads)&
  !$omp shared(/cb000/)
      call POMP2_Parallel_begin(pomp2_region_1)
#line 28 "test8.f90"
  write(*,*) "parallel"

      call POMP2_Do_enter(pomp2_region_2, &
        "112*regionType=do*sscl=test8.f90:30:30*escl=test8.f90:0:0*hasReduction=1*hasSchedule=1*hasCollapse=1*hasOrdered=1**" )
#line 30 "test8.f90"
  !$omp do reduction(+:k) schedule(dynamic) collapse(1)
  do i=1,4
     write(*,*) "do",i
     k = k + 1
  enddo
#line 35 "test8.f90"
  !$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_2, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_2, pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_2)
#line 36 "test8.f90"

      call POMP2_Sections_enter(pomp2_region_3, &
        "76*regionType=sections*sscl=test8.f90:37:37*escl=test8.f90:0:0*numSections=0**" )
#line 37 "test8.f90"
  !$omp sections reduction(+:k)
#line 38 "test8.f90"
  !$omp section
      call POMP2_Section_begin(pomp2_region_3, &
        "76*regionType=sections*sscl=test8.f90:37:37*escl=test8.f90:0:0*numSections=0**" )
#line 39 "test8.f90"
  write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_3)
#line 40 "test8.f90"
  !$omp section
      call POMP2_Section_begin(pomp2_region_3, &
        "76*regionType=sections*sscl=test8.f90:37:37*escl=test8.f90:0:0*numSections=1**" )
#line 41 "test8.f90"
  write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_3)
#line 42 "test8.f90"
  !$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_3, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_3, pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_3)
#line 43 "test8.f90"

      call POMP2_Implicit_barrier_enter(pomp2_region_1, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_1)
#line 44 "test8.f90"
  !$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1, pomp2_old_task)
#line 45 "test8.f90"

      pomp_num_threads = pomp_get_max_threads000()
      pomp_if = .true.
      call POMP2_Parallel_fork(pomp2_region_4,&
      pomp_if, pomp_num_threads, pomp2_old_task, &
        "62*regionType=parallel*sscl=test8.f90:46:46*escl=test8.f90:0:0**" )
#line 46 "test8.f90"
  !$omp parallel&
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task)&
  !$omp if(pomp_if) num_threads(pomp_num_threads)&
  !$omp shared(/cb000/)
      call POMP2_Parallel_begin(pomp2_region_4)
#line 47 "test8.f90"
      pomp_if = .true.
      call POMP2_Untied_task_create_begin(pomp2_region_5, pomp2_old_task, pomp_if, &
        "70*regionType=task*sscl=test8.f90:47:47*escl=test8.f90:0:0*hasUntied=1**" )
#line 47 "test8.f90"
  !$omp task untied if(pomp_if) firstprivate(pomp2_old_task)&
  !$omp shared(/cb000/)
      call POMP2_Untied_task_begin(pomp2_region_5, pomp2_old_task)
#line 48 "test8.f90"
  write(*,*) "task"
      call POMP2_Untied_task_end(pomp2_region_5)
#line 49 "test8.f90"
  !$omp end task
      call POMP2_Untied_task_create_end(pomp2_region_5, pomp2_old_task)
#line 50 "test8.f90"
      call POMP2_Implicit_barrier_enter(pomp2_region_4, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_4, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_4)
#line 50 "test8.f90"
  !$omp end parallel
      call POMP2_Parallel_join(pomp2_region_4, pomp2_old_task)
#line 51 "test8.f90"

      pomp_num_threads = 4
      pomp_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_6,&
      pomp_if, pomp_num_threads, pomp2_old_task, &
        "144*regionType=paralleldo*sscl=test8.f90:52:52*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1*hasSchedule=1*hasCollapse=1*hasOrdered=1**" )
#line 52 "test8.f90"
  !$omp parallel                              reduction(+:k)                                     &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task)&
  !$omp if(pomp_if) num_threads(pomp_num_threads)&
  !$omp shared(/cb000/)
      call POMP2_Parallel_begin(pomp2_region_6)
      call POMP2_Do_enter(pomp2_region_6, &
        "144*regionType=paralleldo*sscl=test8.f90:52:52*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1*hasSchedule=1*hasCollapse=1*hasOrdered=1**" )
#line 52 "test8.f90"
  !$omp          do                                          schedule(static) collapse(1) ordered
  do i=1,4
      call POMP2_Ordered_begin(pomp2_region_7, &
        "61*regionType=ordered*sscl=test8.f90:54:54*escl=test8.f90:0:0**" )
#line 54 "test8.f90"
     !$omp ordered
      call POMP2_Ordered_enter(pomp2_region_7)
#line 55 "test8.f90"
     write(*,*) "do",i
      call POMP2_Ordered_end(pomp2_region_7)
#line 56 "test8.f90"
     !$omp end ordered
      call POMP2_Ordered_exit(pomp2_region_7)
#line 57 "test8.f90"
     k = k + 1
  enddo
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_6, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_6, pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_6)
      call POMP2_Parallel_end(pomp2_region_6)
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_6, pomp2_old_task)
#line 60 "test8.f90"

      pomp_num_threads = 4
      pomp_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_8,&
      pomp_if, pomp_num_threads, pomp2_old_task, &
        "109*regionType=parallelsections*sscl=test8.f90:61:61*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 61 "test8.f90"
  !$omp parallel                                    reduction(+:k)&
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task)&
  !$omp if(pomp_if) num_threads(pomp_num_threads)&
  !$omp shared(/cb000/)
      call POMP2_Parallel_begin(pomp2_region_8)
      call POMP2_Sections_enter(pomp2_region_8)
#line 61 "test8.f90"
  !$omp          sections                                         
#line 62 "test8.f90"
  !$omp section
      call POMP2_Section_begin(pomp2_region_8, &
        "109*regionType=parallelsections*sscl=test8.f90:61:61*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 63 "test8.f90"
  write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_8)
#line 64 "test8.f90"
  !$omp section
      call POMP2_Section_begin(pomp2_region_8, &
        "109*regionType=parallelsections*sscl=test8.f90:61:61*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 65 "test8.f90"
  write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_8)
!$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_8, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_8, pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_8)
      call POMP2_Parallel_end(pomp2_region_8)
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_8, pomp2_old_task)
#line 67 "test8.f90"

      pomp_num_threads = 4
      pomp_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_9,&
      pomp_if, pomp_num_threads, pomp2_old_task, &
        "110*regionType=parallelworkshare*sscl=test8.f90:68:68*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 68 "test8.f90"
  !$omp parallel                                     reduction(+:k)&
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task)&
  !$omp if(pomp_if) num_threads(pomp_num_threads)&
  !$omp shared(/cb000/)
      call POMP2_Parallel_begin(pomp2_region_9)
      call POMP2_Workshare_enter(pomp2_region_9, &
        "110*regionType=parallelworkshare*sscl=test8.f90:68:68*escl=test8.f90:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 68 "test8.f90"
  !$omp          workshare                                         
  write(*,*) "workshare"
!$omp end workshare nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_9, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_9, pomp2_old_task)
      call POMP2_Workshare_exit(pomp2_region_9)
      call POMP2_Parallel_end(pomp2_region_9)
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_9, pomp2_old_task)
#line 71 "test8.f90"
end program test8


      integer function pomp_get_max_threads000()
         integer omp_get_max_threads
         pomp_get_max_threads000=omp_get_max_threads()
         return
      end

      subroutine POMP2_Init_regions_000()
         include 'test8.f90.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, &
        "103*regionType=parallel*sscl=test8.f90:27:27*escl=test8.f90:44:44*hasIf=1*hasNumThreads=1*hasReduction=1**" )
         call POMP2_Assign_handle( pomp2_region_2, &
        "114*regionType=do*sscl=test8.f90:30:30*escl=test8.f90:35:35*hasReduction=1*hasSchedule=1*hasCollapse=1*hasOrdered=1**" )
         call POMP2_Assign_handle( pomp2_region_3, &
        "78*regionType=sections*sscl=test8.f90:37:37*escl=test8.f90:42:42*numSections=2**" )
         call POMP2_Assign_handle( pomp2_region_4, &
        "64*regionType=parallel*sscl=test8.f90:46:46*escl=test8.f90:50:50**" )
         call POMP2_Assign_handle( pomp2_region_5, &
        "72*regionType=task*sscl=test8.f90:47:47*escl=test8.f90:49:49*hasUntied=1**" )
         call POMP2_Assign_handle( pomp2_region_6, &
        "146*regionType=paralleldo*sscl=test8.f90:52:52*escl=test8.f90:59:59*hasIf=1*hasNumThreads=1*hasReduction=1*hasSchedule=1*hasCollapse=1*hasOrdered=1**" )
         call POMP2_Assign_handle( pomp2_region_7, &
        "63*regionType=ordered*sscl=test8.f90:54:54*escl=test8.f90:56:56**" )
         call POMP2_Assign_handle( pomp2_region_8, &
        "111*regionType=parallelsections*sscl=test8.f90:61:61*escl=test8.f90:66:66*hasIf=1*hasNumThreads=1*hasReduction=1**" )
         call POMP2_Assign_handle( pomp2_region_9, &
        "112*regionType=parallelworkshare*sscl=test8.f90:68:68*escl=test8.f90:70:70*hasIf=1*hasNumThreads=1*hasReduction=1**" )
      end
