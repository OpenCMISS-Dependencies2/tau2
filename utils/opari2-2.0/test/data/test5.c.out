#ifdef _POMP2
#  undef _POMP2
#endif
#define _POMP2 200110

#include "test5.c.opari.inc"
#line 1 "test5.c"
/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2011,
 *    RWTH Aachen University, Germany
 *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *    Technische Universitaet Dresden, Germany
 *    University of Oregon, Eugene, USA
 *    Forschungszentrum Juelich GmbH, Germany
 *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *    Technische Universitaet Muenchen, Germany
 *
 * See the COPYING file in the package base directory for details.
 *
 * Testfile for automated testing of OPARI2
 *
 * @authors Bernd Mohr, Peter Philippen
 *
 * @brief Test the splitting of combined parallel clauses.
 */

#include <stdio.h>

int t;
#line 25 "test5.c"
#pragma omp threadprivate(t)

int main() {
  int i, j, k, l;

  l=0;
{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_1, pomp_num_threads, "61*regionType=parallelfor*sscl=test5.c:31:39*escl=test5.c:0:0**" );
#line 31 "test5.c"
  #pragma omp parallel                        \
      private(i,j)                              POMP2_DLIST_00001 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_1);
    POMP2_For_enter(&pomp2_region_1, "61*regionType=parallelfor*sscl=test5.c:31:39*escl=test5.c:0:0**" );
#line 31 "test5.c"
  #pragma omp                                 \
      for                                \
      lastprivate(k)                     \
      lastprivate                        \
      (                                  \
        l                                \
      ) schedule(dynamic                 \
      ) nowait
  for(i=0; i<4;++i) {
    printf("parallel for %d\n", i);
    k+=i;
  }
POMP2_Implicit_barrier_enter(&pomp2_region_1);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_1);
POMP2_For_exit(&pomp2_region_1);
POMP2_Parallel_end(&pomp2_region_1); }
POMP2_Parallel_join(&pomp2_region_1);
 }
#line 44 "test5.c"

{
int pomp_num_threads = 2;
    POMP2_Parallel_fork(&pomp2_region_2, pomp_num_threads, "66*regionType=parallelsections*sscl=test5.c:45:45*escl=test5.c:0:0**" );
#line 45 "test5.c"
#pragma omp parallel          if(k)                 firstprivate(j) default(shared) copyin(t) reduction(+:l) POMP2_DLIST_00002 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_2);
    POMP2_Sections_enter(&pomp2_region_2, "66*regionType=parallelsections*sscl=test5.c:45:45*escl=test5.c:0:0**" );
#line 45 "test5.c"
#pragma omp          sections        lastprivate(i)                                                          nowait
  {
#line 47 "test5.c"
    #pragma omp section
    { POMP2_Section_begin(&pomp2_region_2, "66*regionType=parallelsections*sscl=test5.c:45:45*escl=test5.c:0:0**" );
#line 48 "test5.c"
    {
      printf("Section 1\n");
    }
POMP2_Section_end(&pomp2_region_2); }
#line 51 "test5.c"
    #pragma omp section
    { POMP2_Section_begin(&pomp2_region_2, "66*regionType=parallelsections*sscl=test5.c:45:45*escl=test5.c:0:0**" );
#line 52 "test5.c"
    {
      printf("Section 2\n");
    }
POMP2_Section_end(&pomp2_region_2); }
#line 55 "test5.c"
    #pragma omp section
    { POMP2_Section_begin(&pomp2_region_2, "66*regionType=parallelsections*sscl=test5.c:45:45*escl=test5.c:0:0**" );
#line 56 "test5.c"
    {
      printf("Section 3\n");
    }
POMP2_Section_end(&pomp2_region_2); }
#line 59 "test5.c"
  }
POMP2_Implicit_barrier_enter(&pomp2_region_2);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_2);
POMP2_Sections_exit(&pomp2_region_2);
POMP2_Parallel_end(&pomp2_region_2); }
POMP2_Parallel_join(&pomp2_region_2);
 }
#line 60 "test5.c"
}
