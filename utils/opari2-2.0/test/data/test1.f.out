#ifdef _POMP2
#  undef _POMP2
#endif
#define _POMP2 200110

#line 1 "test1.f"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Test the parsers ability to find directives and filter strings and comments.

      program test1
!************************************************
!* The following pragmas should be instrumented *
!************************************************
      include 'test1.f.opari.inc'
      pomp_num_threads = pomp_get_max_threads000()
      call POMP2_Parallel_fork(pomp2_region_1, pomp_num_threads,
         &"59*regionType=parallel*sscl=test1.f:24:24*escl=test1.f:"//
     &"0:0**" )
#line 24 "test1.f"
c$omp parallel
!$omp& num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_1)
#line 25 "test1.f"
      call POMP2_Barrier_enter(pomp2_region_2,
         &"58*regionType=barrier*sscl=test1.f:25:25*escl=test1.f:0"//
     &":0**" )
#line 25 "test1.f"
*$omp barrier
      call POMP2_Barrier_exit(pomp2_region_2)
#line 26 "test1.f"
      call POMP2_Barrier_enter(pomp2_region_3,
         &"58*regionType=barrier*sscl=test1.f:26:26*escl=test1.f:0"//
     &":0**" )
#line 26 "test1.f"
!$omp barrier
      call POMP2_Barrier_exit(pomp2_region_3)
#line 27 "test1.f"
      call POMP2_Implicit_barrier_enter(pomp2_region_1)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1)
      call POMP2_Parallel_end(pomp2_region_1)
#line 27 "test1.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1)
#line 28 "test1.f"

      pomp_num_threads = pomp_get_max_threads000()
      call POMP2_Parallel_fork(pomp2_region_4, pomp_num_threads,
         &"59*regionType=parallel*sscl=test1.f:29:30*escl=test1.f:"//
     &"0:0**" )
#line 29 "test1.f"
!$omp    parallel
!$omp&   default(shared)
!$omp& num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_4)
#line 31 "test1.f"
      call POMP2_Implicit_barrier_enter(pomp2_region_4)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_4)
      call POMP2_Parallel_end(pomp2_region_4)
#line 31 "test1.f"
!$omp    end
!$omp+   parallel
      call POMP2_Parallel_join(pomp2_region_4)
#line 33 "test1.f"

      pomp_num_threads = pomp_get_max_threads000()
      call POMP2_Parallel_fork(pomp2_region_5, pomp_num_threads,
         &"59*regionType=parallel*sscl=test1.f:34:35*escl=test1.f:"//
     &"0:0**" )
#line 34 "test1.f"
!$omp   parallel
!$omp&   default(shared)
!$omp& num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_5)
#line 36 "test1.f"
      call POMP2_Implicit_barrier_enter(pomp2_region_5)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_5)
      call POMP2_Parallel_end(pomp2_region_5)
#line 36 "test1.f"
!$omp end
!$omp+ 
!$omp+ parallel
      call POMP2_Parallel_join(pomp2_region_5)
#line 39 "test1.f"

!**************************************
!* The following should be ignored    *
!**************************************
c $omp no
!!$omp mo
c     comment
! $omp parallel
      write(*,*) "!$omp parallel"
      write(*,*) """!$omp parallel"""
      end program


      integer function pomp_get_max_threads000()
         integer omp_get_max_threads
         pomp_get_max_threads000=omp_get_max_threads()
         return
      end

      subroutine POMP2_Init_regions_000()
         include 'test1.f.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, 
         &"61*regionType=parallel*sscl=test1.f:24:24*escl=test1.f:"//
     &"27:27**" )
         call POMP2_Assign_handle( pomp2_region_2, 
         &"58*regionType=barrier*sscl=test1.f:25:25*escl=test1.f:0"//
     &":0**" )
         call POMP2_Assign_handle( pomp2_region_3, 
         &"58*regionType=barrier*sscl=test1.f:26:26*escl=test1.f:0"//
     &":0**" )
         call POMP2_Assign_handle( pomp2_region_4, 
         &"61*regionType=parallel*sscl=test1.f:29:30*escl=test1.f:"//
     &"31:32**" )
         call POMP2_Assign_handle( pomp2_region_5, 
         &"61*regionType=parallel*sscl=test1.f:34:35*escl=test1.f:"//
     &"36:38**" )
      end
