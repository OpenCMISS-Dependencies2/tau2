#ifdef _POMP2
#  undef _POMP2
#endif
#define _POMP2 200110

#include "test3.c.opari.inc"
#line 1 "test3.c"
/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2011,
 *    RWTH Aachen University, Germany
 *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *    Technische Universitaet Dresden, Germany
 *    University of Oregon, Eugene, USA
 *    Forschungszentrum Juelich GmbH, Germany
 *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *    Technische Universitaet Muenchen, Germany
 *
 * See the COPYING file in the package base directory for details.
 *
 * Testfile for automated testing of OPARI2
 *
 * @authors Bernd Mohr, Peter Philippen
 *
 * @brief Special tests for code blocks and nested parallel regions/loops.
 */

#include <stdio.h>
#ifdef _OPENMP
#endif

int
main()
{
    int i, j;
    int k = 0;

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_1, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:33:33*escl=test3.c:0:0**" );
#line 33 "test3.c"
  #pragma omp parallel POMP2_DLIST_00001 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_1);
#line 34 "test3.c"
    {
    POMP2_For_enter(&pomp2_region_2, "53*regionType=for*sscl=test3.c:35:35*escl=test3.c:0:0**" );
#line 35 "test3.c"
    #pragma omp for nowait
        for ( i = 0; i < 4; ++i )
        {
            k++;
        }
POMP2_Implicit_barrier_enter(&pomp2_region_2);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_2);
POMP2_For_exit(&pomp2_region_2);
#line 40 "test3.c"
    }
POMP2_Implicit_barrier_enter(&pomp2_region_1);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_1);
POMP2_Parallel_end(&pomp2_region_1); }
POMP2_Parallel_join(&pomp2_region_1);
 }
#line 41 "test3.c"

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_3, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:42:42*escl=test3.c:0:0**" );
#line 42 "test3.c"
  #pragma omp parallel POMP2_DLIST_00003 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_3);
#line 43 "test3.c"
    POMP2_For_enter(&pomp2_region_4, "53*regionType=for*sscl=test3.c:43:43*escl=test3.c:0:0**" );
#line 43 "test3.c"
    #pragma omp for nowait
    for ( i = 0; i < 4; ++i )
    {
        k++;
    }
POMP2_Implicit_barrier_enter(&pomp2_region_4);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_4);
POMP2_For_exit(&pomp2_region_4);
#line 48 "test3.c"
POMP2_Implicit_barrier_enter(&pomp2_region_3);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_3);
POMP2_Parallel_end(&pomp2_region_3); }
POMP2_Parallel_join(&pomp2_region_3);
 }
#line 48 "test3.c"

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_5, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:49:49*escl=test3.c:0:0**" );
#line 49 "test3.c"
  #pragma omp parallel POMP2_DLIST_00005 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_5);
#line 50 "test3.c"
    {
#line 51 "test3.c"
    #pragma omp master
    { POMP2_Master_begin(&pomp2_region_6, "56*regionType=master*sscl=test3.c:51:51*escl=test3.c:0:0**" );
#line 52 "test3.c"
        for ( i = 0; i < 4; ++i )
        {
            k++;
        }
POMP2_Master_end(&pomp2_region_6); }
#line 56 "test3.c"
    }
POMP2_Implicit_barrier_enter(&pomp2_region_5);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_5);
POMP2_Parallel_end(&pomp2_region_5); }
POMP2_Parallel_join(&pomp2_region_5);
 }
#line 57 "test3.c"

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_7, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:58:58*escl=test3.c:0:0**" );
#line 58 "test3.c"
  #pragma omp parallel POMP2_DLIST_00007 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_7);
#line 59 "test3.c"
    {
    POMP2_Single_enter(&pomp2_region_8, "56*regionType=single*sscl=test3.c:60:60*escl=test3.c:0:0**" );
#line 60 "test3.c"
    #pragma omp single nowait
{ POMP2_Single_begin(&pomp2_region_8);
#line 61 "test3.c"
        for ( i = 0; i < 4; ++i )
        {
            k++;
        }
POMP2_Single_end(&pomp2_region_8); }
POMP2_Implicit_barrier_enter(&pomp2_region_8);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_8);
POMP2_Single_exit(&pomp2_region_8);
#line 65 "test3.c"
    }
POMP2_Implicit_barrier_enter(&pomp2_region_7);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_7);
POMP2_Parallel_end(&pomp2_region_7); }
POMP2_Parallel_join(&pomp2_region_7);
 }
#line 66 "test3.c"

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_9, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:67:67*escl=test3.c:0:0**" );
#line 67 "test3.c"
  #pragma omp parallel POMP2_DLIST_00009 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_9);
#line 68 "test3.c"
    POMP2_Critical_enter(&pomp2_region_10, "58*regionType=critical*sscl=test3.c:68:68*escl=test3.c:0:0**" );
#line 68 "test3.c"
    #pragma omp critical
{ POMP2_Critical_begin(&pomp2_region_10);
#line 69 "test3.c"
    for ( i = 0; i < 4; ++i )
    {
        k++;
    }
POMP2_Critical_end(&pomp2_region_10); }
POMP2_Critical_exit(&pomp2_region_10);
#line 73 "test3.c"
POMP2_Implicit_barrier_enter(&pomp2_region_9);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_9);
POMP2_Parallel_end(&pomp2_region_9); }
POMP2_Parallel_join(&pomp2_region_9);
 }
#line 73 "test3.c"

    // *****************************************
    // * Testing of nested parallelism         *
    // *****************************************

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_11, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:78:78*escl=test3.c:0:0**" );
#line 78 "test3.c"
#pragma omp parallel POMP2_DLIST_00011 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_11);
#line 79 "test3.c"
    {
{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_12, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:80:80*escl=test3.c:0:0**" );
#line 80 "test3.c"
#pragma omp parallel POMP2_DLIST_00012 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_12);
#line 81 "test3.c"
        {
{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_13, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:82:82*escl=test3.c:0:0**" );
#line 82 "test3.c"
#pragma omp parallel POMP2_DLIST_00013 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_13);
#line 83 "test3.c"
            {
    POMP2_For_enter(&pomp2_region_14, "53*regionType=for*sscl=test3.c:84:84*escl=test3.c:0:0**" );
#line 84 "test3.c"
#pragma omp for nowait
                for ( i = 0; i < 4; ++i )
                {
                    printf( "do %d\n", i );
                }
POMP2_For_exit(&pomp2_region_14);
#line 89 "test3.c"
            }
POMP2_Implicit_barrier_enter(&pomp2_region_13);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_13);
POMP2_Parallel_end(&pomp2_region_13); }
POMP2_Parallel_join(&pomp2_region_13);
 }
#line 90 "test3.c"
        }
POMP2_Implicit_barrier_enter(&pomp2_region_12);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_12);
POMP2_Parallel_end(&pomp2_region_12); }
POMP2_Parallel_join(&pomp2_region_12);
 }
#line 91 "test3.c"
    }
POMP2_Implicit_barrier_enter(&pomp2_region_11);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_11);
POMP2_Parallel_end(&pomp2_region_11); }
POMP2_Parallel_join(&pomp2_region_11);
 }
#line 92 "test3.c"

    // *****************************************
    // * Testing of nested for loops           *
    // *****************************************

{
int pomp_num_threads = omp_get_max_threads();
    POMP2_Parallel_fork(&pomp2_region_15, pomp_num_threads, "58*regionType=parallel*sscl=test3.c:97:97*escl=test3.c:0:0**" );
#line 97 "test3.c"
  #pragma omp parallel POMP2_DLIST_00015 num_threads(pomp_num_threads) 
{ POMP2_Parallel_begin(&pomp2_region_15);
#line 98 "test3.c"
    {
    POMP2_For_enter(&pomp2_region_16, "53*regionType=for*sscl=test3.c:99:99*escl=test3.c:0:0**" );
#line 99 "test3.c"
    #pragma omp for nowait
        for ( i = 0; i < 4; ++i )
        {
            for ( j = 0; j < 4; ++j )
            {
                printf( "do %d\n", i );
            }
        }
POMP2_For_exit(&pomp2_region_16);
#line 107 "test3.c"

    POMP2_For_enter(&pomp2_region_17, "55*regionType=for*sscl=test3.c:108:108*escl=test3.c:0:0**" );
#line 108 "test3.c"
    #pragma omp for nowait
        for ( i = 0; i < 4; ++i )
        {
            for ( j = 0; j < 4; ++j )
            {
                for ( k = 0; k < 4; ++k )
                {
                    printf( "do %d\n", i );
                }
            }
        }
POMP2_For_exit(&pomp2_region_17);
#line 119 "test3.c"

    POMP2_For_enter(&pomp2_region_18, "55*regionType=for*sscl=test3.c:120:120*escl=test3.c:0:0**" );
#line 120 "test3.c"
    #pragma omp for nowait
        for ( i = 0; i < 4; ++i )
        {
            for ( j = 0; j < 4; ++j )
            {
                printf( "do %d\n", i );
            }
        }
POMP2_For_exit(&pomp2_region_18);
#line 128 "test3.c"

    POMP2_For_enter(&pomp2_region_19, "55*regionType=for*sscl=test3.c:129:129*escl=test3.c:0:0**" );
#line 129 "test3.c"
    #pragma omp for nowait
        for ( i = 0; i < 4; ++i )
        {
            for ( j = 0; j < 4; ++j )
            {
                for ( k = 0; k < 4; ++k )
                {
                    printf( "do %d\n", i );
                }
            }
        }
POMP2_For_exit(&pomp2_region_19);
#line 140 "test3.c"

    POMP2_For_enter(&pomp2_region_20, "55*regionType=for*sscl=test3.c:141:141*escl=test3.c:0:0**" );
#line 141 "test3.c"
    #pragma omp for nowait
        for ( i = 0; i < 4; ++i )
        {
            for ( j = 0; j < 4; ++j )
            {
                printf( "do %d\n", i );
            }
        }
POMP2_For_exit(&pomp2_region_20);
#line 149 "test3.c"
    }
POMP2_Implicit_barrier_enter(&pomp2_region_15);
#pragma omp barrier
POMP2_Implicit_barrier_exit(&pomp2_region_15);
POMP2_Parallel_end(&pomp2_region_15); }
POMP2_Parallel_join(&pomp2_region_15);
 }
#line 150 "test3.c"
}
