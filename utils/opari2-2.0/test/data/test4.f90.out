#ifdef _POMP2
#  undef _POMP2
#endif
#define _POMP2 200110

#line 1 "test4.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Test the nowait clause.

       program test4
      include 'test4.f90.opari.inc'
       integer i

       real a(5,5), b(5,5), c(5,5)

      pomp_num_threads = pomp_get_max_threads000()
      call POMP2_Parallel_fork(pomp2_region_1, pomp_num_threads, &
         "62*regionType=parallel*sscl=test4.f90:25:25*escl=test4.f90:0:0**" )
#line 25 "test4.f90"
       !$omp parallel num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_1)
#line 26 "test4.f90"
       write(*,*) "parallel"
      call POMP2_Do_enter(pomp2_region_2, &
         "56*regionType=do*sscl=test4.f90:27:27*escl=test4.f90:0:0**" )
#line 27 "test4.f90"
         !$omp do
         do i=1,4
           write(*,*) "do nowait",i
         enddo
#line 31 "test4.f90"
         !$omp enddo nowait
      call POMP2_Do_exit(pomp2_region_2)
#line 32 "test4.f90"

      call POMP2_Sections_enter(pomp2_region_3, &
         "76*regionType=sections*sscl=test4.f90:33:33*escl=test4.f90:0:0*numSections=0**" )
#line 33 "test4.f90"
         !$omp sections
#line 34 "test4.f90"
           !$omp section
      call POMP2_Section_begin(pomp2_region_3, &
         "76*regionType=sections*sscl=test4.f90:33:33*escl=test4.f90:0:0*numSections=0**" )
#line 35 "test4.f90"
           write(*,*) "section nowait 1"
      call POMP2_Section_end(pomp2_region_3)
#line 36 "test4.f90"
           !$omp section
      call POMP2_Section_begin(pomp2_region_3, &
         "76*regionType=sections*sscl=test4.f90:33:33*escl=test4.f90:0:0*numSections=1**" )
#line 37 "test4.f90"
           write(*,*) "section nowait 2"
      call POMP2_Section_end(pomp2_region_3)
#line 38 "test4.f90"
         !$omp end sections nowait
      call POMP2_Sections_exit(pomp2_region_3)
#line 39 "test4.f90"

      call POMP2_Single_enter(pomp2_region_4, &
         "60*regionType=single*sscl=test4.f90:40:40*escl=test4.f90:0:0**" )
#line 40 "test4.f90"
         !$omp single
      call POMP2_Single_begin(pomp2_region_4)
#line 41 "test4.f90"
         write(*,*) "single nowait"
      call POMP2_Single_end(pomp2_region_4)
#line 42 "test4.f90"
         !$omp end single nowait
      call POMP2_Single_exit(pomp2_region_4)
#line 43 "test4.f90"

      call POMP2_Workshare_enter(pomp2_region_5, &
         "63*regionType=workshare*sscl=test4.f90:44:44*escl=test4.f90:0:0**" )
#line 44 "test4.f90"
         !$omp workshare
         a = b + c
#line 46 "test4.f90"
         !$omp end workshare nowait
      call POMP2_Workshare_exit(pomp2_region_5)
#line 47 "test4.f90"

      call POMP2_Implicit_barrier_enter(pomp2_region_1)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1)
      call POMP2_Parallel_end(pomp2_region_1)
#line 48 "test4.f90"
         !$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1)
#line 49 "test4.f90"
       end program test4

      integer function pomp_get_max_threads000()
         integer omp_get_max_threads
         pomp_get_max_threads000=omp_get_max_threads()
         return
      end

      subroutine POMP2_Init_regions_000()
         include 'test4.f90.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, &
         "64*regionType=parallel*sscl=test4.f90:25:25*escl=test4.f90:48:48**" )
         call POMP2_Assign_handle( pomp2_region_2, &
         "58*regionType=do*sscl=test4.f90:27:27*escl=test4.f90:31:31**" )
         call POMP2_Assign_handle( pomp2_region_3, &
         "78*regionType=sections*sscl=test4.f90:33:33*escl=test4.f90:38:38*numSections=2**" )
         call POMP2_Assign_handle( pomp2_region_4, &
         "62*regionType=single*sscl=test4.f90:40:40*escl=test4.f90:42:42**" )
         call POMP2_Assign_handle( pomp2_region_5, &
         "65*regionType=workshare*sscl=test4.f90:44:44*escl=test4.f90:46:46**" )
      end
