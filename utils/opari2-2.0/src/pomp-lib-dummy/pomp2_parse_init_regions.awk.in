##
## This file is part of the Score-P software (http://www.score-p.org)
##
## Copyright (c) 2009-2011,
##    RWTH Aachen University, Germany
##    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
##    Technische Universitaet Dresden, Germany
##    University of Oregon, Eugene, USA
##    Forschungszentrum Juelich GmbH, Germany
##    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
##    Technische Universitaet Muenchen, Germany
##
## See the COPYING file in the package base directory for details.
##

#
# pomp2_parse_init_regions.awk
#
# Expects the output of
# $NM) $ALL_OBJS_AND_LIBS | $(GREP) -i POMP2_Init_regions | $(GREP) " T "
# as input. See <prefix/share/opari/doc/example/Makefile> for a working
# example.
#
# The output is C-code that needs to be linked to your application. It
# provides three function:
#
# void POMP2_Init_regions(): need to be called from your POMP2 library to
# initialize all instrumented POMP2 region by calling the instrumented
# functions POMP2_Init_regions_*.
#
# size_t POMP2_Get_num_regions() returns the number of POMP2 regions found
# in $ALL_OBJS_AND_LIBS.
#
#  const char* POMP2_Get_opari2_version() returns a version string.
# 
# Author: Christian Roessel <c.roessel@fz-juelich.de>
#

/_[0-9][0-9]*_[0-9][0-9]*_?_?$/ {  
  for (i = 1; i <= NF; i++)
  {
    if (index($i,"POMP2_Init_regions") != 0)
    {
      split ($i,unmangled,"POMP2_Init_regions");
      # $i looks like "POMP2_Init_regions_uniqueId_nRegions_?_?"
      regions[n++] = $i;
      split(unmangled[2], tokens, "_"); 
      nRegions += tokens[3];
      continue;
    }
    if (index($i,"pomp2_init_regions") != 0)
    {
      split ($i,unmangled,"pomp2_init_regions");
      # $i looks like "pomp2_init_regions_uniqueId_nRegions_?_?"
      regions[n++] = $i;
      split(unmangled[2], tokens, "_"); 
      nRegions += tokens[3];
      continue;
    }
    if (index($i,"POMP2_INIT_REGIONS") != 0)
    {
      split ($i,unmangled,"POMP2_INIT_REGIONS");
      # $i looks like "POMP2_INIT_REGIONS_uniqueId_nRegions_?_?"
      regions[n++] = $i;
      split(unmangled[2], tokens, "_"); 
      nRegions += tokens[3];
      continue;
    }   
  }
}
  
END{ 
  print tmp "\n"	
  print "#include <stddef.h>\n"

  # cut away leading full-stops
  for (i in regions)
  {
    sub(/^\./, "", regions[i]);
  }

  # declare POMP2_Init_regions_* functions extern
  for (i in regions)
  {
    print "extern void " regions[i] "();";
  }

  # define POMP2_Init_regions() and call all POMP2_Init_regions_* functions
  print "\nvoid POMP2_Init_regions()"
  print "{"
  for (i in regions)
  {
    print "    " regions[i] "();";
  }
  print "}\n"

  # define function POMP2_Get_num_regions()
  print "size_t POMP2_Get_num_regions()"
  print "{"
  if (nRegions != 0)
  {
      print "    return " nRegions ";"
  } else {
      print "    return 0;"
  }
  print "}\n"

  # define function POMP2_Get_opari2_version()
  print "const char* POMP2_Get_opari2_version()"
  print "{"
  print "    return \"@PACKAGE_VERSION@\";"
  print "}\n"
}  
