#!/bin/sh

#############################################################################
# FixMakefile script for TAU
#   based on the Sage/pC++ FixMakefiles

# An IMPROVED, FASTER script.  It now builds sed.cmd, and applies it ONCE!
#
# This script recursively finds Makefiles, and modifies them according
# to the keyword provided
#
# Kurt Windisch 12/10/96
# Pete Beckman 9/6/93
#############################################################################

# Record all the arguments
arguments=$*

# debug:
#echo $arguments

sedout=./utils/FixMakefile.sed

# Clear any old data
grep "^#" $sedout > $sedout.~~0
/bin/mv $sedout.~~0 $sedout

# Silly GOOFY Stupid /bin/sh on decstations gobble up the "\2" and make
# it an ASCII 002.  That breaks the echo commands below, since I REALLY
# want \2 to be output, not 002.  How in the world can DEC mess up /bin/sh?
# BSD-derived ash does the same.
bs=""

if test `echo "\2" | wc -c` = 2
  then
    bs="\\"
fi

# Default makefile sed commands.  Returns things to normal
echo "s/\(.*\)#ENDIF#\(.*\)/$bs\2$bs\1#ENDIF#/g" >> $sedout

###############################################################
# PARSE AN ARGUMENT
###############################################################
while [ x$1 != x ]
do

#echo Parsing $1
case $1 in

###############################################################
# Restore Makefiles to their original beauty
###############################################################
     arch=default)
        echo Restoring all files to original distribution
        config_arch=`echo $1 | sed 's/^arch=//'`
	echo "s/^CONFIG_ARCH=\(.*\)/CONFIG_ARCH=$config_arch/g" >> $sedout
if [ -d target ]
  then
        pvm_arch=default
	pvm_homedir=default

        echo "s/#PVM_INSTALLED#\(.*\)/$bs\1#PVM_INSTALLED#/g" >> $sedout
	echo "s/^PVM_ARCH=\(.*\)/PVM_ARCH=$pvm_arch/g" >> $sedout
	echo "s@^PVM_DIR=\(.*\)@PVM_DIR=$pvm_homedir@g" >> $sedout

# make dir if it does not exist
	if [ ! -d target/pvm/lib ] 
	  then
		mkdir target/pvm/lib
	fi
 
# make dir if it does not exist
	if [ ! -d target/pvm/lib/$pvm_arch ] 
	  then
		mkdir target/pvm/lib/$pvm_arch
	fi
fi
	;;

     awedir=*)
        awedir=`echo $1 | sed -e 's/^awedir=//'`
	echo "s,^AWEDIR=.*$,AWEDIR=$awedir,g" >> $sedout
	;;

     ptdir=*)
        ptdir=`echo $1 | sed -e 's/^ptdir=//'`
	echo "s,^PTDIR=.*$,PTDIR=$ptdir,g" >> $sedout
	;;

     pcldir=*)
        pcldir=`echo $1 | sed -e 's/^pcldir=//'`
	echo "s,^PCLDIR=.*$,PCLDIR=$pcldir,g" >> $sedout
	;;

     papidir=*)
        papidir=`echo $1 | sed -e 's/^papidir=//'`
	echo "s,^PAPIDIR=.*$,PAPIDIR=$papidir,g" >> $sedout
	;;

     taugcclibdir=*)
        taugcclibdir=`echo $1 | sed -e 's/^taugcclibdir=//'`
        echo "s,^TAUGCCLIBDIR=.*$,TAUGCCLIBDIR=$taugcclibdir,g" >> $sedout
        ;;

     papisubdir=*)
        papisubdir=`echo $1 | sed -e 's/^papisubdir=//'`
	echo "s,^PAPISUBDIR=.*$,PAPISUBDIR=$papisubdir,g" >> $sedout
	;;

     oparidir=*)
        oparidir=`echo $1 | sed -e 's/^oparidir=//'`
	echo "s,^OPARIDIR=.*$,OPARIDIR=$oparidir,g" >> $sedout
	;;

     epilogdir=*)
        epilogdir=`echo $1 | sed -e 's/^epilogdir=//'`
	echo "s,^EPILOGDIR=.*$,EPILOGDIR=$epilogdir,g" >> $sedout
	;;

     pdtdir=*)
        pdtdir=`echo $1 | sed -e 's/^pdtdir=//'`
	echo "s,^PDTDIR=.*$,PDTDIR=$pdtdir,g" >> $sedout
	;;

     pdtcompdir=*)
        pdtcompdir=`echo $1 | sed -e 's/^pdtcompdir=//'`
	echo "s,^PDTCOMPDIR=.*$,PDTCOMPDIR=$pdtcompdir,g" >> $sedout
	;;

     pdtcxx=*)
        pdtcxx=`echo $1 | sed -e 's/^pdtcxx=//'`
	echo "s,^PDT_CXX=.*$,PDT_CXX=$pdtcxx,g" >> $sedout
	;;

     dyninstdir=*)
        dyninstdir=`echo $1 | sed -e 's/^dyninstdir=//'`
	echo "s,^DYNINSTDIR=.*$,DYNINSTDIR=$dyninstdir,g" >> $sedout
	;;

     jdkdir=*)
        jdkdir=`echo $1 | sed -e 's/^jdkdir=//'`
	echo "s,^JDKDIR=.*$,JDKDIR=$jdkdir,g" >> $sedout
	;;

     pythoninc=*)
        pythoninc=`echo $1 | sed -e 's/^pythoninc=//'`
	echo "s,^PYTHON_INCDIR=.*$,PYTHON_INCDIR=$pythoninc,g" >> $sedout
	#echo "Using PYTHON INCLUDE DIR =" $pythoninc
	;;

     pythonlib=*)
        pythonlib=`echo $1 | sed -e 's/^pythonlib=//'`
	echo "s,^PYTHON_LIBDIR=.*$,PYTHON_LIBDIR=$pythonlib,g" >> $sedout
	#echo "Using PYTHON LIB DIR =" $pythonlib
	;;

     tulipdir=*)
        tulipdir=`echo $1 | sed -e 's/^tulipdir=//'`
	echo "s,^TULIPDIR=.*$,TULIPDIR=$tulipdir,g" >> $sedout
	;;

###############################################################
# Set the default optimization flags for compiling pcxx und user programs
###############################################################
     pcxxopt=*)
        pcxxopt=`echo $1 | sed -e 's/^pcxxopt=//' -e 's/_/ /'`
	echo "s@^PCXX_OPT=\(.*\)@PCXX_OPT=$pcxxopt@g" >> $sedout
        ;;
     useropt=*)
        useropt=`echo $1 | sed -e 's/^useropt=//' -e 's/#/ /g'`
	echo "s@^USER_OPT=\(.*\)@USER_OPT=$useropt@g" >> $sedout
        ;;

     extradir=*)
        extradir=`echo $1 | sed -e 's/^extradir=//' `
	echo "s@^EXTRADIR=\(.*\)@EXTRADIR=$extradir@g" >> $sedout
        ;;
###############################################################
# Set the TAUROOT variable
###############################################################
     tauroot=*)
        tauroot=`echo $1 | sed -e 's/^tauroot=//' `
	echo "s@^TAUROOT=\(.*\)@TAUROOT=$tauroot@g" >> $sedout
        ;;

###############################################################
# Set the TAU_PREFIX_INSTALL_DIR variable
###############################################################
     tauprefix=*)
        tauprefix=`echo $1 | sed -e 's/^tauprefix=//' `
        echo "s@^TAU_PREFIX_INSTALL_DIR=\(.*\)@TAU_PREFIX_INSTALL_DIR=$tauprefix@g" >> $sedout
        ;;

###############################################################
# Set the TAU_PREFIX_INSTALL_DIR variable
###############################################################
     tauoptions=*)
        tauoptions=`echo $1 | sed -e 's/^tauoptions=//' `
        echo "s@^TAU_OPTIONS=\(.*\)@TAU_OPTIONS=$tauoptions@g" >> $sedout
        ;;

###############################################################
# Set the default compilers
###############################################################
     c_compiler=*)
        c_compiler=`echo $1 | sed -e 's/^c_compiler=//' `
	echo "s@^CONFIG_CC=\(.*\)@CONFIG_CC=$c_compiler@g" >> $sedout
        ;;
     cxx_compiler=*)
        cxx_compiler=`echo $1 | sed -e 's/^cxx_compiler=//'`
	echo "s@^CONFIG_CXX=\(.*\)@CONFIG_CXX=$cxx_compiler@g" >> $sedout
        ;;

###############################################################
# Set up MPI stuff if possible
###############################################################
     MPI)
        echo NOTE: Using the TAU MPI Profiling Interface 
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;

     MPI_THREADED)
        echo NOTE: Using the TAU MPI_Init_thread Profiling Interface Wrapper
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;

     MPI_R_SUFFIX)
        echo NOTE: Using thread-safe MPI library with _r suffix
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;

     mpiincargs=*)
        mpiinc=`echo $1 | sed -e 's/^mpiincargs=//' -e 's/#/ /g'`
	echo "s@^TAU_MPI_INC=\(.*\)@TAU_MPI_INC=$mpiinc@g" >> $sedout
        #echo "MPIINC=$mpiinc"
        ;;

     mpilibargs=*)
        mpilib=`echo $1 | sed -e 's/^mpilibargs=//' -e 's/#/ /g'`
	echo "s@^TAU_MPI_LIB=\(.*\)@TAU_MPI_LIB=$mpilib@g" >> $sedout
        #echo "MPILIB=$mpilib" 
        ;;

     mpiflibargs=*)
        mpiflib=`echo $1 | sed -e 's/^mpiflibargs=//' -e 's/#/ /g'`
	echo "s@^TAU_MPI_FLIB=\(.*\)@TAU_MPI_FLIB=$mpiflib@g" >> $sedout
        #echo "MPIFLIB=$mpiflib" 
        ;;

     mpilib=*)
        mpilibdir=`echo $1 | sed -e 's/^mpilib=//'`
	echo "s@^TAU_MPILIB_DIR=\(.*\)@TAU_MPILIB_DIR=$mpilibdir@g" >> $sedout
        #echo "TAU_MPILIB_DIR=$mpilibdir" 
        ;;
     

###############################################################
# Set the CONFIG_ARCH=<machine-name> in the Makefiles.
###############################################################
     arch=*)
        config_arch=`echo $1 | sed 's/^arch=//'`
	echo "s/^CONFIG_ARCH=\(.*\)/CONFIG_ARCH=$config_arch/g" >> $sedout

###############################################################
# Set up PVM stuff if possible
###############################################################

#Only do the PVM stuff if this is a pC++ distribution
if [ -d target ]
  then
        xdev_arch=`utils/archfind -x`
        pvm_arch=`grep "^$config_arch" utils/pvm_arches | awk '{print $2;}'`
        pvm_parch=`grep "^$xdev_arch" utils/pvm_arches | awk '{print $2;}'`

	pvm_homedir=`utils/checkPVM`
	if [ $pvm_homedir = no ]
	  then
            echo PVM:  Could not find a PVM installation, PVM run-time will not be compiled
	  else
	    echo PVM:  Found PVM installation at $pvm_homedir
	    echo PVM:  PVM run-time module will be installed
            echo "s/#PVM_INSTALLED#\(.*\)/$bs\1#PVM_INSTALLED#/g" >> $sedout
	fi

# used to be "xnone"
        if [ x$pvm_parch = x$pvm_parch ]
          then
            if [ x$pvm_arch = x ]
              then
                echo PVM:  No matching PVM architecture name in utils/pvm_arches for $config_arch
                echo PVM:  Configuring pC++ PVM runtime module for UNKNOWN
	        pvm_arch=UNKNOWN
            else
              echo PVM:  Matching PVM-style architecture name is $pvm_arch
            fi
          else
            echo PVM:  Found Parallel PVM machine $pvm_parch
            pvm_arch=$pvm_parch
	fi

	echo "s/^PVM_ARCH=\(.*\)/PVM_ARCH=$pvm_arch/g" >> $sedout
	echo "s@^PVM_DIR=\(.*\)@PVM_DIR=$pvm_homedir@g" >> $sedout

# make dir if it does not exist
	if [ ! -d target/pvm/lib ] 
	  then
		mkdir target/pvm/lib
	fi
 
# make dir if it does not exist
	if [ ! -d target/pvm/lib/$pvm_arch ] 
	  then
		mkdir target/pvm/lib/$pvm_arch
	fi
fi
	;;

     sage1dir=*)
        sage1dir=`echo $1 | sed -e 's/^sage1dir=//' -e 's/_/ /'`
	echo "s@^SAGE1DIR=\(.*\)@SAGE1DIR=$sage1dir@g" >> $sedout
        ;;

     sage2dir=*)
        sage2dir=`echo $1 | sed -e 's/^sage2dir=//' -e 's/_/ /'`
	echo "s@^SAGE2DIR=\(.*\)@SAGE2DIR=$sage2dir@g" >> $sedout
        ;;

###############################################################
# Else, just do the standard modification based on the keyword
###############################################################
     NO_RANLIB)
	echo NOTE: ranlib not required for this architecture.
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_DECCXX)
	echo NOTE: Using the Compaq cxx C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     COMPAQ_ALPHA)
	echo NOTE: Using configuration for Compaq Alpha      
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_IBMXLC)
	echo NOTE: Using the IBM xlC C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_NECCXX)
	echo NOTE: Using the NEC C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_INTELCXX)
	echo NOTE: Using the Intel ecpc C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HITACHI)
	echo NOTE: Using the HITACHI SR8000 MPP options
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HITACHI_FORTRAN)
	echo NOTE: Using the HITACHI Fortran 90 compiler options
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HITACHI_OPENMP)
	echo NOTE: Using HITACHI OpenMP options
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBMXLC_OPENMP)
	echo NOTE: Using the IBM xlC OpenMP options
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     COMPAQCXX_OPENMP)
	echo NOTE: Using the Compaq cxx OpenMP options
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     COMPAQCXX_PTHREAD)
	echo NOTE: Using the Compaq cxx -pthread option
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     COMPENSATE)
	echo NOTE: Using the TAU instrumentation perturbation compensation scheme
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     MUSE)
	echo NOTE: Using MAGNET/MUSE with TAU
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     MUSE_EVENT)
	echo NOTE: Using MAGNET/MUSE EVENT with TAU
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     MUSE_MULTIPLE)
	echo NOTE: Using MAGNET/MUSE MULTIPLE with TAU
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     USE_SGINCC)
	echo NOTE: Using the SGI NCC C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGICC)
	echo NOTE: Using SGI CC C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PDTSGICC)
	echo NOTE: Using -LANG:std option for tau_instrumentor
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PDTCXX)
	echo NOTE: Using a different compiler for tau_instrumentor
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PDTARCH)
	echo NOTE: Using a different architecture/compiler dir for PDT 
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PDTALPHACXX)
	echo NOTE: Using -D__USE_STD_IOSTREAM option for tau_instrumentor
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PDTHPACC)
	echo NOTE: Using -AA option for tau_instrumentor
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     ENABLE32BIT)
	echo NOTE: Using -32 flag for the C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     ENABLEN32BIT)
	echo NOTE: Using -n32 flag for the C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     ENABLE64BIT)
	echo NOTE: Using -64 flag for the C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     SGIGNU)
	echo NOTE: Using GNU C++ compiler on SGI
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAYCC)
	echo NOTE: Using The Cray T3E CC C++ compiler 
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAYX1CC)
	echo NOTE: Using The Cray CC C++ compiler 
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAYKAI)
	echo NOTE: Using The Cray T3E KAI C++ compiler 
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PGI) 
	echo NOTE: Using Portland Group Inc. pgCC C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PGI1.7) 
	echo NOTE: Using special switches for PGI 1.7 compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PGICC) 
	echo NOTE: Using --prelink_objects for PGI 3.0+ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     FUJITSU) 
	echo NOTE: Using Fujitsu FCC C++ compiler
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     NEXT_CLIB)
	echo NOTE: The NeXTs do not have a libc.a
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_CFRONT)
	echo "NOTE: Using the 'CC' C++ Compiler"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HP-ALLOCA)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HPUX10)
	echo NOTE: HPUX Version 10 fixes will be used
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HP)
	echo NOTE: HPUX fixes will be used
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HPGNU)
	echo NOTE: HP GNU fixes will be used
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     ACC)
	echo NOTE: HP aCC compiler will be used
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     APPLECXX)
	echo NOTE: Apple c++ compiler will be used
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_CC)
	echo "NOTE: Using default cc compiler."
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HP_CFLAGS)
	echo NOTE: Using -AA flag and shared libraries for HP native compiler.
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     MIPS_CC)
	echo NOTE: Using -Wf,-XNg800 flags for MIPS native compiler.
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     MIPSR4K)
	echo NOTE: Using -mips2 optimization flag MIPS native compiler.
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     MIPSR8K)
	echo NOTE: Using -mips4 optimization flag MIPS native compiler.
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     USE_GCC)
	echo NOTE: Using the Gnu C Compiler, GCC
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CM5)
	echo "NOTE: *** CM5 development enviroment found ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PARAGON)
	echo "NOTE: *** Paragon development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SP1)
	echo "NOTE: *** SP development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBM64)
	echo "NOTE: *** Using IBM 64 bit options.  ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PPC64)
	echo "NOTE: *** IBM pSeries Linux environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     T3D)
	echo "NOTE: *** CRAY T3D development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     T3E)
	echo "NOTE: *** CRAY T3E development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAY-ALLOCA)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGIMP)
	echo "NOTE: *** SGI Symmetric Multiprocessing Environment found. ***"
        numproc=`/bin/hinv | /bin/grep -v "PU" | /usr/bsd/head -1 | /bin/cut -d" " -f1 `
	echo NOTE: "*** There are $numproc processors in this system ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SOL2)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CNXSPP)
	echo "NOTE: *** Convex SPP development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CS2)
	echo "NOTE: *** Meiko CS2 development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     C90)
	echo "NOTE: *** Cray C90 development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     KSR)
	echo "NOTE: *** Kendall Square KSR-1 development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PTX)
	echo "NOTE: *** Symmetry PTX development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     TC2000)
        echo "Bernd, I dont know what to do here...."
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SYMMETRY)
	echo "NOTE: *** Symmetry Dynix development environment found. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     TCLTK)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     AWE_AVAILABLE)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PTHREAD_AVAILABLE)
        echo "NOTE: Using pthreads as the thread package. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     NOCOMM)
        echo "NOTE: Disabling tracking of communication messages in MPI ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     TAU_SPROC)
	echo "NOTE: Using SGI sproc as the thread package. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     TULIPTHREADS)
	echo "NOTE: Using Tulip Threads as the thread package. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SMARTS)
	echo "NOTE: Using SMARTS interface for Tulip threads. ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PCL)
	echo "NOTE: Using PCL interface for Hardware Performance Counters ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PAPI)
	echo "NOTE: Using PAPI interface for Hardware Performance Counters ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PYTHON)
	echo "NOTE: Using TAU Python bindings ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     MULTIPLECOUNTERS)
	echo "NOTE: Using multiple counters for measurement ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PDT)
	echo "NOTE: Using PDT for TAU Source Code Instrumentation ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     DYNINST)
	echo "NOTE: Using DYNINST for TAU Runtime Instrumentation ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     JAVA)
	echo "NOTE: Using Java Virtual Machine Instrumentation ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     OPENMP)
	echo "NOTE: Using OpenMP Threads ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     OPARI)
	echo "NOTE: Using Opari OpenMP directive rewriting tool ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     KOJAKOPARI)
	echo "NOTE: Using KOJAK's Opari implementation ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     OPARI_REGION)
	echo "NOTE: Using Opari tool with OpenMP region information ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     OPARI_CONSTRUCT)
	echo "NOTE: Using Opari tool with OpenMP construct information ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     EPILOG)
	echo "NOTE: Using EPILOG Tracing Package ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     EPILOGMPI)
	echo "NOTE: Using EPILOG's MPI Wrapper Library ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     EPILOGOMPI)
	echo "NOTE: Using EPILOG's OpenMP MPI Wrapper Library ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     EPILOGOMP)
	echo "NOTE: Using EPILOG's OpenMP Trace Library ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PGIOPENMP)
	echo "NOTE: Using PGI's OpenMP options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     INTELOPENMP)
	echo "NOTE: Using Intel's OpenMP options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     GUIDE)
	echo "NOTE: Using KAI's Guide OpenMP ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     COMPAQ_GUIDEF90)
	echo "NOTE: Using Compaq f90 options with Guide ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PCLPTHREAD)
	echo "NOTE: Using multi-threaded access to H/W Performance Counters ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PAPIPTHREAD)
	echo "NOTE: Using multi-threaded access to H/W Performance Counters ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     LWP_AVAILABLE)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     TASK_AVAILABLE)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PCXX)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HPCXX)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     ANSIC)
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
# PROFILING OPTIONS
     PROFILE)
	echo "NOTE: Enabled Profiling. Compiling with -DPROFILING_ON"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
# TRACING OPTIONS
     TRACE)
	echo "NOTE: Enabled Tracing. Compiling with -DTRACING_ON"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     MONITOR)
	echo "NOTE: Enabled Monitoring. Compiling with -DMONITORING_ON"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     KAI)
	echo "NOTE: Using KAI KCC options"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGICOUNTERS)
	echo "NOTE: Using SGI R10000 Hardware Counters for Profiling"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGITIMERS)
	echo "NOTE: Using SGI Fast Nanosecond Timers for Profiling"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAYTIMERS)
	echo "NOTE: Using Cray X1 fast nanosecond timers for profiling"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     LINUXTIMERS)
	echo "NOTE: Using Linux TSC Counters for low overhead wallclock time"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
ALPHATIMERS)
	echo "NOTE: Using Alpha clock_gettime for low overhead wallclock time"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CPUTIME)
	echo "NOTE: Using usertime + system time for Profiling"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PAPIWALLCLOCK)
	echo "NOTE: Using PAPI's low overhead wall clock time"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PAPIVIRTUAL)
	echo "NOTE: Using PAPI's CPU Time (process virtual time)"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PROFILESTATS)
	echo "NOTE: Using Profile Statistics (Std. Dev. of Excl time/counts)"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PROFILECALLPATH)
	echo "NOTE: Using Call Path Profiles"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PROFILECALLS)
	echo "NOTE: Using PROFILECALLS for tracing timings for each function invocation "
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CALLSTACK)
        echo "NOTE:  Using PROFILECALLSTACK for callstack tracing"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     INTELTFLOP)
	echo "NOTE: Using INTEL TeraFlop Profiling Options -DPOOMA_TFLOP"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     DEBUGPROF)
	echo "NOTE: Using Debugging Mode for Profiling Library -DDEBUG_PROF"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     STDCXXLIB)
	echo "NOTE: Using Standard C++ Library"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SOL2CC)
        echo "NOTE: Solaris2 CC doesn't support RTTI yet, using -DNO_RTTI"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     SOL2CC_OPENMP)
        echo "NOTE: Using Solaris CC's -xopenmp option"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
        ;;
     SOL2PAPI)
	echo "NOTE: Using PAPI on Solaris (static library) ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBMPAPI)
	echo "NOTE: Using PAPI with PM Toolkit options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     ALPHAPAPI)
	echo "NOTE: Using PAPI with DADD options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IA64PAPI)
	echo "NOTE: Using PAPI with IA-64 options (-lpapi) ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PPC64PAPI)
	echo "NOTE: Using PAPI with PPC64 options (-lpapi) ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGI64PAPI)
	echo "NOTE: Using PAPI with SGI64 options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBM64PAPI)
	echo "NOTE: Using PAPI with IBM64 options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBM64PAPILINUX)
	echo "NOTE: Using PAPI with IBM64 Linux options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBM64LINUX)
	echo "NOTE: Using IBM64 Linux options ***"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     GNU)
	echo "NOTE: GNU g++ options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     RTTI)
	echo "NOTE: <typeinfo.h> available"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     NORTTI)
	echo "NOTE: No Runtime Type Information available"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     KAINOEX)
	echo "NOTE: Using KAI with no exceptions for compiling"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGICCNOEX)
	echo "NOTE: Using SGI CC with no exceptions for compiling"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SETNODE0)
	echo "NOTE: Using default node no of 0 instead of -1"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     HP_FORTRAN)
	echo "NOTE: HP Fortran compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     GNU_FORTRAN)
	echo "NOTE: GNU Fortran compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SGI_FORTRAN)
	echo "NOTE: SGI f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBM_FORTRAN)
	echo "NOTE: IBM xlf90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBMXLFAPPLE)
	echo "NOTE: IBM XLF compiler for Apple Mac OS X options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBMXLCAPPLE)
	echo "NOTE: IBM xlC/xlc++ compiler for Apple Mac OS X options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     IBM64_FORTRAN)
	echo "NOTE: IBM 64 bit f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     THREADSAFE_COMPILERS)
	echo "NOTE: Using xlf90_r instead of xlf90 IBM compiler"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAY_FORTRAN)
	echo "NOTE: Cray f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     CRAY_X1_FORTRAN)
	echo "NOTE: Cray ftn compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     PGI_FORTRAN)
	echo "NOTE: PGI pgf90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     ABSOFT_FORTRAN)
	echo "NOTE: Absoft f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     FUJITSU_FORTRAN)
	echo "NOTE: Fujitsu F90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     NEC_FORTRAN)
	echo "NOTE: NEC f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     SUN_FORTRAN)
	echo "NOTE: Sun f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     COMPAQ_FORTRAN)
	echo "NOTE: Compaq f90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     KAI_FORTRAN)
	echo "NOTE: KAI guidef90 compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     INTEL_FORTRAN)
	echo "NOTE: Intel efc compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;
     INTEL32_FORTRAN)
	echo "NOTE: Intel ifc compiler specific options used"
        echo "s/#$1#\(.*\)/$bs\1#$1#/g" >> $sedout
	;;

     *)
	echo "ERROR: Unknown argument directive \`$1' to FixMakefile"
	;;
    esac

shift
done

#############################################################################
# Ok, I have built up $sedout, now apply it to all the Makefile\* I can find!
#############################################################################

# OK, stop here, and let another script actually hack all the Makefiles
echo "Script to modify Makefiles created."

