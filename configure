#!/bin/sh 
#****************************************************************************
#*			TAU Portable Profiling Package			   **
#*			http://www.acl.lanl.gov/tau		           **
#****************************************************************************
#*    Copyright 1997-2003						   **
#*    Department of Computer and Information Science, University of Oregon **
#*    Advanced Computing Laboratory, Los Alamos National Laboratory        **
#*    Research Center Juelich, ZAM Germany                                 **
#****************************************************************************
#*	
#*  Permission to use, copy, modify, and distribute this software and its
#*  documentation for any purpose and without fee is hereby granted,
#*  provided that the above copyright notice appear in all copies and that
#*  both that copyright notice and this permission notice appear in
#*  supporting documentation, and that the name of University of Oregon (UO)
#*  and Los Alamos National Laboratory (LANL) not be
#*  used in advertising or publicity pertaining to distribution of
#*  the software without specific, written prior permission.  The
#*  University of Oregon and LANL makes no representations about the
#*  suitability of this software for any purpose.  It is provided "as is"
#*  without express or implied warranty.
#*
#*  THE UNIVERSITY OF OREGON AND LANL DISCLAIMS ALL WARRANTIES WITH REGARD TO
#*  THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
#*  FITNESS, IN NO EVENT SHALL THE UNIVERSITY OF OREGON OR LANL BE LIABLE FOR
#*  ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
#*  RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
#*  CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
#*  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#****************************************************************************
#****************************************************************************
#*  Authors :    Sameer Shende (sameer@cs.uoregon.edu) (UO, LANL)
#*		 Peter Beckman, Steve Karmesin (ACL, LANL)
#*		 Kathleen Lindlan, Ariya Lohavanichbutr (UO)		
#*  Principal Investigators : 
#*		 Janice Cuny, Allen Malony (UO)
#*  TAU project was developed by Bernd Mohr, Lars Hansen, Kurt Windisch, 
#*  Darryl Brown, et. al. and directed by Allen Malony at University of Oregon.
#*  The TAU Portable Profiling Package uses part of TAU.
#****************************************************************************

# Configure script for TAU
#   Sameer Shende 11/12/97 for TAU Portable Profiling Package
#   Kurt Windisch 12/9/96
# Based on the configure script for Sage/pC++ by:
#   Pete Beckman 9/6/93
#   Lars Thomas Hansen 2/27/95 (Solaris fix)
#
# New options for TAU/HPC++:
#   -pcxx <sageroot directory>
#   -sage2 <edg-sage2 directory>
#   -pstl <pstl directory>
#   -hpnx <hpc++lib/nexus directory>
#
# Options for Configure :
#   ./configure -cc=<C Compiler> -c++=<C++ Compiler> -useropt=<User options>
#   -gnu  -PROFILE -TRACE  
# 
# Recommended configuration for testing on SGI:
#   ./configure -useropt=-64 -PROFILE
# For testing with KAI's KCC compiler 
#   ./configure -cc=cc -c++=KCC -PROFILE 
# If your C++ compiler does not support STL, you could use something like:
#   ./configure -useropt='-I/usr/local/packages/SGI-STL/' 
# after downloading the Standard Templates Library.
# This configure script has been tested on SGI, LINUX, SOLARIS2 and HP
#

# Currently this configure file modifies Makefiles within Sage to the
# following architecture names (see ./utils/archfind) :
#   ptx             a Sequent Symmetry running DYNIX/ptx (386/486 based)
#   symmetry        a Sequent Symmetry running DYNIX 3 (386/486 based)
#   hp9000s700      an HP 9000, series 700, running hpux
#   hp9000s800      an HP 9000, series 800, running hpux
#   decstation      a DecStation XXXX
#   rs6000	    an IBM RS6000 running AIX
#   sun4            a Sun Microsystems series 4 workstation (SPARC based)
#   solaris2	    a Sun Workstation running SVR4 Solaris 
#   next            a NeXT computer
#   sgi4k           an SGI R4K-based machine
#   sgi8k           an SGI R8K-based (Power) machine
#   cm5             a Thinking Machines Corporation CM-5
#   paragon         an Intel paragon
#   tc2000          a BBN Butterfly tc2000
#   ksr1            a Kendall Square KSR1
#   unknown         default setup, no machine selected (original)
#   alpha           an HP/Compaq Alpha running OSF/1 Tru64
#   c90             a Cray C90 running Unicos
#   t3d             a Cray T3D (Alpha-based) computer array
#   i386_linux 	    an Intel ix86 PC running LINUX
#   default         Returns all files to "distribution" snapshot. 
#                      This MUST be done before any CVS commands are called
#
# The tkfile may contain definitions of environment variables in the
# style of /bin/sh, e.g. (these are the defaults)
#
#   tcltkheader="-I/usr/local/include"
#   tcltklib="-L/usr/local/lib -ltk4.0 -ltcl7.4"
#   x11header="-I/usr/include"
#   x11lib="-L/usr/lib -lX11"
#
# If a file name is given, it must contain all these definitions.
# No checking is done to ensure that it does so.

rm -f .last_config
echo $* > .last_config
echo $* >> .all_configs

# Record all the arguments
arguments=$*

# Default compilers and options
c_compiler=default
cxx_compiler=default
pdt_cxx_compiler=default
fixmakeargs=""
pcxxopt=-g
useropt=
tag=no
tautag=
orig_useropt=
mpi=no
mpi2=no
mpiio=no
mpiinc=
mpilib=
mpilibrary=no
shmem=no
shmeminc=
shmemlib=
shmemlibrary=no
threadsafe=no
additional_mpiincs=
additional_mpilibs=
pythoninc=
pythonlib=
python=no
extradir=
awe=no
pthread=no
muse=no
muse_event=no
muse_multiple=no
comm=yes
sproc=no
noex=no
setnode0=no
tulipthread=no
compensate=no
smarts=no
pcl=no
papi=no
task=no
lwp=no
tcltk=yes
tcltkfile="/"
kai=no
pgi=no
fujitsu=no
guidef90=no
stdcxxlib=no
inteltflop=no
intelifort=no
intel=no
profile=no
monitor=no
profilecounters=no
multiplecounters=no
profilestats=no
profilememory=no
callpath=no
depthlimit=no
phase=no
profilecalls=no
profilecallstack=no
trace=no
debugprof=no
sgitimers=no
craytimers=no
linuxtimers=no
alphatimers=no
cputime=no
papiwallclock=no
papivirtual=no
use_pcxx=no
use_hpcxx=no
use_ansic=no
use_sage2=no
use_pstl=no
use_hpnx=no
tauarch=unknown
pdtcompdir=unknown
tauprefix=unknown
execprefix=unknown
taugcclibdir=unknown
tautoplevel=
tauoptions=
pdt_root_dir="."
pdt=no
vtf=no
slog2=no
opari=no
epilog=no
opari_region=no
opari_construct=no
dyninst=no
java=no
openmp=no
ibmxlc=no
ibmxlc_r=no 
fortran_compiler=no

# debug:
# echo $arguments

# Reset include/Makefile before starting anything else
for i in include/Makefile
do
    sed -f utils/FixMakefile.sed.default < ${i} > ${i}~~0
    mv ${i}~~0 ${i}
done

# PARSE COMMAND LINE SWITCHES
###############################################################
for arg in "$@";
do
  case $arg in

  -cc=*)
    myarg=`echo $arg | sed 's/-cc=//'`
    if [ $myarg = cc -o $myarg = gcc -o $myarg = KCC -o $myarg = pgcc -o $myarg = guidec -o $myarg = xlc -o $myarg = ecc -o $myarg = icc -o $myarg = powerpc64-linux-gcc -o $myarg = pathcc ]
      then
        c_compiler=$myarg
      else
        testxlc=`echo $myarg | sed -e 's/xlc//'`
        if [ "y$testxlc" = "y$myarg" ]
        then
          echo "WARNING: valid options for cc are 'cc', 'gcc', 'KCC', 'guidec', '*xlc*', 'ecc', 'icc', 'pathcc', and 'pgcc' "
#       exit 1
        else
          c_compiler=$myarg
        fi
    fi
    shift
    ;;

  -c++=*)
    myarg=`echo $arg | sed 's/-c++=//'`
    if [ $myarg = CC -o $myarg = KCC -o $myarg = g++ -o $myarg = cxx  -o $myarg = NCC -o $myarg = pgCC  -o $myarg = egcs -o $myarg = FCC -o $myarg = guidec++ -o $myarg = aCC -o $myarg = c++ -o $myarg = ecpc -o $myarg = icpc -o $myarg = powerpc64-linux-g++ -o $myarg = pathCC ]
      then
        cxx_compiler=$myarg
      else
        testxlc=`echo $myarg | sed -e 's/xl//'`
	if [ "y$testxlc" = "y$myarg" ]
        then
          echo "WARNING: valid options for c++ are 'CC', 'KCC', 'g++', '*xlC*', 'cxx' , 'NCC', 'egcs', 'pgCC', 'FCC', 'guidec++', 'aCC', 'ecpc', 'icpc', 'pathCC', and 'c++'"
#       exit 1
        else
          cxx_compiler=$myarg
        fi
    fi
    shift
    ;;

  -pdt_c++=*)
    myarg=`echo $arg | sed 's/-pdt_c++=//'`
    if [ $myarg = CC -o $myarg = KCC -o $myarg = g++ -o $myarg = cxx -o $myarg = NCC -o $myarg = pgCC  -o $myarg = egcs -o $myarg = FCC -o $myarg = guidec++ -o $myarg = aCC -o $myarg = c++ ]
      then
        pdt_cxx_compiler=$myarg
      else
        testxlc=`echo $myarg | sed -e 's/xl//'`
        if [ "y$testxlc" = "y$myarg" ]
        then
          echo "WARNING: valid options for pdt_c++ are 'CC', 'KCC', 'g++', '*xlC*', 'cxx' , 'egcs', 'pgCC', 'FCC', 'guidec++', 'aCC' and 'c++'"
#       exit 1
        else
          pdt_cxx_compiler=$myarg
        fi
    fi
    shift
    ;;

  -fortran=*)
    myarg=`echo $arg | sed 's/-fortran=//'`
    if [ $myarg = gnu -o $myarg = sgi -o $myarg = ibm -o $myarg = ibm64 -o $myarg = hp -o $myarg = cray -o $myarg = pgi -o $myarg = absoft -o $myarg = fujitsu -o $myarg = sun -o $myarg = compaq -o $myarg = kai -o $myarg = hitachi -o $myarg = intel -o $myarg = nec -o $myarg = absoft -o $myarg = lahey -o $myarg = nagware -o $myarg = pathscale ] 
    then
      fortran_compiler=$myarg
    else
      echo "WARNING: valid options for fortran are 'gnu', 'sgi', 'ibm', 'ibm64', 'hp', 'cray', 'pgi', 'absoft', 'fujitsu', 'sun', 'compaq', 'kai', 'hitachi', 'intel', 'nec' , 'absoft', 'lahey', 'nagware', and 'pathscale' "
      exit 1
    fi
    shift
    ;;

  -gnu)
      c_compiler=gcc
      cxx_compiler=g++
    shift
    ;;

  -dec)
      c_compiler=cc
      cxx_compiler=g++
    shift
    ;;

  -ibm)
      c_compiler=cc
      cxx_compiler=xlC
    shift
    ;;

  -cfront)
      c_compiler=cc
      cxx_compiler=CC
    shift
    ;;

  -sgi)
      c_compiler=cc
      cxx_compiler=CC
    shift
    ;;

  -task)
      task=yes
    shift
    ;;

  -awe=*)
      awe=yes
      awedir=`echo $arg | sed -e 's/-awe=//'`
    shift
    ;;

  -tag=*)
      tag=yes
      tautag=`echo $arg | sed -e 's/-tag=//'`
    shift
    ;;

  -lwp)
      lwp=yes
    shift
    ;;

  -pthread=*)
      pthread=yes
      ptdir=`echo $arg | sed -e 's/-pthread=//'`
    shift
    ;;
 
  -pthread)
      pthread=yes
    shift
    ;;

  -COMPENSATE)
     compensate=yes
    shift
    ;;

  -muse)
      muse=yes
    shift
    ;;

  -muse_event)
      muse_event=yes
    shift
    ;;

  -muse_multiple)
      muse_multiple=yes
    shift
    ;;

  -nocomm)
      comm=no
    shift
    ;;

  -sproc)
      sproc=yes
    shift
    ;;

  -smarts)
      smarts=yes
    shift
    ;;

  -tulipthread=*)
      tulipthread=yes
      tulipdir=`echo $arg | sed -e 's/-tulipthread=//'`
      if [ ! -d $tulipdir ]
      then
        echo "Error: Cannot access TULIP directory $tulipdir"
        exit 1
      fi
    shift
    ;;

  -pcl=*)
      pcl=yes
      pcldir=`echo $arg | sed -e 's/-pcl=//'`
      if [ ! -d $pcldir ]
      then
        echo "Error: Cannot access PCL directory $pcldir"
        exit 1
      fi
    shift
    ;;

  -papi=*)
      papi=yes
      papidir=`echo $arg | sed -e 's/-papi=//'`
      if [ ! -d $papidir ]
      then
        echo "Error: Cannot access PAPI directory $papidir"
        exit 1
      fi
    shift
    ;;

  -opari=*)
      opari=yes
      oparidir=`echo $arg | sed -e 's/-opari=//'`
      if [ ! -d $oparidir ]
      then
        echo "Error: Cannot access OPARI directory $oparidir"
        exit 1
      fi
      openmp=yes
    shift
    ;;

  -opari_region)
      opari_region=yes
    shift
    ;;

  -opari_construct)
      opari_construct=yes
    shift
    ;;

  -epilog=*)
      epilog=yes
      trace=yes
      epilogdir=`echo $arg | sed -e 's/-epilog=//'`
      if [ ! -d $epilogdir ]
      then
        echo "Error: Cannot access EPILOG directory $epilogdir"
        exit 1
      fi
    shift
    ;;

  -pdt=*)
      pdt=yes
      pdtdir=`echo $arg | sed -e 's/-pdt=//'`
      if [ ! -d $pdtdir ]
      then
        echo "Error: Cannot access PDT directory $pdtdir"
        exit 1
      fi
    shift
    ;;

  -vtf=*)
      vtf=yes
      trace=yes
      vtfdir=`echo $arg | sed -e 's/-vtf=//'`
      if [ ! -d $vtfdir ]
      then
        echo "Error: Cannot access VTF3 directory $vtfdir"
        exit 1
      fi
    shift
    ;;

  -dyninst=*)
      dyninst=yes
      dyninstdir=`echo $arg | sed -e 's/-dyninst=//'`
      if [ ! -d $dyninstdir ]
      then
        echo "Error: Cannot access DyninstAPI directory $dyninstdir"
        exit 1
      fi
    shift
    ;;

  -openmp)
      openmp=yes
    shift
    ;;

  -jdk=*)
      java=yes
      jdkdir=`echo $arg | sed -e 's/-jdk=//'`
      if [ ! -d $jdkdir ]
      then
        echo "Error: Cannot access JDK directory $jdkdir"
        exit 1
      fi
    shift
    ;;

  -slog2=*)
      slog2=yes
      trace=yes
      slog2dir=`echo $arg | sed -e 's/-slog2=//'`
      if [ ! -d $slog2dir ]
      then
        echo "Error: Cannot access SLOG2 directory $slog2dir"
        exit 1
      fi
    shift
    ;;


  -pcxxopt=*)
    pcxxopt=`echo $arg | sed -e 's/-pcxxopt=//' -e 's/ /_/g'`
    shift
    ;;

  -useropt=*)
    orig_useropt=`echo $arg | sed -e 's/-useropt=//'`
    useropt=`echo $arg | sed -e 's/-useropt=//' -e 's/ /#/g'`
    shift
    ;;

  -mpi)
    mpi=yes
    shift
    ;;

  -mpiinc=*)
    mpiinc=`echo $arg | sed -e 's/-mpiinc=//' -e 's/ /#/g'`
    if [ ! -d $mpiinc ]
    then
      echo "Error: Cannot access MPI include directory $mpiinc"
      exit 1
    fi
    shift
    ;;

  -mpilib=*)
    mpilib=`echo $arg | sed -e 's/-mpilib=//' -e 's/ /#/g'`
    if [ ! -d $mpilib ]
    then
      echo "Error: Cannot access MPI lib directory $mpilib"
      exit 1
    fi
    shift
    ;;

  -mpilibrary=*)
    mpilibrary=`echo $arg | sed -e 's/-mpilibrary=//' -e 's/ /#/g'`
    shift
    ;;

  -shmem)
    shmem=yes
    shift
    ;;

  -shmeminc=*)
    shmeminc=`echo $arg | sed -e 's/-shmeminc=//' -e 's/ /#/g'`
    if [ ! -d $shmeminc ]
    then
      echo "Error: Cannot access SHMEM include directory $shmeminc"
      exit 1
    fi
    shmem=yes
    shift
    ;;

  -shmemlib=*)
    shmemlib=`echo $arg | sed -e 's/-shmemlib=//' -e 's/ /#/g'`
    if [ ! -d $shmemlib ]
    then
      echo "Error: Cannot access SHMEM lib directory $shmemlib"
      exit 1
    fi
    shmem=yes
    shift
    ;;

  -shmemlibrary=*)
    shmemlibrary=`echo $arg | sed -e 's/-shmemlibrary=//' -e 's/ /#/g'`
    shmem=yes
    shift
    ;;

  -pythoninc=*)
    pythoninc=`echo $arg | sed -e 's/-pythoninc=//' -e 's/ /#/g'`
    if [ ! -d $pythoninc ]
    then
      echo "Error: Cannot access Python include directory $pythoninc"
      exit 1
    fi
    python=yes
    shift
    ;;

  -pythonlib=*)
    pythonlib=`echo $arg | sed -e 's/-pythonlib=//' -e 's/ /#/g'`
    if [ ! -d $pythonlib ]
    then
      echo "Error: Cannot access Python lib directory $pythonlib"
      exit 1
    fi
    python=yes
    shift
    ;;

  -opt=*)
    pcxxopt=`echo $arg | sed -e 's/-opt=//' -e 's/ /_/g'`
    useropt="$pcxxopt"
    shift
    ;;

  -pcxx=*)
    use_pcxx=yes
    sage1dir=`echo $arg | sed -e 's/-pcxx=//' -e 's/ /_/g'`
    shift
    ;;

  -sage2=*)
    use_sage2=yes
    sage2dir=`echo $arg | sed -e 's/-sage2=//' -e 's/ /_/g'`
    shift
    ;;

  -hpcxx)
    use_hpcxx=yes
    shift
    ;;

  -hpcxx=*)
    use_hpcxx=yes
    sage2dir=`echo $arg | sed -e 's/-hpcxx=//' -e 's/ /_/g'`
    shift
    ;;

  -pstl=*)
    use_pstl=yes
    pstldir=`echo $arg | sed -e 's/-pstl=//' -e 's/ /_/g'`
    shift
    ;;

  -hpnx=*)
    use_hpnx=yes
    hpnxdir=`echo $arg | sed -e 's/-hpnx=//' -e 's/ /_/g'`
    shift
    ;;

  -tkfile=*)
    tcltkfile=`echo $arg | sed -e 's/-tkfile=//' -e 's/ /_/g'`
    shift
    ;;

  -ansic)
    use_ansic=yes
    shift
    ;;

  -PROFILE)
    profile=yes
    shift
    ;;

  -PROFILECOUNTERS)
    profile=yes
    profilecounters=yes
    shift
    ;;

  -MULTIPLECOUNTERS)
    multiplecounters=yes
    shift
    ;;

  -PROFILECALLS)
    profile=yes
    profilecalls=yes
    shift
    ;;

  -PROFILEPHASE)
    phase=yes
    shift
    ;;

  -PROFILECALLPATH)
    profile=yes
    callpath=yes
    shift
    ;;

  -DEPTHLIMIT)
    depthlimit=yes
    shift
    ;;

  -PROFILESTATS)
    profile=yes
    profilestats=yes
    shift
    ;;

  -PROFILEMEMORY)
    profile=yes
    profilememory=yes
    shift
    ;;

  -PROFILECALLSTACK)
    profile=yes
    profilecallstack=yes
    shift
    ;;

  -TRACE)
    trace=yes
    shift
    ;;

  -MONITOR)
    monitor=yes
    shift
    ;;

  -DEBUGPROF)
    debugprof=yes
    shift
    ;;

  -SGITIMERS)
    sgitimers=yes
    shift
    ;;

  -CRAYTIMERS)
    craytimers=yes
    shift
    ;;

  -LINUXTIMERS)
    linuxtimers=yes
    shift
    ;;

  -ALPHATIMERS)
    alphatimers=yes
    shift
    ;;

  -CPUTIME)
    cputime=yes
    shift
    ;;

  -PAPIWALLCLOCK)
    papiwallclock=yes
    shift
    ;;

  -PAPIVIRTUAL)
    papivirtual=yes
    shift
    ;;

  -INTELTFLOP)
    inteltflop=yes
    shift
    ;; 

  -noex)
    # NO exceptions to be used while building the lib.
    noex=yes
    shift
    ;;

  -setnode0)
    # When this option is invoked, TAU sets the default node no to 0 instead 
    # of using -1. So, profile.0.0.0 is created even if TAU_PROFILE_SET_NODE(0)
    # is not called in the application. Do not use with tracing
    setnode0=yes
    shift
    ;;

  -help)
    echo "TAU Configuration Utility "
    echo "***********************************************************************"
    echo "Usage: configure [OPTIONS]"
    echo "  where [OPTIONS] are:"
    echo "-c++=<compiler>  ............................ specify the C++ compiler."
    echo "         options [CC|KCC|g++|*xlC*|cxx|pgCC|FCC|guidec++|aCC|c++|ecpc|"
    echo "                                                          icpc|pathCC]."
    echo "-cc=<compiler> ................................ specify the C compiler."
    echo "                     options [cc|gcc|KCC|pgcc|guidec|*xlc*|ecc|pathcc]."
    echo "-pdt_c++=<compiler>  ............ specify a different PDT C++ compiler."
    echo "    options [CC|KCC|g++|*xlC*|cxx|pgCC|FCC|guidec++|aCC|c++|ecpc|icpc]."
    echo "-fortran=<compiler> ..................... specify the Fortran compiler."
    echo "   options    [gnu|sgi|ibm|ibm64|hp|cray|pgi|absoft|fujitsu|sun|compaq|"
    echo "                  kai|nec|hitachi|intel|absoft|lahey|nagware|pathscale]"
    echo "-useropt='<parameters>' ............... list of commandline parameters."
    echo "-prefix=<dir> ................ Specify a target installation directory."
    echo "-exec-prefix=<arch> .......... Specify a target architecture directory."
    echo "-arch=<architecture> ................... Specify a target architecture."
    echo "   options       [bgl|ibm64|ibm64linux|solaris2-64|sgin32|sgi64|sgio32]"
    echo "-pthread .................................. Use pthread thread package."
    echo "-sproc .................................. Use SGI sproc thread package."
    echo "-tulipthread=<dir> .......... Specify location of Tulip/Smarts package."
    echo "-smarts .................. Use SMARTS API for threads (use with above)."
    echo "-openmp ........................................... Use OpenMP threads."
    echo "-opari=<dir>... Specify location of Opari OpenMP tool (use with above)."
    echo "-opari_region ......... Report performance data for all OpenMP regions."
    echo "-opari_construct ... Report performance data for all OpenMP constructs."
    echo "-pcl=<dir> ..... Specify location of PCL (Performance Counter Library)."
    echo "-papi=<dir> ............... Specify location of PAPI (Performance API)."
    echo "-pdt=<dir> ........ Specify location of PDT (Program Database Toolkit)."
    echo "-jdk=<dir> ...... Specify location of JAVA 2 Development Kit (jdk1.2+)."
    echo "-dyninst=<dir> ................... Specify location of DynInst Package."
    echo "-vtf=<dir> ......... Specify location of VTF3 Trace Generation Package."
    echo "-mpi .......................... Specify use of TAU MPI wrapper library."
    echo "-mpiinc=<dir> ............. Specify location of MPI include dir and use"
    echo "                           the TAU MPI Profiling and Tracing Interface."
    echo "-mpilib=<dir> ............. Specify location of MPI library dir and use"
    echo "                           the TAU MPI Profiling and Tracing Interface."
    echo "-mpilibrary=<library> ................ Specify a different MPI library."
    echo "            e.g., -mpilibrary=-lmpi_r                                  "
    echo "-shmem ...................... Specify use of TAU SHMEM wrapper library."
    echo "-shmeminc=<dir> ......... Specify location of SHMEM include dir and use"
    echo "                         the TAU SHMEM Profiling and Tracing Interface."
    echo "-shmemlib=<dir> ......... Specify location of SHMEM library dir and use"
    echo "                           the TAU MPI Profiling and Tracing Interface."
    echo "-shmemlibrary=<library> ............ Specify a different SHMEM library."
    echo "            e.g., -shmemlibrary=-lsmac                                 "
    echo "-nocomm  ........ Disable tracking communication events in MPI library."
    echo "-epilog=<dir>  ............ Specify location of EPILOG Tracing package."
    echo "-pythoninc=<dir> ........ Specify location of Python include directory."
    echo "-pythonlib=<dir> ............ Specify location of Python lib directory."
    echo "-tag=<unique name> ........ Specify a tag to identify the installation."
    echo "-muse ................................. Specify the use of MAGNET/MUSE." 
    echo "-muse_event ............................Specify the use of MAGNET/MUSE."
    echo "                                w/ non-monotonically increasing values." 
    echo "-muse_multiple......................... Specify the use of MAGNET/MUSE." 
    echo "                                    w/ monotonically increasing values." 
    echo "-TRACE ..................................... Generate TAU event traces."
    echo "-PROFILE ............ Generate profiles (summary statistics) (default)."
    echo "-PROFILECALLPATH ......................... Generate call path profiles."
    echo "-PROFILEPHASE .......................... Generate phase based profiles."
    echo "-PROFILESTATS .................. Enable standard deviation calculation."
    echo "-DEPTHLIMIT ........... Disable instrumentation beyond a certain depth."
    echo "-PROFILEMEMORY .. Track heap memory utilization at each function entry."
    echo "-MULTIPLECOUNTERS ............ Use multiple hardware counters and time."
    echo "-COMPENSATE ........ Compensate for profiling measurement perturbation."
    echo "-SGITIMERS .......... Use fast nanosecond timers on SGI R10000 systems."
    echo "-CRAYTIMERS ............ Use fast nanosecond timers on Cray X1 systems."
    echo "-LINUXTIMERS ......... Use low overhead TSC Counter for wallclock time."
    echo "-CPUTIME .......... Use usertime+system time instead of wallclock time."
    echo "-PAPIWALLCLOCK ........ Use PAPI to access wallclock time. Needs -papi."
    echo "-PAPIVIRTUAL   .......... Use PAPI for virtual (user) time calculation."
    echo "-noex .................. Use no exceptions while compiling the library."
    echo "-help ...................................... display this help message."
    exit
    ;;

  -arch=*)
    tauarch=`echo $arg | sed -e 's/-arch=//' -e 's/ /_/g'`
    shift
    ;;

  -pdtcompdir=*)
    pdtcompdir=`echo $arg | sed -e 's/-pdtcompdir=//' -e 's/ /_/g'`
    shift
    ;;

  -prefix=*)
    tauprefix=`echo $arg | sed -e 's/-prefix=//' -e 's/ /_/g'`
    echo "tauprefix =  $tauprefix "
    fixmakeargs="$fixmakeargs tauprefix=$tauprefix"
    shift
    ;;

  -exec-prefix=*)
    execprefix=`echo $arg | sed -e 's/-exec-prefix=//' -e 's/ /_/g'`
    fixmakeargs="$fixmakeargs execprefix=$execprefix"
    shift
    ;;

  default)
    echo "Fixing Makefiles"
    ;;	
  '')
    #echo "NULL switch!"
    # Required for HP/Compaq Tru64 machines.
    ;;
  *)
    echo "ERROR: Command line switch \`$arg' not recognized" 1>&2
    exit 1
    ;;
  esac
done

# -- set up portable echo command
case "`echo 'x\c'`" in
'x\c')  echo="echo -n"  nnl= ;;     #BSD
x)      echo="echo"     nnl="\c";;  #SysV
*)      echo 'Cannot setup echo. What weird machine do you have?' 1>2&
        exit 1;;
esac

# lth@cs.uoregon.edu: don't mess with the compiler if it is 'default'.
# The user may define TAU_CCOM as an environment variable or let it be blank;
# if blank, it is defaulted in archfind.

if [ "$c_compiler" != "" -a "$c_compiler" != "default" ]; then
  TAU_CCOM="$c_compiler"          # for 'archfind'
  export TAU_CCOM
fi


echo "-------------------- TAU configure script ---------------"


tauroot=`pwd | sed -e 's,^/tmp_mnt/nfs,,' -e 's,^/tmp_mnt,,'`
echo \#define TAUROOT \"$tauroot\" > include/tauroot.h
if [ $tauprefix != unknown ]
then
  echo \#define TAUROOT \"$tauprefix\" > include/tauroot.h
fi

echo "  The TAU source code has just been configured to use the"
echo "  tau root directory $tauroot."
echo "  If you move the Tau distribution, you must either"
echo "    * set an environment variable TAUROOT containing the new"
echo "      location before running any TAU tools"
echo "  or"
echo "    * run configure again and recompile"
echo "-----------------------------------------------------------------"

fixmakeargs="$fixmakeargs tauroot=$tauroot"
# Try and figure out architecture
detectarch=unknown
detectarch=`cd utils; ./archfind` 
detectxdev=`cd utils; ./archfind -x` 
detectspec=`cd utils; ./archfind -s` 
if [ "x$detectarch" = "x" ] 
  then
    detectarch=unknown
fi


###############################################################
# if there are no arguments, GUESS at system configuration
if [ $tauarch = unknown -o $tauarch = none ]
  then 
    if [ $# = 1 ]
      then
	if [ $1 = default ]
	then 
	  machine=$1
	fi
      else
        echo Attempting to auto-configure system, determining architecture...
        machine=$detectarch
        if [ $machine = unknown ]
          then
            echo I could not determine the architecture of this host
            echo You must give me a hint.
	    echo Perhaps, the C compiler is not working.
            echo Please check the licenses. 
            exit 0
        fi
        echo I think this is a $machine...
      fi
  else
    machine=$tauarch
    if [ $detectarch != unknown -a $machine != unknown ]
      then
        detectxdev=$machine
        if [ $detectarch != $machine ]
           then
	     echo WARNING\!\! Auto-detect:$detectarch overridden with $machine
        fi
    fi
fi


######################################################################
# If the default gcc/g++ is not used, Modify the Makefiles...
# Choose the c++ and cc compiler

case $machine in
   tc2000 | ksr1 | c90 | cray | t3e | crayx1 | craysv1)
     if [ $cxx_compiler = default ]
       then
         cxx_compiler=CC
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=cc             
     fi
     ;;
   
   nec) 
     if [ $cxx_compiler = default ]
       then
         cxx_compiler=c++
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=cc             
     fi
     ;;

   apple) 
     if [ $cxx_compiler = default ]
       then
         cxx_compiler=c++
     fi

     # To fix the  make install  clash with INSTALL file in file systems 
     # that are case insensitive. Move INSTALL file to INSTALL.txt 
     if [ -f INSTALL ]
       then
	mv INSTALL INSTALL.txt
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=cc             
     fi
     ;;


   cygwin) 
     if [ $cxx_compiler = default ]
       then
         cxx_compiler=g++
     fi

     # To fix the  make install  clash with INSTALL file in file systems 
     # that are case insensitive. Move INSTALL file to INSTALL.txt 
     if [ -f INSTALL ]
       then
	mv INSTALL INSTALL.txt
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=gcc             
     fi
     ;;

   alpha)
     if [ $cxx_compiler = default ]
       then
      # If it has the HP/Compaq cxx compiler, use it
	 if [ -d /lib/cmplrs/cxx ]
           then
             cxx_compiler=cxx
           else
             cxx_compiler=g++
         fi
	 c_compiler=cc
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=gcc
     fi
     ;;
  
   rs6000 | ibm64)
     if [ $cxx_compiler = default ]
       then
         # If it has the IBM xlC compiler, use it
	 if [ -f /usr/bin/xlC -o -f /usr/vacpp/bin/xlC ]
           then
             cxx_compiler=xlC
             c_compiler=xlc
           else
             cxx_compiler=g++
         fi
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=gcc
     fi
     ;;
  
   bgl)
    if [ $cxx_compiler = default ]
    then
      cxx_compiler=blrts_xlC
      c_compiler=blrts_xlc
    fi
    ;;

   hitachi)
     if [ $cxx_compiler = default ]
       then
	 cxx_compiler=KCC
	 c_compiler=cc
       fi

    if [ $fortran_compiler = no ] 
      then 
        fixmakeargs="$fixmakeargs HITACHI_FORTRAN"
        fortran_compiler=yes
      fi
    ;;

   sgi4k | sgi8k | sgin32 | sgi64)
     if [ $cxx_compiler = default ]
       then
	# SGI has no 64 bit C++ compiler except "CC", so if we are an
	# R8K, we have to use "CC"
	if [ $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ]
	  then 
	    cxx_compiler=CC
            c_compiler=cc
	  else
            # We are an SGI R4K-based machine, use NCC if available
	    if [ -f /bin/NCC ]
              then
                cxx_compiler=NCC
                c_compiler=cc
              else
                cxx_compiler=g++
            fi
          fi
        fi
     if [ $c_compiler = default ]
       then
         c_compiler=gcc
     fi
     ;;
  
   *)
     if [ $cxx_compiler = default ]
       then
         cxx_compiler=g++
     fi

     if [ $c_compiler = default ]
       then
         c_compiler=gcc             
     fi
     ;;

esac


######################################################################
# For template instantiations in the library -ptused for CC compilers
if [ $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ] 
  then
  if [ $cxx_compiler = CC ]
    then
      fixmakeargs="$fixmakeargs SGICC"
      if [ $pdt = yes -a $pdt_cxx_compiler = default ]
        then
 	  fixmakeargs="$fixmakeargs PDTSGICC"
      fi
  fi
fi

if [ $machine = hitachi ]
  then
    fixmakeargs="$fixmakeargs HITACHI"
fi
   
if [ $machine = t3e -a $cxx_compiler = CC ] 
  then
    fixmakeargs="$fixmakeargs CRAYCC"
fi

if [ $machine = crayx1 -o $machine = craysv1 -a $cxx_compiler = CC ]
  then
    fixmakeargs="$fixmakeargs CRAYX1CC"
fi

######################################################################
# Set default Profiling Options in Makefiles
if [ $profile = no -a $trace = no  -a $machine != default ]
  then
    echo "-PROFILE and/or -TRACE should be specified. Choosing -PROFILE as the default"
    profile=yes 
fi
 
if [ $profile = yes ]
  then
    fixmakeargs="$fixmakeargs PROFILE"
fi

if [ $profilecalls = yes ]
  then
    fixmakeargs="$fixmakeargs PROFILECALLS"
fi

if [ $profilestats = yes ]
  then
    fixmakeargs="$fixmakeargs PROFILESTATS"
fi

if [ $profilememory = yes ]
  then
    fixmakeargs="$fixmakeargs PROFILEMEMORY"
    tauoptions="${tauoptions}-memory"
fi

if [ $tag = yes ]
then
  tauoptions="${tauoptions}-${tautag}"
fi
  
if [ $callpath = yes ]
  then
    fixmakeargs="$fixmakeargs PROFILECALLPATH"
    tauoptions="${tauoptions}-callpath"
fi

if [ $depthlimit = yes ]
  then
    fixmakeargs="$fixmakeargs DEPTHLIMIT"
    tauoptions="${tauoptions}-depthlimit"
fi

if [ $phase = yes ]
  then
    fixmakeargs="$fixmakeargs PROFILECALLPATH PROFILEPHASE"
    tauoptions="${tauoptions}-phase"
fi

if [ $setnode0 = yes -a $trace = no ]
  then
    fixmakeargs="$fixmakeargs SETNODE0"
    tauoptions="${tauoptions}-setnode"
fi

if [ $comm = no ]
  then
    fixmakeargs="$fixmakeargs NOCOMM"
    tauoptions="${tauoptions}-nocomm"
fi

if [ $profilecallstack = yes ]
  then
      fixmakeargs="$fixmakeargs CALLSTACK"
fi

if [ $trace = yes ]
  then
    fixmakeargs="$fixmakeargs TRACE"
fi

if [ $monitor = yes ]
  then
    fixmakeargs="$fixmakeargs MONITOR"
fi

if [ $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ] 
  then
  if [ $profilecounters = yes ]
    then
      fixmakeargs="$fixmakeargs SGICOUNTERS"
      tauoptions="${tauoptions}-counters"
  fi
fi

if [ $linuxtimers = yes ]
then
  fixmakeargs="$fixmakeargs LINUXTIMERS"
  tauoptions="${tauoptions}-linuxtimers"
fi

if [ $alphatimers = yes ]
then
  fixmakeargs="$fixmakeargs ALPHATIMERS"
  tauoptions="${tauoptions}-alphatimers"
fi

if [ $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ] 
  then
  if [ $profilecounters = no -a $sgitimers = yes ]
    then
      fixmakeargs="$fixmakeargs SGITIMERS"
      tauoptions="${tauoptions}-sgitimers"
  fi
fi

if [ $craytimers = yes ]
then
  fixmakeargs="$fixmakeargs CRAYTIMERS"
  tauoptions="${tauoptions}-craytimers"
fi

if [ $cputime = yes ]
  then
    fixmakeargs="$fixmakeargs CPUTIME"
fi

if [ $papiwallclock = yes ]
  then
    fixmakeargs="$fixmakeargs PAPIWALLCLOCK"
    tauoptions="${tauoptions}-papiwallclock"
fi

if [ $multiplecounters = yes ]
  then
    fixmakeargs="$fixmakeargs MULTIPLECOUNTERS"
    tauoptions="${tauoptions}-multiplecounters"
    if [ $profilecalls = yes -o $profilestats = yes -o $profilecounters = yes ]
    then
      echo "******** ERROR : -MULTIPLECOUNTERS option is incompatible with "
      echo "**************** -PROFILECOUNTERS, -PROFILECALLS, or -PROFILESTATS"
      echo "**************** Please reconfigure TAU without these."
      echo "******** EXITING .... "
      exit 1
    fi
fi

if [ $papivirtual = yes ]
  then
    fixmakeargs="$fixmakeargs PAPIVIRTUAL"
    tauoptions="${tauoptions}-papivirtual"
fi

if [ $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ] 
  then
  if [ $cxx_compiler = g++ ]
    then
      fixmakeargs="$fixmakeargs SGIGNU"
  fi
fi

if [ $machine = apple ]
  then
  if [ $cxx_compiler = g++ ]
    then
      fixmakeargs="$fixmakeargs APPLECXX"
  fi
  if [ $fortran_compiler = ibm -o $fortran_compiler = ibm64 ]
    then
      fixmakeargs="$fixmakeargs IBMXLFAPPLE"
      extradir=`which xlf90 | sed s/xlf90/../`
      fortran_compiler=yes
  fi
  # xlc++ doesn't like include/Memory. Move this directory
  if [ -d include/Memory ] 
  then
    mv include/Memory include/MemoryWrapper	
  fi
fi

if [ $machine = ppc64 -o $machine = bgl ]
then
  if [ $cxx_compiler = g++ ]
  then
    if [ $fortran_compiler = no ] 
    then
      extradir=`which xlf90 | sed s/xlf90/../`
      fixmakeargs="$fixmakeargs IBM_FORTRAN"
    fi
  fi
fi

if [ $machine = ibm64 -o $machine = ibm64linux ]
then
  if [ $cxx_compiler = g++ -o $cxx_compiler = powerpc64-linux-g++ ]
  then
    if [ $fortran_compiler = no ] 
    then
      extradir=`which xlf90 | sed s/xlf90/../`
      fixmakeargs="$fixmakeargs IBM64_FORTRAN"
    fi
  fi
fi

if [ $machine = t3e -a $cxx_compiler = KCC ]
  then
    fixmakeargs="$fixmakeargs CRAYKAI"
    if [ $fortran_compiler = no ] 
    then 
      fixmakeargs="$fixmakeargs CRAY_FORTRAN"
      fortran_compiler=yes
    fi
fi

if [ $machine = crayx1 -o $machine = craysv1 ]
  then 
    if [ $fortran_compiler = no ]
    then
      fixmakeargs="$fixmakeargs CRAY_X1_FORTRAN"
      fortran_compiler=yes
    fi
fi


if [ $debugprof = yes ]
  then
    fixmakeargs="$fixmakeargs DEBUGPROF"
fi

if [ $inteltflop = yes ]
  then
      fixmakeargs="$fixmakeargs INTELTFLOP"
fi 
    


######################################################################
# Set default C++ compiler in all Makefiles

case $cxx_compiler in
   CC)
      echo "Default C++ compiler will be CC"
      fixmakeargs="$fixmakeargs USE_CFRONT"
      ;;

   *g++)
      echo "Default C++ compiler will be " \
         `gcc -v 2>&1 | tail -1 | sed 's/gcc/g++/g'`
      # No fixmakeargs needed because it is the default
      ;;

   egcs)
      echo "Default C++ compiler will be " \
         `egcs -v 2>&1 | tail -1 | sed 's/gcc/egcs/g'`
      # No fixmakeargs needed because it is the default
      ;;

   cxx)
      echo "Default C++ compiler will be the HP Tru64 cxx C++ compiler"
      fixmakeargs="$fixmakeargs USE_DECCXX"
      if [ $fortran_compiler = no ]
      then 
        f90loaded=`which f90 | sed -e 's/f90/../g' | grep "^no"`
        if [ "x$f90loaded" = "x" ]
        then
    	  # f90 module has been loaded and which f90 returns a path	
          extradir="`which f90 | sed s/f90/../`"
	  echo "Found f90 in `which f90`"
        fi
        fixmakeargs="$fixmakeargs COMPAQ_FORTRAN"
        fortran_compiler=yes
      fi
      ;;

   *xl*)
      echo "Default C++ compiler will be IBMs xlC C++ compiler"
      fixmakeargs="$fixmakeargs USE_IBMXLC"
      if [ "$machine" = "apple" ] 
      then
        fixmakeargs="$fixmakeargs IBMXLCAPPLE"
	if [ $fortran_compiler = no ] 
        then
          fixmakeargs="$fixmakeargs IBMXLFAPPLE"
        fi
      fi
      ibmxlc=yes
      extradircxx=`which $cxx_compiler | sed s/$cxx_compiler/../`
      extradir=`which xlf90 | sed s/xlf90/../`
      if [ $fortran_compiler = no ] 
      then
	if [ "$machine" = "ibm64" -o "$machine" = "ibm64linux" ]
        then
          fixmakeargs="$fixmakeargs IBM64_FORTRAN"
	else
          fixmakeargs="$fixmakeargs IBM_FORTRAN"
	fi
        fortran_compiler=yes
      fi
      threadtest=`echo $cxx_compiler | sed -e 's/_r//'`
      if [ "y$threadtest" = "y$cxx_compiler" ]
      then
	echo "Not using the thread-safe version of the IBM compiler"
      else
	ibmxlc_r=yes
        fixmakeargs="$fixmakeargs THREADSAFE_COMPILERS"
	echo "Using thread-safe version of the IBM compiler"
        threadsafe=yes
      fi
      ;;

   NCC)
      echo "Default C++ compiler will be SGI's Delta C++ compiler"
      fixmakeargs="$fixmakeargs USE_SGINCC"
      ;;
   
   KCC)
      echo "Default C++ compiler will be KAI KCC C++ Compiler"
      kai=yes
      fixmakeargs="$fixmakeargs KAI"
      ;;

   pgCC)
      echo "Default C++ compiler will be PGI pgCC C++ Compiler"
      pgi=yes
      pgiflag=`pgCC -help | head -1 | grep 1.7 | wc -l`
	
      if [ $pgiflag = 1 ] 
      then
	echo  "Using PGI ver 1.7 Compiler"
        fixmakeargs="$fixmakeargs PGI PGI1.7"
      else
        fixmakeargs="$fixmakeargs PGI PGICC"
      fi

      if [ $fortran_compiler = no ]
      then 
        extradir=`which pgCC | sed s/pgCC/../`
        fixmakeargs="$fixmakeargs PGI_FORTRAN"
        fortran_compiler=yes
      fi
      ;;

   FCC)
      echo "Default C++ compiler will be Fujitsu C++ Compiler"	 
      fujitsu=yes
      fixmakeargs="$fixmakeargs FUJITSU"
      if [ $fortran_compiler = no ]
      then 
        extradir=`which FCC | sed s/FCC/../`
        fixmakeargs="$fixmakeargs FUJITSU_FORTRAN"
        fortran_compiler=yes
      fi
      ;;

   guidec++)
      echo "Default C++ compiler will be KAI KAP/Pro OpenMP guidec++ Compiler"
      kai=yes
      fixmakeargs="$fixmakeargs KAI GUIDE OPENMP"
      openmp=yes
      tauoptions="${tauoptions}-guide"
      if [ $fortran_compiler = no ]
      then
        fixmakeargs="$fixmakeargs KAI_FORTRAN"
        guidef90=yes
        fortran_compiler=yes
      fi
        
      ;;

   aCC)
      echo "Default C++ compiler will be HP aCC Compiler"
      fixmakeargs="$fixmakeargs ACC"
      tauoptions="${tauoptions}-acc"
      if [ $fortran_compiler = no ]
      then
        fixmakeargs="$fixmakeargs HP_FORTRAN"
        fortran_compiler=yes
      fi
        
      ;;
   c++)
        if [ $machine = nec ]
	then
          echo "Default C++ compiler will be NEC c++ compiler"
          fixmakeargs="$fixmakeargs USE_NECCXX"
          tauoptions="${tauoptions}-cxx"
          if [ $fortran_compiler = no ]
          then 
            extradir=`which f90 | sed s/f90/../`
            fixmakeargs="$fixmakeargs NEC_FORTRAN"
            fortran_compiler=yes
          fi
        else
          echo "Default C++ compiler will be Apple c++ compiler"
          fixmakeargs="$fixmakeargs APPLECXX"
          tauoptions="${tauoptions}-cxx"
        fi 

      ;;

   ecpc)
      echo "Default C++ compiler will be Intel ecpc C++ compiler"
      fixmakeargs="$fixmakeargs USE_INTELCXX"
      tauoptions="${tauoptions}-ecpc"
      intel=yes
      if [ $fortran_compiler = no ]
      then
        fixmakeargs="$fixmakeargs INTEL_FORTRAN"
        fortran_compiler=intel
      fi


      ;;
	
   icpc)
      echo "Default C++ compiler will be Intel icpc C++ compiler"
      fixmakeargs="$fixmakeargs USE_INTELCXX"
      tauoptions="${tauoptions}-icpc"
      intel=yes
      if [ $fortran_compiler = no ]
      then
        fixmakeargs="$fixmakeargs INTEL32_FORTRAN"
        fortran_compiler=intel
      fi

      ;;
   pathCC)
      echo "Default C++ compiler will be PathScale pathCC C++ compiler"
      fixmakeargs="$fixmakeargs USE_PATHCC"
      tauoptions="${tauoptions}-pathcc"
      pathscale=yes
      if [ $fortran_compiler = no ]
      then
        fixmakeargs="$fixmakeargs PATHSCALE_FORTRAN"
        fortran_compiler=pathscale
      fi

      ;;

   *)
      echo "ERROR Unknown C++ compiler"
      exit 1
      ;;

esac

######################################################################
# Set default F90 compiler in all Makefiles
case $fortran_compiler in
   gnu)
      echo "Default Fortran compiler will be GNU g77"
      fixmakeargs="$fixmakeargs GNU_FORTRAN"
      ;;

   sgi)
      echo "Default Fortran compiler will be SGI f90"
      fixmakeargs="$fixmakeargs SGI_FORTRAN"
      ;;

   ibm)
      echo "Default Fortran compiler will be IBM xlf90"
      extradir=`which xlf90 | sed s/xlf90/../`
      fixmakeargs="$fixmakeargs IBM_FORTRAN"
      ;;

   ibm64)
      echo "Default Fortran compiler will be IBM xlf90 (64 bits)"
      extradir=`which xlf90 | sed s/xlf90/../`
      fixmakeargs="$fixmakeargs IBM64_FORTRAN"
      ;;

   hp)
      echo "Default Fortran compiler will be HP f90"
      extradir=`which f90 | sed s/f90/../`
      fixmakeargs="$fixmakeargs HP_FORTRAN"
      ;;

   cray)
      echo "Default Fortran compiler will be Cray f90"
      if [ $machine = crayx1 -o $machine = craysv1 ] 
      then 
        fixmakeargs="$fixmakeargs CRAY_X1_FORTRAN"
      else
        fixmakeargs="$fixmakeargs CRAY_FORTRAN"
      fi
      ;;

   pgi)
      echo "Default Fortran compiler will be PGI pgf90"
      extradir=`which pgCC | sed s/pgCC/../`
      fixmakeargs="$fixmakeargs PGI_FORTRAN"
      ;;

   absoft)
      echo "Default Fortran compiler will be Absoft f90"
      extradir="`which f90 | sed s/f90/../`"
      fixmakeargs="$fixmakeargs ABSOFT_FORTRAN"
      ;;

   fujitsu)
      echo "Default Fortran compiler will be Fujitsu F90"
      extradir=`which FCC | sed s/FCC/../`
      fixmakeargs="$fixmakeargs FUJITSU_FORTRAN"
      ;;

   nec)
      echo "Default Fortran compiler will be NEC f90"
      extradir=`which f90 | sed s/f90/../`
      fixmakeargs="$fixmakeargs NEC_FORTRAN"
      ;;

   lahey)
      echo "Default Fortran compiler will be Leahy lf95"
      extradir=`which lf95 | sed s/lf95/../`
      fixmakeargs="$fixmakeargs LAHEY_FORTRAN"
      ;;

   nagware)
      echo "Default Fortran compiler will be Nagware f95"
      extradir=`which f95 | sed s@\/f95@\/..@`
      fixmakeargs="$fixmakeargs NAGWARE_FORTRAN"
      ;;

   pathscale)
      echo "Default Fortran compiler will be Pathscale pathf90"
      extradir=`which pathf90 | sed s@\/pathf90@\/..@`
      fixmakeargs="$fixmakeargs PATHSCALE_FORTRAN"
      ;;

   sun)
      echo "Default Fortran compiler will be SUN f90" 
      fixmakeargs="$fixmakeargs SUN_FORTRAN"
      ;;

   compaq)
      echo "Default Fortran compiler will be HP Tru64 f90"
      f90loaded=`which f90 | sed -e 's/f90/../g' | grep "^no"`
      if [ "x$f90loaded" = "x" ]
      then
        # f90 module has been loaded and which f90 returns a path
        extradir="`which f90 | sed s/f90/../`"
        echo "Found f90 in `which f90`"
      fi
      fixmakeargs="$fixmakeargs COMPAQ_FORTRAN"
      ;;

   kai)
      echo "Default Fortran compiler will be KAI guidef90"
      fixmakeargs="$fixmakeargs KAI_FORTRAN"
      guidef90=yes
      ;;

   intel)
      if [ $cxx_compiler = ecpc ]
      then
        echo "Default Fortran compiler will be Intel efc"
        fixmakeargs="$fixmakeargs INTEL_FORTRAN"
      else
        echo "Default Fortran compiler will be Intel ifc"
        fixmakeargs="$fixmakeargs INTEL32_FORTRAN"
      fi
      ;;
   no)
      ;;

   *)
      ;;

esac


######################################################################
# Set MPI options. First set the include dir if it is not specified
if [ $mpi = yes -a $machine = ibm64 ]
then
  ibmxlc_r=yes
  echo "Enabling threaded MPI libraries for IBM64"
  if [ $threadsafe = no ]
  then
    fixmakeargs="$fixmakeargs THREADSAFE_COMPILERS"
    threadsafe=yes
  fi
fi

if [ $mpi = yes -a "x$mpiinc" = "x" ] 
then
  case $machine in 
  rs6000|ibm64)
	mpiinc=/usr/lpp/ppe.poe/include
	mpiincf90dir='-I/usr/lpp/ppe.poe/include/thread'
	if [ $machine = ibm64 ]
	then
	  mpiincf90dir='-I/usr/lpp/ppe.poe/include/thread64'
	fi 

        if [ $ibmxlc_r = yes ] 
        then
          additional_mpiincs='-I/usr/lpp/ssp/css/include'
        fi
	additional_mpiincs="$additional_mpiincs $mpiincf90dir"
        ;;
  bgl)
	mpiinc=/bgl/BlueLight/ppcfloor/bglsys/include
        ;;
  i386_linux) 
	mpiinc=/usr/local/packages/mpich/include
	;;
  t3e|crayx1|craysv1)
	mpiinc=/opt/ctl/mpt/mpt/include
	;;
  solaris2*)
	mpiinc=/opt/SUNWhpc/include
	;;
  *)
	;;
  esac
fi

# Add threaded include dir to the MPI include dir for IBM 
if [ "x$mpiinc" != "x" ] 
then
  case $machine in 
    rs6000)
      if [ -d /usr/lpp/ppe.poe/include/thread ] 
      then 
        mpiincf90dir='-I/usr/lpp/ppe.poe/include/thread'
      fi
      if [ $ibmxlc_r = yes ] 
      then
        additional_mpiincs='-I/usr/lpp/ssp/css/include'
      fi
      additional_mpiincs="$additional_mpiincs $mpiincf90dir"
      ;;
    ibm64)
      if [ -d /usr/lpp/ppe.poe/include/thread64 ] 
      then 
        mpiincf90dir='-I/usr/lpp/ppe.poe/include/thread64'
      fi
      if [ $ibmxlc_r = yes ] 
      then
        additional_mpiincs='-I/usr/lpp/ssp/css/include'
      fi
      additional_mpiincs="$additional_mpiincs $mpiincf90dir"
      ;;
    *)
      ;;
  esac
fi




# Next, check the properties of the MPI implementation.
if [ "x$mpiinc" != "x" -o "x$mpilib" != "x" -o $mpi = yes ]
then
  #echo "MPI is specified"
  mpi=yes
  fixmakeargs="$fixmakeargs MPI"
  tauoptions="${tauoptions}-mpi"

  mpicompiler=$cxx_compiler
  msuf=C

  if [ $machine = t3e ]
  then
    mpicompiler=$c_compiler
    msuf=c
  fi
  cat <<EOF > mpi_thread_test.$msuf
  #include <mpi.h>

  int main(int argc, char **argv)
  {
    int ret, req, provided;
    ret = PMPI_Init_thread(&argc, &argv, req, &provided);
    return ret;
  }
EOF
  if [ "x$mpiinc" != "x" ]
  then
    # echo "mpiinc is specified"
    mpi_include=-I$mpiinc
  fi
     
  cat <<EOF > mpi2.$msuf
  #include <mpi.h>

  int foo(MPI_Win win)
  {
    int ret;
    ret = MPI_Win_fence(MPI_MODE_NOPRECEDE, win);
    return ret;
  }
EOF

  cat <<EOF > mpi2iorequest.$msuf
  #include <mpi.h>

  int foo (MPI_File fh, void *buf, int count,
                          MPI_Datatype datatype, MPIO_Request *request)
  {
    return MPI_File_iread_shared (fh, buf, count, datatype, request);

  }
EOF

cat <<EOF > mpi2attr.$msuf
  #include <mpi.h>

  int foo(MPI_Win_copy_attr_function *f1, MPI_Type_copy_attr_function *f2, 
        MPI_Comm_copy_attr_function *f3)
  {
    return 0;
  }
EOF

  cat <<EOF > mpi2typeex.$msuf
  #include <mpi.h>

  int f1( void * sendbuf, void * recvbuf, int count, MPI_Datatype datatype
  , MPI_Op op, MPI_Comm comm)
  {
    return MPI_Exscan( sendbuf, recvbuf, count, datatype, op, comm) ;
  }

  int f2( MPI_Datatype type, MPI_Datatype * newtype)
  {
    return MPI_Type_dup( type, newtype) ;
  }
EOF

  cat <<EOF > mpi2add.$msuf
  #include <mpi.h>

  int f1( int * errorclass)
  {
    return MPI_Add_error_class( errorclass) ;
  }

  int f2( char * datarep, int incount, MPI_Datatype datatype, MPI_Aint * size)
  {
    return MPI_Pack_external_size( datarep, incount, datatype, size) ;
  }

EOF

  cat <<EOF > mpi2grequest.$msuf
  #include <mpi.h>

  int foo(MPI_Grequest_query_function *grequest_query_fn,
              MPI_Grequest_free_function *grequest_free_fn,
              MPI_Grequest_cancel_function *grequest_cancel_fn,
              void *extra_state, MPI_Request *request) 
  {
    return MPI_Grequest_start(grequest_query_fn,
              grequest_free_fn,
              grequest_cancel_fn,
              extra_state, request);

  }

  int bar(MPI_Request request)
  {
    return MPI_Grequest_complete(request);
  }

EOF
  cat <<EOF > mpi2datarep.$msuf
  #include <mpi.h>

  int foo( char * datarep, MPI_Datarep_conversion_function * read_conversion_fn, MPI_Datarep_conversion_function * write_conversion_fn, MPI_Datarep_extent_function * dtype_file_extent_fn, void * extra_state)
  {
    return MPI_Register_datarep( datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state);

  }

EOF

  cat <<EOF > mpi2errhandler.$msuf
  #include <mpi.h>

  int foo (MPI_Comm_errhandler_fn *a, MPI_Errhandler *b)
  {
    return MPI_Comm_create_errhandler(a,b);
 
  }
  int bar (MPI_File_errhandler_fn * function, MPI_Errhandler * errhandler)
  {
    return MPI_File_create_errhandler(function, errhandler);
  }
EOF

  cat <<EOF > mpi2hpconst.$msuf
  #include <mpi.h>
  /* HP MPI uses const char * instead of char * in the 
     prototypes of the following routines */
  int foo(MPI_Info Info, const char *key, const char *value)
  { 
    return PMPI_Info_set(Info, key, value);
  }
  int f1(MPI_Info a, const char * b, int c, char * d, int *e) 
  {
    return PMPI_Info_get(a,b,c,d,e);
  }
  int f2(MPI_Info a, const char *b)
  {
    return PMPI_Info_delete(a,b);
  }
  int MPI_Info_get_valuelen(MPI_Info a, const char * b, int * c, int * d)
  { /* above decl triggers an error on T3E */
    return PMPI_Info_get_valuelen(a,b,c,d);
  }

EOF

cat << EOF > mpistatus.$msuf

  #include <mpi.h>
  #include <memory.h>
  int foo(MPI_Fint *status)
  {
    MPI_Status s;
    return MPI_Status_f2c(status, &s);
  }
EOF
  

  if [ $machine = sgi64 -a $cxx_compiler = CC ]
  then
    orig_useropt="$orig_useropt -64"
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi_thread_test.$msuf  1> /dev/null 2>&1
  then
    echo "Thread-safe MPI interface is defined... "
    fixmakeargs="$fixmakeargs MPI_THREADED"
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2.$msuf  1> /dev/null 2>&1
  then
    echo "MPI-2 Interface is defined..."
    fixmakeargs="$fixmakeargs MPI2"
    mpi2=yes
  fi
  if $mpicompiler $orig_useropt $mpi_include -c mpi2grequest.$msuf  1> /dev/null 2>&1
  then
    if [ $mpi2 = yes ]  
    then 
      echo "MPI-2 Grequest Interface is defined..."
      fixmakeargs="$fixmakeargs MPIGREQUEST"
    fi
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2iorequest.$msuf  1> /dev/null 2>&1
  then
    if [ $mpi2 = yes ]  
    then 
      echo "MPI-2 MPIO_Request Interface is defined..."
      fixmakeargs="$fixmakeargs MPIOREQUEST"
      mpiio=yes
    fi
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2datarep.$msuf  1> /dev/null 2>&1
  then
    if [ $mpi2 = yes ]  
    then 
      echo "MPI-2 MPI_Datarep_conversion_function Interface is defined..."
      fixmakeargs="$fixmakeargs MPIDATAREP"
    fi
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2errhandler.$msuf  1> /dev/null 2>&1
  then
    if [ $mpi2 = yes ]  
    then 
      echo "MPI-2 Comm_create_errhandler Interface is defined..."
      fixmakeargs="$fixmakeargs MPIERRHANDLER"
    fi
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2hpconst.$msuf  1> /dev/null 2>&1
  then
    if [ $mpi2 = yes ]  
    then 
      echo "MPI-2 MPI_Info_set takes const char * instead of char * args"
      fixmakeargs="$fixmakeargs MPICONSTCHAR"
    fi
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2attr.$msuf  1> /dev/null 2>&1
  then
    echo "MPI-2 MPI*attr_functions are defined..."
    fixmakeargs="$fixmakeargs MPIATTR"
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2typeex.$msuf  1> /dev/null 2>&1
  then
    echo "MPI-2 MPI_Type_dup and MPI_Exscan are defined..."
    fixmakeargs="$fixmakeargs MPITYPEEX"
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpi2add.$msuf  1> /dev/null 2>&1
  then
    echo "MPI-2 MPI_Add_error* functions are defined..."
    fixmakeargs="$fixmakeargs MPIADDERROR"
  fi

  if $mpicompiler $orig_useropt $mpi_include -c mpistatus.$msuf  1> /dev/null 2>&1
  then
    echo "MPI_Status f2c/c2f found..."
  else
    echo "MPI_Status c2f/f2c functions are needed"
    fixmakeargs="$fixmakeargs MPINEEDSTATUSCONV"
  fi

  /bin/rm -rf mpi_thread_test.$msuf mpi_thread_test.o mpi2.$msuf mpi2.o mpi2iorequest.o mpi2iorequest.$msuf mpi2grequest.o mpi2grequest.$msuf mpi2datarep.$msuf mpi2datarep.o mpi2errhandler.o mpi2errhandler.$msuf mpi2hpconst.o mpi2hpconst.$msuf mpi2attr.o mpi2attr.$msuf mpi2typeex.o mpi2typeex.$msuf mpi2add.o mpi2add.$msuf mpistatus.o mpistatus.$msuf
else
  fixmakeargs="$fixmakeargs mpiincargs=$mpiincargs mpilibargs=$mpilibargs mpiflibargs=$mpiflibargs mpilib=$mpilib"
fi

  

if [ "x$mpiinc" != "x" ]
then 
  if [ -d $mpiinc ]
  then
    #echo "Include dir found. adding -I$mpiinc to INC"
    mpiincargs="$mpiincargs -I$mpiinc $additional_mpiincs"
    mpiincargs=`echo $mpiincargs | sed  -e 's/ /#/g'`
    fixmakeargs="$fixmakeargs mpiincargs=$mpiincargs"
  fi
fi
  
if [ $mpi = yes -a "x$mpilib" = "x" ]
then
  case $machine in 
  rs6000|ibm64) 
	mpilib=/usr/lpp/ppe.poe/lib
        if [ $ibmxlc_r = yes ] 
        then
          additional_mpilibs='-L/usr/lpp/ppe.poe/lib/threads -L/usr/lpp/ssp/css/lib -llapi_r'
        fi
	;;
  bgl)
        mpilib=/bgl/BlueLight/ppcfloor/bglsys/lib
	additional_mpilibs='-lmsglayer.rts -ldevices.rts -lrts.rts -ldevices.rts'
        ;;
  i386_linux) 
	mpilib=/usr/local/packages/mpich
   	;;
  sgin32 | sgi8k) 
	mpilib=/usr/lib32
 	;;
  sgi64) 
	mpilib=/usr/lib64
	;;
  sgio32) 
	mpilib=/usr/lib
	;;
  t3e|crayx1|craysv1)  
	mpilib=/opt/ctl/mpt/mpt/lib/
	;;
  alpha)  
	mpilib=/usr/lib 
    	;;
  solaris2*)
	mpilib=/opt/SUNWhpc/lib
	;;
  *)    
	mpilib=/usr/lib 
        ;;	
  esac
fi
  

if [ $tauprefix != unknown ]
  then
    tautoplevel=$tauprefix
  else
    tautoplevel=$tauroot
fi


if [ $mpi = yes ]
then
  wrapperlib="-L$tautoplevel/$machine/lib -lTauMpi\$(TAU_OPTIONS)"
  if [ $epilog = yes -a $mpi = yes ]
  then
    if [ -f $epilogdir/lib/libelg.mpi.a ] 
    then
      epiloglibdir=lib
    else
      epiloglibdir=src
    fi
    wrapperlib="-L$epilogdir/$epiloglibdir -lelg.mpi"
    if [ $openmp = yes ] 
    then
      wrapperlib="-L$epilogdir/$epiloglibdir -lelg.ompi"
    fi
  fi 
     
  mpilibargs=$wrapperlib
  if [ -d $mpilib ]
  then
    #echo "Lib dir found. adding -L$mpilib to LIB"
    mpilibargs="$mpilibargs -L$mpilib"
    if [ -f $mpilib/libfmpi.a -o -f $mpilib/libfmpi.so ]
    then
      #echo "Fortran fmpi.* found"
      mpiflibargs="-L$mpilib -lfmpi $wrapperlib"
    else
      if [ $epilog = yes -a -f $epilogdir/lib/libfmpi.a -o -f $epilogdir/src/libfmpi.a ] 
      then
        mpiflibargs="$wrapperlib -lfmpi"
      fi 
      if [ -f $mpilib/libfmpich.a -o -f $mpilib/libfmpich.so ]
      then
        #echo "Fortran fmpich.* found"
        mpiflibargs="-L$mpilib -lfmpich $wrapperlib"
      else 
        #echo "No Fortran interface found"
        mpiflibargs="$mpiflibargs $wrapperlib -L$mpilib"
      fi
    fi
  
    #echo "mpilibargs = $mpilibargs"
    # Cases
    if [ -r $mpilib/libmpi.a -o -r $mpilib/libmpi.so ]
    then
      #echo "libmpi.* found!!"
      if [ $mpilibrary = no ]
      then 
	mpilibrary=-lmpi
	if [ -r $mpilib/libmpi++.so ]
	then
	  mpilibrary='-lmpi -lmpi++'
	# SGI MPT
	fi

        # See if threaded MPI should be used on AIX
        if [ $ibmxlc_r = yes -a -r $mpilib/libmpi_r.a ]
        then 
          mpilibrary="-lmpi_r $additional_mpilibs"
	 # echo "mpilibrary=$mpilibrary"
        fi
      fi
      if [ -r $mpilib/libpmpi.a -o -r $mpilib/libpmpi.so ] 
      then 
        #echo "libpmpi.* found "
        mpilibargs="$mpilibargs -lpmpi $mpilibrary"
        mpiflibargs="$mpiflibargs -lpmpi $mpilibrary"
      else
        #echo "libpmpi.* not found -lmpi probably contains PMPI routines"
        mpilibargs="$mpilibargs $mpilibrary" 
        mpiflibargs="$mpiflibargs $mpilibrary" 
      fi
    else
      #echo "libmpi.* not found!! Checking for mpich.*..."
      if [ -r $mpilib/libmpich.*a -o -r $mpilib/libpmpich.so ]
      then 
        #echo "MPICH found "
        if [ $mpilibrary = no ]
        then 
	  if [ -r $mpilib/libmpich.rts.a ]
	  then
	  # For BG/L 
	    mpilibrary="-lmpich.rts $additional_mpilibs"
          else
  	    mpilibrary=-lmpich
          fi
        fi
      
        if [ -r $mpilib/libpmpich.a -o -r $mpilib/libpmpich.so ] 
        then 
          #echo "pmpich found"
          mpilibargs="$mpilibargs -lpmpich $mpilibrary"
          mpiflibargs="$mpiflibargs -lpmpich $mpilibrary"
        else
          #echo "pmpich not found"
          mpilibargs="$mpilibargs $mpilibrary"
          mpiflibargs="$mpiflibargs $mpilibrary"
        fi
      fi
    fi
    # libmpi.* found. But libpmpi* not found. 
    # both found.
    # libmpi.* not found - look for libmpich.*
    # For fortran libfmpich.* look for libpmpi

    # Check for libmpio.a
    if [ -r $mpilib/libmpio.a ]
    then
      mpilibargs="$mpilibargs -lmpio"
      mpiflibargs="$mpiflibargs -lmpio"
    fi

    # Special check for LAM MPI
    if [ -r $mpilib/liblam.a ]
    then
      echo "This looks like a LAM MPI installation. Adding -llam to link command line"
      mpilibargs="$mpilibargs -llam"
      mpiflibargs="$mpiflibargs -llam"
      if [ -f /usr/lib/libutil.a ] 
      then
# This is a Linux box, add -lutil to the mpi libraries
        echo "Adding -lutil to link command line for LAM MPI"
        mpilibargs="$mpilibargs -lutil"
        mpiflibargs="$mpiflibargs -lutil"
      fi
    fi 
    # Special check for Intel MPI
    if [ -r $mpilib/libmpiif.a ]
    then
      echo "This looks like an Intel MPI installation."
      mpilibargs="$mpilibargs -lmpiif -ldl"
      mpiflibargs="$mpiflibargs -lmpiif -ldl"
    fi
    # Special check for HPMPI
    if [ -r $mpilib/libmpi_hmp.a ]
    then
      echo "This looks like an HP/MPI installation."
      mpilibargs="$mpilibargs -ldl"
      mpiflibargs="$mpiflibargs -ldl"
    fi
    # Special check for ChaMPIon/Pro 
    if [ -r $mpilib/libcmpi.a ]
    then
      echo "This looks like a ChaMPIon/Pro installation."
      mpiextraargs=`cmpicc -v -echo | cut -c8- `
      mpilibargs="$mpilibargs $mpiextraargs"
      mpiflibargs="$mpiflibargs $mpiextraargs -lcmpi_fort"
    fi
    # Special check for VMI [NCSA] MPICH
    if [ -r $mpilib/libvmi.a ]
    then
      echo "This looks like a VMI MPICH installation. Adding -lvmi -lpthread -ldl to link command line"
      mpilibargs="$mpilibargs -lvmi -lpthread -ldl"
      mpiflibargs="$mpiflibargs -lvmi -lpthread -ldl"
    fi
      
    mpilibargs=`echo $mpilibargs | sed  -e 's/ /#/g'`
    mpiflibargs=`echo $mpiflibargs | sed  -e 's/ /#/g'`
    #echo "mpiincargs= $mpiincargs"
    #echo "mpilibargs= $mpilibargs"
    #echo "mpiflibargs= $mpiflibargs"
    fixmakeargs="$fixmakeargs mpilibargs=$mpilibargs mpiflibargs=$mpiflibargs mpilib=$mpilib"
    
    # Check to see if the MPI library contains a _r 
    mpithreadtest=`echo $mpilibrary | sed -e 's/_r//'`
    if [ "y$mpithreadtest" = "y$mpilibrary" ] 
    then
      echo "NOTE: MPI library does not have a threaded _r suffix "
    else
      echo "NOTE: MPI library has a threaded _r suffix "
      fixmakeargs="$fixmakeargs MPI_R_SUFFIX"
    fi # mpi _r check

  fi # If -d mpilib
fi # if mpilib is specified

######################################################################
# Set default CC compiler in all Makefiles

if [ "$mpi" = "yes" -a "$ibmxlc_r" = "no" -a "$ibmxlc" = "yes" -a "$machine" = "ibm64" ]
then
  echo "WARNING: PLEASE use xlC_r instead of xlC with MPI in 64 bit mode!! Reconfigure."
  echo "----------------------------------------------------------------"
fi

# Now check for SHMEM options
if [ $shmem = yes ] 
then
  if [ "x$shmeminc" != "x" ]
  then 
    if [ -d $shmeminc ]
    then
    #echo "Include dir found. adding -I$mpiinc to INC"
      shmemincargs="-I$shmeminc"
    fi
  fi
  if [ $shmemlibrary = no ]
  then 
    shmemlibrary=-lsma
  fi
  if [ "x$shmemlib" != "x" ]
  then 
    if [ -d $shmemlib ]
    then
    #echo "Lib dir found. adding -L$shmemlib to LIB"
      shmemlibargs="$shmemlibargs -L$shmemlib"
    fi
  fi

  shmemlibargs="$shmemlibargs $shmemlibrary"
  shmemlibargs=`echo $shmemlibargs | sed  -e 's/ /#/g'`
  fixmakeargs="$fixmakeargs SHMEM"
  tauoptions="${tauoptions}-shmem"
  fixmakeargs="$fixmakeargs shmemlibargs=$shmemlibargs shmemincargs=$shmemincargs"
fi

gcclibdir=unknown
if [ $c_compiler != gcc ]
  then
    echo Default C compiler will be $c_compiler
    fixmakeargs="$fixmakeargs USE_CC"
  else
    echo "Default C compiler will be " `gcc -v 2>&1 | tail -1`

# I must set the gcclibdir in the Makefiles if we combine gcc, cc, and CC 
    gcclibdir=`gcc -v 2>&1 | awk '{print $4;}' | \
       awk -F/ '{for (i=2; i<NF; i++) printf("/%s",$i); printf("\n"); }'`
#    echo $gcclibdir
fi

######################################################################
# Set default compiler options

if [ $use_pcxx = yes ]
then
  opt=`echo $pcxxopt | sed -e 's/_/ /g' -e 's/^$/(none)/'`
  echo "Default compiler options for pC++ programs are $opt"
  opt=`echo $useropt | sed -e 's/_/ /g' -e 's/^$/(none)/'`
  echo "Default compiler options for pC++ user programs are $opt"

  fixmakeargs="pcxxopt=$pcxxopt useropt=$useropt $fixmakeargs"
fi

fixmakeargs="c_compiler=$c_compiler cxx_compiler=$cxx_compiler useropt=$useropt extradir=$extradir extradircxx=$extradircxx $fixmakeargs"

######################################################################
# discover the paths for standard system include directories

if [ $cxx_compiler = pgCC -o $cxx_compiler = g++ -o $cxx_compiler = powerpc64-linux-g++ -o $cxx_compiler = icpc -o $cxx_compiler = pathCC ] 
then
cat << EOF > get_stdinc.C
#include <stddef.h>
#include <iostream>
EOF
else
cat << EOF > get_stdinc.C
#include <stddef.h>
#include <iostream.h>
EOF
fi

cat << EOF > find_stdinc.awk
BEGIN {cinc=""; cppinc="";}
/^#[0123456789]+ ".+\/stddef.h"/ {cinc = substr(\$2, 2, length(\$2)-11);}
/^#line [0123456789]+ ".+\/stddef.h"/ {cinc = substr(\$3, 2, length(\$3)-11);}
/^# [0123456789]+ ".+\/stddef.h"/ {cinc = substr(\$3, 2, length(\$3)-11);}
/^#[0123456789]+ ".+\/iostream.h"/ {cppinc = substr(\$2, 2, length(\$2)-13);}
/^#line [0123456789]+ ".+\/iostream.h"/ {cppinc = substr(\$3, 2, length(\$3)-13);}
/^# [0123456789]+ ".+\/iostream.h"/ {cppinc = substr(\$3, 2, length(\$3)-13);}
END {printf("-I%s -I%s\n", cinc, cppinc);}
EOF

if [ $machine = hitachi ]
then
  stdinc="-I/usr/include"
else
  stdinc=`$cxx_compiler  -E get_stdinc.C | awk -f find_stdinc.awk`
fi  

rm -f get_stdinc.C find_stdinc.awk

######################################################################
cat <<EOF > get_typeinfo1.C
#include <typeinfo> 
using std::type_info;
#ifdef __GNUC__
#include <cxxabi.h>
using namespace std;
#endif /* GNUC */

EOF

if $cxx_compiler $orig_useropt -c get_typeinfo1.C 1> /dev/null 2>&1 
then 
  echo "C++ compiler supports Std Runtime Type Information (default)"
  if [ $cxx_compiler = g++ -o $cxx_compiler = c++ -o $cxx_compiler = powerpc64-linux-g++ ] 
  then 
    echo "Supporting GNU RTTI options"
  fi
else
cat <<EOF > get_typeinfo2.C
#include <typeinfo.h>
EOF
  if $cxx_compiler $orig_useropt -c get_typeinfo2.C 1> /dev/null 2>&1 
  then
    echo "C++ compiler supports RTTI"
    fixmakeargs="$fixmakeargs RTTI"
  else
    echo "C++ compiler doesn't support Runtime Type Information"
    fixmakeargs="$fixmakeargs NORTTI"
  fi 
fi
rm -f get_typeinfo1.C get_typeinfo2.C get_typeinfo*.o *.ti *.ii

######################################################################
# Save C++ compiler, C compiler, and USEROPT for build

echo "$machine: cxx         = $cxx_compiler" >> ./build/Config.info
echo "$machine: cc          = $c_compiler" >> ./build/Config.info
opt=`echo $useropt | sed -e 's/_/ /g'`
echo "$machine: useropt     = $opt" >> ./build/Config.info
echo "$machine: stdincludes = $stdinc" >> ./build/Config.info 
echo "" >> ./build/Config.info

######################################################################
## STATIC ANALYSIS: Ductape/Program Database Toolkit/IL Analyser
    
# NOW PDT configuration handled in PDT
######################################################################


######################################################################
# test whether C++ compiler supports AT&T task library

echo "#include <task.h>" > /tmp/tau$$.C
echo "class IamReallyATTtask : public object {};" >> /tmp/tau$$.C

if $cxx_compiler -c /tmp/tau$$.C 1> /dev/null 2>&1
then
#  echo "AT&T task library found; using it"
  task=yes
fi
rm -f /tmp/tau$$.C tau$$.o


######################################################################
# test whether C++ compiler supports Std C++ Library (KAI KCC compiler) 
echo "Testing for Standard C++ Library support for string class"
cat <<EOF > /tmp/tau$$.C
#include <string>
#include <vector>
#include <list>
#include <map>
using std::string;
using std::vector;
using std::pair;
using std::list;
using std::map;
void foo(void) { string s1; return; }
EOF

if $cxx_compiler -c /tmp/tau$$.C 1> /dev/null 2>&1
then 
  echo "Found support for Standard C++ Library string"
  echo "NOTE: Compiling Profiling Library and Applications with -DTAU_STDCXXLIB"
  echo "***********************************************************************"
  stdcxxlib=yes
else
  echo "Did not find <string> Standard C++ Library header file. Using <bstring.h> "
fi 
rm -f /tmp/tau$$.C tau$$.o


######################################################################
# test whether C++ compiler supports SUN LWP thread library

if [ -f /usr/include/lwp/lwp.h ]
then
  echo "SUN LWP thread library found; using it"
  lwp=yes
fi


######################################################################
# Set some more Profiling options

if [ $stdcxxlib = yes ]
  then
    fixmakeargs="$fixmakeargs STDCXXLIB"
fi    


######################################################################
if [ $machine = x86_64 -a ! -f /usr/lib/libc.a ] 
then
  #echo "This looks like a CATAMOUNT Cray RS system..."
  fixmakeargs="$fixmakeargs CATAMOUNT"
fi

######################################################################
if [ $cxx_compiler = g++ -o $cxx_compiler = egcs -o $cxx_compiler = powerpc64-linux-g++ ]   
  then
    fixmakeargs="$fixmakeargs GNU"
    if [ $machine = ibm64 -o $machine = rs6000 -o $machine = ppc64 -o $machine = bgl -o $machine = ibm64linux ]
    then
      tauoptions="${tauoptions}-gnu"
    fi
    taugcclibdir=`gcc -print-libgcc-file-name | sed -e 's,[^/]*$,,'`
    echo "Using GNU lib dir as $taugcclibdir"
    fixmakeargs="$fixmakeargs taugcclibdir=$taugcclibdir" 
fi
######################################################################
# TEST FOR ALL MACHINE TYPES
case $machine in
     hp9000s700 | hp9000s800)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine NO_RANLIB HP $fixmakeargs"
# HP-ALLOCA HP_CFLAGS

	if [ `/bin/uname -r | cut -d. -f2` = 10 ]
	then
          echo This machine uses HPUX Version 10
          fixmakeargs="HPUX10 $fixmakeargs"
        fi

	if [ $c_compiler = cc ]
  	then
		fixmakeargs="HP_CFLAGS HP-ALLOCA $fixmakeargs"
	fi

	if [ $cxx_compiler = g++ ]
  	then
		fixmakeargs="HPGNU $fixmakeargs"
	fi

	if [ $pdt_cxx_compiler = aCC ]
  	then
		fixmakeargs="PDTHPACC $fixmakeargs"
	fi

# Check for Convex SPP enviroment
	if [ $detectxdev = cnxspp ]
	  then
	    fixmakeargs="$fixmakeargs CNXSPP"
	fi

	;;

     decstation)
	echo Found a \"$machine\" configuration definition
#	fixmakeargs="arch=$machine MIPS_CC $fixmakeargs"
# with gcc, there are no changes needed...
	fixmakeargs="arch=$machine $fixmakeargs"
	;;

     bgl|ppc64)
	echo "Found an IBM PPC-64 Linux configuration definition"
	fixmakeargs="arch=$machine PPC64 $fixmakeargs"
	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs PPC64PAPI"
	fi
	if [ $machine = bgl ] 
          then
	    fixmakeargs="$fixmakeargs BGL"
        fi
        ;; 

     ia64)
	echo "Found an IA-64 configuration definition"
	fixmakeargs="arch=$machine $fixmakeargs"
	
	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs IA64PAPI"
	fi
	;;
     x86_64)
	echo "Found an AMD Opteron configuration definition"
	fixmakeargs="arch=$machine $fixmakeargs"
	
	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs X86_64PAPI"
	fi
	;;
     ibm64)
	echo Found a \"$machine\" configuration definition
        if [ `uname -s` = AIX ]
        then
	  fixmakeargs="arch=$machine $fixmakeargs SP1 IBM64"
        else 
          if [ `uname -s ` = Linux ] 
          then
	    fixmakeargs="arch=$machine $fixmakeargs PPC64 IBM64"
          else
	    fixmakeargs="arch=$machine $fixmakeargs IBM64"
          fi
        fi

	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs IBM64PAPI"
	fi
	;;
     ibm64linux)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine $fixmakeargs PPC64 IBM64LINUX"
	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs IBM64PAPILINUX"
	fi
	;;
     rs6000)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine $fixmakeargs SP1"

	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs IBMPAPI"
	fi
# Check for SP1 xdev enviroment
#        if [ $detectxdev = sp1 ]
#          then
#            fixmakeargs="$fixmakeargs SP1"
#        fi
	;;

     alpha)
	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs ALPHAPAPI"
	fi
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine $fixmakeargs"
	fixmakeargs="COMPAQ_ALPHA $fixmakeargs"
        if [ $pdt_cxx_compiler = cxx ]
        then
          fixmakeargs="$fixmakeargs PDTALPHACXX"
        fi
        if [ $guidef90 = yes ]
        then
          f90loaded=`which f90 | sed -e 's/f90/../g' | grep "^no"`
          if [ "x$f90loaded" = "x" ]
          then
    	    # f90 module has been loaded and which f90 returns a path	
            extradir="`which f90 | sed s/f90/../`"
	    echo "Found f90 in `which f90`"
          fi
          fixmakeargs="$fixmakeargs extradir=$extradir COMPAQ_GUIDEF90"
        fi
	;;

     sgi4k | sgi8k | sgi32 | sgin32 | sgi64)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine $fixmakeargs"
	if [ $c_compiler = cc ]
          then
# Check CPU type for compiler optimization flags... (-mips2) (-mips4)
            if [ $machine = sgi4k ]
              then
	        fixmakeargs="$fixmakeargs MIPS_CC"
                fixmakeargs="$fixmakeargs MIPSR4K"
                echo "NOTE: *** This is an SGI Challenge (R4K) ***"
              else
                fixmakeargs="$fixmakeargs MIPSR8K"
              echo "NOTE: *** This is an SGI POWER Challenge/Origin (R8K, R10K) ***"
            fi
        fi
        if [ $machine = sgin32 ] 
	  then
	    fixmakeargs="$fixmakeargs ENABLEN32BIT"
	fi

        if [ $machine = sgi64 ] 
	  then
	    fixmakeargs="$fixmakeargs ENABLE64BIT"
	    if [ $papi = yes ]
	    then
		if [ -f $papidir/lib/libpapi64.so -o -f $papidir/src/libpapi64.so ]
		then 
	    	  fixmakeargs="$fixmakeargs SGI64PAPI"
		fi
	    fi		
	fi

        if [ $machine = sgi32 ] 
	  then
	    fixmakeargs="$fixmakeargs ENABLE32BIT"
	fi

# Check for sgimp xdev enviroment
        if [ $detectxdev = sgimp -o $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ]
          then
            fixmakeargs="$fixmakeargs SGIMP"
            if [ $fortran_compiler = no ] 
	    then
              fixmakeargs="$fixmakeargs SGI_FORTRAN"
              fortran_compiler=yes
	    fi
	      
        fi
	;;

     next)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine NEXT_CLIB $fixmakeargs"
	;;

# Currently cm5 cross-development environments are NOT supported
# for solaris2 machines....
     solaris2*)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine SOL2 $fixmakeargs"
        if [ "$tauarch" = "solaris2-64" ] 
        then
	    fixmakeargs="$fixmakeargs SOLARIS64"
        fi
     
	if [ $papi = yes ]
 	  then
	    fixmakeargs="$fixmakeargs SOL2PAPI"
	fi
	if [ $cxx_compiler = CC ]  
	  then
	    fixmakeargs="$fixmakeargs SOL2CC"
	    if [ $openmp = yes ]
	    then
	      fixmakeargs="$fixmakeargs SOL2CC_OPENMP"
	    fi
	    if [ $fortran_compiler = no ]  
	    then
	      fixmakeargs="$fixmakeargs SUN_FORTRAN"
              fortran_compiler=yes
            fi
        fi
	 
		

# Check for Meiko CS2 xdev enviroment
        if [ $detectxdev = cs2 ]
          then
            fixmakeargs="$fixmakeargs CS2"
        fi
	;;

     sun4 | cm5)
	echo Found a \"$machine\" configuration definition
        fixmakeargs="arch=$machine $fixmakeargs"

# Check for cm5 xdev enviroment
        if [ $machine = cm5 -o $detectxdev = cm5 ]
          then
            fixmakeargs="$fixmakeargs CM5"
        fi
	;;

     ptx)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine PTX HP-ALLOCA $fixmakeargs"
        ;;

     tc2000)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine TC2000 $fixmakeargs"
        ;;

     c90)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine C90 CRAY-ALLOCA $fixmakeargs"
# Check for T3D xdev enviroment
        if [ $detectxdev = t3d ]
          then
            fixmakeargs="$fixmakeargs T3D"
        fi
	;;

     t3e)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine T3E CRAY-ALLOCA $fixmakeargs"
	if [ $fortran_compiler = no ]  
	then
	  fixmakeargs="$fixmakeargs CRAY_FORTRAN"
          fortran_compiler=yes
        fi
        ;;

     ksr1)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine KSR NO_RANLIB $fixmakeargs"
        ;;

     paragon)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine PARAGON $fixmakeargs"
        ;;

     symmetry)
	echo Found a \"$machine\" configuration definition
	fixmakeargs="arch=$machine SYMMETRY $fixmakeargs"
	;;

     unknown)
        echo unknown architecture.
	fixmakeargs="arch=$machine $fixmakeargs"
	;;

     default)
	fixmakeargs="arch=$machine $fixmakeargs"
	;;

     -*)
	echo "Invalid option \`$1'" 1>&2
	exit 1
	;;

     *)
	echo No special modifications found for architecture \"$machine\"
	fixmakeargs="arch=$machine  $fixmakeargs"
	;;
    esac

if [ $tauarch = none ]
then
  architecture=
  fixmakeargs="$fixmakeargs arch= "
else
  if [ $execprefix = unknown ]
  then
    architecture=$machine
  else
    architecture=$execprefix
  fi
fi

# write out .h file to define this architecture __easily__
echo \#define TAU_$machine > ./include/tauarch.h
echo \#define TAU_ARCH \"$machine\" >> ./include/tauarch.h

if [ $tauprefix = unknown ] 
then 
  fixmakeargs="$fixmakeargs tauprefix=$tauroot"
  # make bin dir if it does not exist
  if [ ! -d ./$architecture ] 
    then
      mkdir -p ./$architecture
  fi
  if [ ! -d ./$architecture/bin ] 
    then
      mkdir ./$architecture/bin
  fi

  # make lib dir if it does not exist
  if [ ! -d ./$architecture/lib ] 
    then
      mkdir ./$architecture/lib
  fi
fi

# make XtraP directories
if [ -d XtraP ]
then
  if [ ! -d XtraP/lib/$architecture ] 
    then
      mkdir XtraP/lib/$architecture
  fi
fi

if [ $awe = yes ]
  then
    fixmakeargs="$fixmakeargs AWE_AVAILABLE awedir=$awedir"
    echo "$machine: AWEDIR = $awedir" >> ./build/Config.info
fi

if [ $pthread = yes ]
  then
    fixmakeargs="$fixmakeargs PTHREAD_AVAILABLE ptdir=$ptdir"
    echo "$machine: PTDIR = $ptdir" >> ./build/Config.info
    tauoptions="${tauoptions}-pthread"
fi

if [ $compensate = yes ]
  then 
    fixmakeargs="$fixmakeargs COMPENSATE"
    tauoptions="${tauoptions}-compensate"
fi
   

if [ $muse = yes ]
  then
    fixmakeargs="$fixmakeargs MUSE"
    tauoptions="${tauoptions}-muse"
fi

if [ $muse_event = yes ]
  then
    fixmakeargs="$fixmakeargs MUSE_EVENT"
    tauoptions="${tauoptions}-muse_event"
fi

if [ $muse_multiple = yes ]
  then
    fixmakeargs="$fixmakeargs MUSE_MULTIPLE"
    tauoptions="${tauoptions}-muse_multiple"
fi

if [ $sproc = yes ]
  then
    fixmakeargs="$fixmakeargs TAU_SPROC"
    tauoptions="${tauoptions}-sproc"
fi

if [ $pcl = yes ]
  then
    fixmakeargs="$fixmakeargs PCL pcldir=$pcldir"
    tauoptions="${tauoptions}-pcl"
fi

if [ $papi = yes ]
  then
    fixmakeargs="$fixmakeargs PAPI papidir=$papidir"
    tauoptions="${tauoptions}-papi"
    p=$papidir/lib
    if [ -f $p/libpapi.so -o -f $p/libpapi.a -o -f $p/libpapi64.so -o -f $p/libpapi64.a ]
    then
	fixmakeargs="$fixmakeargs papisubdir=lib"
    else
	fixmakeargs="$fixmakeargs papisubdir=src"
    fi
fi

if [ $python = yes ]
  then
    fixmakeargs="$fixmakeargs PYTHON pythoninc=$pythoninc pythonlib=$pythonlib"
    tauoptions="${tauoptions}-python"
    if [ $machine = rs6000 -a "x$pythonlib" = "x" ] 
    then
      echo "ERROR: For IBM systems, please specify the -pythonlib=<dir> flag where *.py files and the config directory are located!"
      exit 1
    fi
fi

if [ $vtf = yes ]
then
  fixmakeargs="$fixmakeargs VTF vtfdir=$vtfdir"
fi

if [ $slog2 = yes ]
then
  fixmakeargs="$fixmakeargs SLOG2 slog2dir=$slog2dir"
  jdkdir=`which javac | sed s/javac/../`
  if [ "x$jdkdir" = "x" ]
  then
    echo "You need javac in your path while using SLOG2. Please re-configure TAU."
  fi
  fixmakeargs="$fixmakeargs jdkdir=$jdkdir"
fi

if [ $pdt = yes ]
then
  fixmakeargs="$fixmakeargs PDT pdtdir=$pdtdir"
  tauoptions="${tauoptions}-pdt"
  if [ $pdtcompdir != unknown ]
  then
    fixmakeargs="$fixmakeargs PDTARCH pdtcompdir=$pdtcompdir"
  fi

  if [ $pdt_cxx_compiler != default ]
  then
    fixmakeargs="$fixmakeargs PDTCXX pdtcxx=$pdt_cxx_compiler"
    if [ $machine = sgi8k -o $machine = sgin32 -o $machine = sgi64 ]
    then
      if [ $pdt_cxx_compiler = CC ]
      then
        fixmakeargs="$fixmakeargs PDTSGICC"
      fi
    fi
  fi
fi

if [ $java = yes ]
  then
    fixmakeargs="$fixmakeargs JAVA jdkdir=$jdkdir"
fi

if [ $openmp = yes ]
  then
    fixmakeargs="$fixmakeargs OPENMP"
    tauoptions="${tauoptions}-openmp"
fi

if [ $opari = yes ]
  then
    if [ -f $oparidir/lib/pomp_lib.h ] 
    then
      kojakincdir=lib
    else
      kojakincdir=include
    fi

    kojakopari=`grep POMP_Finalize $oparidir/$kojakincdir/pomp_lib.h | wc -l`
    if [ $kojakopari = 1 ] 
    then
      fixmakeargs="$fixmakeargs KOJAKOPARI"
    fi
    fixmakeargs="$fixmakeargs OPARI oparidir=$oparidir"
    tauoptions="${tauoptions}-opari"

# Check if opari is in bin dir or in src dir
    if [ -d $oparidir/tool -a -x $oparidir/tool/opari ]
    then
      fixmakeargs="$fixmakeargs oparitool=$oparidir/tool/opari"
    else
      if [ -d $oparidir/bin -a -x $oparidir/bin/opari ] 
      then
        fixmakeargs="$fixmakeargs oparitool=$oparidir/bin/opari"
      else
        echo "ERROR: Opari executable not found in $oparidir directory!"
      fi
    fi
fi

if [ $epilog = yes ]
  then
    fixmakeargs="$fixmakeargs EPILOG epilogdir=$epilogdir"
    tauoptions="${tauoptions}-epilog"
    if [ $mpi = yes ] 
    then 
      if [ $openmp = yes ] 
      then
        fixmakeargs="$fixmakeargs EPILOGOMPI" 
      else
        fixmakeargs="$fixmakeargs EPILOGMPI" 
      fi 
    else
      if [ $openmp = yes ]
      then
        fixmakeargs="$fixmakeargs EPILOGOMP" 
      fi
    fi
fi

if [ $dyninst = yes ]
  then
    fixmakeargs="$fixmakeargs DYNINST dyninstdir=$dyninstdir"
  if [ ! -d $dyninstdir/lib ]
  then
    fixmakeargs="$fixmakeargs DYNINST41"
  fi

fi

if [ $pcl = yes ]
  then
    if [ $pthread = yes  -o $openmp = yes ]
    then 
      fixmakeargs="$fixmakeargs PCLPTHREAD"
    fi
fi

if [ $papi = yes ]
  then
    if [ $pthread = yes -o $openmp = yes ]
    then
      fixmakeargs="$fixmakeargs PAPIPTHREAD"
    fi
fi

if [ $opari = yes ]
  then
    if [ $pthread = yes -o $tulipthread = yes -o $smarts = yes -o $java = yes ]
    then
      echo "ERROR: -opari option requires OpenMP threads package."
      echo "*****************************************************"
      exit 1
    fi
    if [ $opari_construct = yes -a $opari_region = no ]
    then
      fixmakeargs="$fixmakeargs OPARI_CONSTRUCT"
    fi
    if [ $opari_construct = no -a $opari_region = yes ]
    then
      fixmakeargs="$fixmakeargs OPARI_REGION"
    fi
fi

if [ $tulipthread = yes ]
  then
    fixmakeargs="$fixmakeargs TULIPTHREADS tulipdir=$tulipdir"
    echo "$machine: TULIPDIR = $tulipdir" >> ./build/Config.info
    if [ $smarts = yes ]
    then
      fixmakeargs="$fixmakeargs SMARTS"
      tauoptions="${tauoptions}-smarts"
    else
      tauoptions="${tauoptions}-tulip"
    fi
fi

if [ $trace = yes ]
  then
    if [ $profile = yes ] 
      then
        tauoptions="${tauoptions}-profile"
    fi
    if [ $profilestats = yes ] 
      then
        tauoptions="${tauoptions}-profilestats"
    fi
    tauoptions="${tauoptions}-trace"
fi

if [ $kai = yes ]
  then
    tauoptions="${tauoptions}-kcc"
fi 

if [ $pgi = yes ]
  then
    tauoptions="${tauoptions}-pgi"
    if [ $openmp = yes ]
    then
      fixmakeargs="$fixmakeargs PGIOPENMP"
    fi
fi 

if [ $intel = yes ]
  then
    if [ $openmp = yes ]
    then
      fixmakeargs="$fixmakeargs INTELOPENMP"
    fi
    
fi 

# CHECK if Intel 8.0 compilers are available. 
if [ $fortran_compiler = intel ]
then
  intelifort=`which ifort 2>/dev/null`
  if [ "y$intelifort" != "y" ]
  then 
    if [ -x $intelifort ]
    then
      echo "Using Intel ifort as the Fortran Compiler"
      fixmakeargs="$fixmakeargs INTELIFORT"
      echo "Checking version (8.0/8.1+) of Intel compilers"
      # Intel compilers changed from -cxxlib-icc to -cxxlib-gcc (default) in 8.1
      cat << EOF > f1.cpp
      #include <iostream>
      using namespace std;
      
      extern "C" {
        void foo_(int *x)
        {
          cout <<"x = "<<*x<<endl;
        }
      }
EOF
      
      cat <<EOF > f2.f
            PROGRAM FOO_MAIN
            call foo(2)
            END PROGRAM FOO_MAIN
EOF
      
      $cxx_compiler -c f1.cpp
      ifort -c f2.f
      if ifort f1.o f2.o -o foo -lcprts 1>/dev/null 2>&1
      then
        echo "Intel v8.0 compilers used"
      else
        $cxx_compiler -c -cxxlib-icc f1.cpp 1>/dev/null 2>&1
        if  ifort f1.o f2.o -o foo -lcprts 1>/dev/null 2>&1
        then
          $cxx_compiler -c f1.cpp
          taugcclibdir=`g++ -print-libgcc-file-name | sed -e 's,[^/]*$,,'`
          if ifort f1.o f2.o -o foo -L$taugcclibdir -lstdc++ -lgcc_s 1>/dev/null 2>&1
          then
      #      echo "Confirmed  - links with gcc libs"
            echo "Intel v8.1+ compilers used"
            fixmakeargs="$fixmakeargs taugcclibdir=$taugcclibdir INTEL81FIX" 
          fi
        fi
      fi
      /bin/rm -f f1.o f2.o f1.cpp f2.f foo
      # Check over!
      
    fi
  fi
fi

if [ $ibmxlc = yes ]
then
  if [ $openmp = yes ]
  then
    fixmakeargs="$fixmakeargs IBMXLC_OPENMP"
  fi
fi
	
if [ $machine = hitachi ]
then
  if [ $openmp = yes ]
  then
    fixmakeargs="$fixmakeargs HITACHI_OPENMP"
  fi
fi

if [ $cxx_compiler = cxx ]
then
  if [ $openmp = yes ]
  then
    fixmakeargs="$fixmakeargs COMPAQCXX_OPENMP"
  fi
  if [ $pthread = yes ]
  then
    fixmakeargs="$fixmakeargs COMPAQCXX_PTHREAD"
  fi
fi
   

if [ $fujitsu = yes ]
  then
    tauoptions="${tauoptions}-fujitsu"
fi 

if [ $noex = yes ]
  then
    tauoptions="${tauoptions}-noex"
    if [ $kai = yes ]
      then
        fixmakeargs="$fixmakeargs KAINOEX"
    else
    # OTHER COMPILERS NO EXCEPTIONS... SGICC needs this 
        fixmakeargs="$fixmakeargs SGICCNOEX"
    fi
fi
    
#### END OF TAU OPTIONS. Make changes above this line 
fixmakeargs="$fixmakeargs tauoptions=$tauoptions"


if [ $lwp = yes ]
  then
    fixmakeargs="$fixmakeargs LWP_AVAILABLE"
fi

if [ $task = yes ]
  then
    if [ -d XtraP ] 
    then
      XtraPRoot=${tauroot}/XtraP
      if [ $machine != default ]
        then
          echo \#define XTRAPROOT \"$XtraPRoot\"> ${XtraPRoot}/include/XtraPRoot.h
          fixmakeargs="$fixmakeargs TASK_AVAILABLE"
        else
          echo \#define XTRAPROOT \"\" > ${XtraPRoot}/include/XtraPRoot.h
      fi
    fi
fi

if [ $use_pcxx = yes ] 
then	
  fixmakeargs="$fixmakeargs PCXX sage1dir=$sage1dir"
fi

if [ $use_hpcxx = yes ] 
then	
  fixmakeargs="$fixmakeargs HPCXX"
fi

if [ $use_ansic = yes ] 
then	
  fixmakeargs="$fixmakeargs ANSIC"
fi

if [ $use_sage2 = yes ]
then
  fixmakeargs="sage2dir=$sage2dir $fixmakeargs"
fi

if [ $tcltk = yes ]
then
  fixmakeargs="$fixmakeargs TCLTK"
fi





#############################################################################
# Set up TAU-specific configuration options

# -- first, make sure the display is set - wish won't work otherwise
#if ( xrdb -query ) 1>/dev/null 2>&1
#  then
#    echo "The display is okay."
#  else
#    echo "ERROR: You do not have permission to use the display ${DISPLAY}."
#    echo "       Make sure the DISPLAY environment variable is set correctly."
#    echo "       xrdb fails. If DISPLAY is ok, try "
#    echo "       % unsetenv LD_LIBRARY_PATH "
##    exit
#fi

echo "TAU: installing TAU's ParaProf profile browser" 
taushell=sh
if [ $machine = solaris2* -o $machine = alpha ]
then
  taushell=ksh
fi


x=`java -version 2>&1 | grep version | awk '{ print $3; }'| sed -e s/\"//g`

oldjdk=no

if [ `echo $x | sed -e s/1.1\.*// | wc -c` -eq 1 ]
then
  oldjdk=no
else
  if [ `echo $x | sed -e s/1.2\.*// | wc -c` -eq 1 ]
  then
    echo "jdk version 1.2 found"
    oldjdk=yes
  else
    if [ `echo $x | sed -e s/1.3\.*// | wc -c` -eq 1 ]
    then
      echo "jdk version 1.3 found"
      oldjdk=yes
    else
      echo "jdk version 1.4 or better found"
      oldjdk=no;
    fi
  fi
fi

if [ $oldjdk = yes ]
then
  paraprofjar=ParaProf-Old.jar
else
  paraprofjar=ParaProf.jar
fi


if [ $tauprefix = unknown ]
then
  cat ${tauroot}/tools/src/paraprof/bin/paraprof.skel | 
  sed -e 's,@TAUROOTDIR@,'$tauroot','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
	-e 's,@OLDJDK@,'$oldjdk',' > ${tauroot}/${architecture}/bin/paraprof
  chmod a+rx ${tauroot}/${architecture}/bin/paraprof
  if [ ! -f ${tauroot}/${architecture}/bin/jracy ]
  then 
    cd ${tauroot}/${architecture}/bin/; ln -s paraprof jracy; cd ${tauroot}; 
  fi
  echo "TAU: installed paraprof in ${tauroot}/${architecture}/bin"
  cp ${tauroot}/tools/src/paraprof/bin/$paraprofjar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/dms/dms.jar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jargs.jar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jatha.jar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jgraph.jar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jogl.jar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jgraph-1.3.jar ${tauroot}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/xerces.jar ${tauroot}/${architecture}/lib
  echo "TAU: installed ParaProf, DMS, and supporting jars in ${tauroot}/${architecture}/lib"

# Now we look at the installation of tau_compiler.sh 
   if [ ! -f /bin/bash ] 
   then
     bashpath=`which bash`
     if [ ! -f $bashpath ]
     then
       echo "ERROR: You need a working bash shell in your path to use tau_compiler.sh"
       echo "Please add bash to your path and re-run configure."
       echo "**************************************************"
     else
       cat ${tauroot}/tools/src/tau_compiler.sh | sed -e 's#/bin/bash#'$bashpath'#'  > ${tauroot}/${architecture}/bin/tau_compiler.sh
       chmod +x ${tauroot}/${architecture}/bin/tau_compiler.sh
     fi
   else
     cp ${tauroot}/tools/src/tau_compiler.sh ${tauroot}/${architecture}/bin
   fi

  echo "TAU: installed tau_compiler.sh in ${tauroot}/${architecture}/bin"
else
  if [ ! -d ${tauprefix} ]
  then
    echo "making directory $tauprefix "
    mkdir -p ${tauprefix}
    # Copy INSTALL README LICENSE files over there 
    cp README LICENSE CREDITS ${tauprefix}
  fi
  if [ ! -d ${tauprefix}/${architecture} ]
  then
    echo "making directory $tauprefix/$architecture lib bin"
    mkdir ${tauprefix}/${architecture}
    mkdir ${tauprefix}/${architecture}/lib
    mkdir ${tauprefix}/${architecture}/bin
  else
    if [ "x$architecture" = "x" ]
    then
      echo "making directory $tauprefix lib bin"
      if [ ! -d ${tauprefix}/bin ]
      then
	mkdir ${tauprefix}/bin
      fi
      if [ ! -d ${tauprefix}/lib ]
      then
	mkdir ${tauprefix}/lib
      fi
    fi
  fi

  cat ${tauroot}/tools/src/paraprof/bin/paraprof.skel | 
  sed -e 's,@TAUROOTDIR@,'$tauprefix','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
	-e 's,@OLDJDK@,'$oldjdk',' > ${tauprefix}/${architecture}/bin/paraprof
  chmod a+rx ${tauprefix}/${architecture}/bin/paraprof
  if [ ! -f ${tauprefix}/${architecture}/bin/jracy ]
  then 
    cd ${tauprefix}/${architecture}/bin/; ln -s paraprof jracy; cd ${tauroot}; 
  fi
  echo "TAU: installed paraprof in ${tauprefix}/${architecture}/bin"
  cp ${tauroot}/tools/src/paraprof/bin/$paraprofjar ${tauprefix}/${architecture}/lib
  cp ${tauroot}/tools/src/dms/dms.jar ${tauprefix}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jargs.jar ${tauprefix}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/jatha.jar ${tauprefix}/${architecture}/lib
  cp ${tauroot}/tools/src/contrib/xerces.jar ${tauprefix}/${architecture}/lib
  echo "TAU: installed ParaProf, DMS, and supporting jars in ${tauprefix}/${architecture}/lib"
# Now we look at the installation of tau_compiler.sh 
   if [ ! -f /bin/bash ] 
   then
     bashpath=`which bash`
     if [ ! -f $bashpath ]
     then
       echo "ERROR: You need a working bash shell in your path to use tau_compiler.sh"
       echo "Please add bash to your path and re-run configure."
       echo "**************************************************"
     else
       cat ${tauroot}/tools/src/tau_compiler.sh | sed -e 's#/bin/bash#'$bashpath'#'  > ${tauprefix}/${architecture}/bin/tau_compiler.sh
     fi
   else
     cp ${tauroot}/tools/src/tau_compiler.sh ${tauprefix}/${architecture}/bin
   fi

  echo "TAU: installed tau_compiler.sh in ${tauprefix}/${architecture}/bin"
fi


echo "TAU: installing TAU's PerfDMF database utilities" 

if [ ${tauprefix} = unknown ]
then
  targetdir=${tauroot}
else
  targetdir=${tauprefix}
fi

if [ $slog2 = yes ]
then
  utils/slogconverter/tau2slog2.skel $jdkdir $targetdir $slog2dir $architecture > $targetdir/$architecture/bin/tau2slog2
  chmod a+rx ${targetdir}/${architecture}/bin/tau2slog2
  echo "TAU: installed tau2slog2 in ${targetdir}/${architecture}/bin"
fi

cat ${tauroot}/tools/src/dms/bin/configure.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_configure
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_configure
echo "TAU: installed perfdmf_configure in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/dms/bin/loadapp.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_loadapp
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_loadapp
echo "TAU: installed perfdmf_loadapp in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/dms/bin/createapp.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_createapp
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_createapp
echo "TAU: installed perfdmf_createapp in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/dms/bin/loadexp.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_loadexp
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_loadexp
echo "TAU: installed perfdmf_loadexp in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/dms/bin/createexp.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_createexp
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_createexp
echo "TAU: installed perfdmf_createexp in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/dms/bin/loadschema.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_loadschema
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_loadschema
echo "TAU: installed perfdmf_loadschema in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/dms/bin/loadtrial.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/perfdmf_loadtrial
chmod a+rx ${targetdir}/${architecture}/bin/perfdmf_loadtrial
echo "TAU: installed perfdmf_loadtrial in ${targetdir}/${architecture}/bin"

if [ ${tauprefix} = unknown ]
then
cat ${tauroot}/tools/src/dms/src/examples/testBuild.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/tools/src/dms/src/examples/testBuild
chmod a+rx ${targetdir}/tools/src/dms/src/examples/testBuild

cat ${tauroot}/tools/src/dms/src/examples/testSimpleExample.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/tools/src/dms/src/examples/testSimpleExample
chmod a+rx ${targetdir}/tools/src/dms/src/examples/testSimpleExample

cat ${tauroot}/tools/src/dms/src/examples/testScalabilityExample.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/tools/src/dms/src/examples/testScalabilityExample
chmod a+rx ${targetdir}/tools/src/dms/src/examples/testScalabilityExample

cat ${tauroot}/tools/src/dms/src/examples/testCopy.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/tools/src/dms/src/examples/testCopy
chmod a+rx ${targetdir}/tools/src/dms/src/examples/testCopy

cat ${tauroot}/tools/src/dms/src/examples/testDelete.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/tools/src/dms/src/examples/testDelete
chmod a+rx ${targetdir}/tools/src/dms/src/examples/testDelete

cat ${tauroot}/tools/src/dms/src/examples/testSave.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/tools/src/dms/src/examples/testSave
chmod a+rx ${targetdir}/tools/src/dms/src/examples/testSave
fi

if [ ${tauprefix} = unknown ]
then
  targetdir=${tauroot}
else
  targetdir=${tauprefix}
fi

cat ${tauroot}/tools/src/TauIL/bin/tau_analyze.skel | 
sed -e 's,@TAUROOTDIR@,'$targetdir','  -e 's,@SHELL@,'$taushell',' -e 's,@ARCH@,'$architecture',' \
 > ${targetdir}/${architecture}/bin/tau_analyze
chmod a+rx ${targetdir}/${architecture}/bin/tau_analyze
echo "TAU: installed tau_analyze in ${targetdir}/${architecture}/bin"

cat ${tauroot}/tools/src/TauIL/Makefile.inc.skel |
sed -e 's,@TAUROOTDIR@,'$tauroot',' \
> ${tauroot}/tools/src/TauIL/Makefile.inc
echo "TAU: installed Makefile.inc in ${tauroot}/tools/src/TauIL"

cp ${tauroot}/tools/src/TauIL/bin/*.jar ${targetdir}/${architecture}/lib
echo "TAU: installed TauIL and supporting jars in ${targetdir}/${architecture}/lib"

# -- determine Tcl/Tk version
#cat << EOF > /tmp/tau$$
#
#  wm withdraw .
#  puts [info tclversion]/\$tk_version
#  if { ([info tclversion] >= 7.4) && (\$tk_version >= 4.0) } {
#    exit 0
#  } else {
#    exit 1
#  }
	
#EOF

#if tversion=`( wish8.3 -f /tmp/tau$$ ) 2>/dev/null`
#then
#  wishname=wish8.3
#  echo "Found Tcl/Tk wish $tversion"
#else
#  if tversion=`( wish8.2 -f /tmp/tau$$ ) 2>/dev/null`
#  then
#    wishname=wish8.2
#    echo "Found Tcl/Tk wish $tversion"
#  else
#    if tversion=`( wish8.0 -f /tmp/tau$$ ) 2>/dev/null`
#    then
#      wishname=wish8.0
#      echo "Found Tcl/Tk wish $tversion"
#    else
#      if tversion=`( wish -f /tmp/tau$$ ) 2>/dev/null`
#      then
#        wishname=wish
#        echo "Found Tcl/Tk wish $tversion"
#      else
#        echo "ERROR: No working wish found - need Tcl 7.4/Tk 4.0 or higher for TAU"
#        wishname=wish
#        if tversion=`( $wishname -f /tmp/tau$$ ) 2>/dev/null`
#        then
#          echo "Found Tcl/Tk wish $tversion"
#        else
#          echo "Using $wishname as the wish interpreter in racy"
#          #rm /tmp/tau$$
#          #exit
#        fi    
#      fi
#    fi
#  fi
#fi
wishname=wish

#rm /tmp/tau$$

#echo "Using wish command: $wishname"
#echo " "

# We do not need any tkman for RACY. 
# -- find out where tkman is installed
#echo " "
#echo "The TAU editor requires the manual page viewer, TkMan 1.7"  
#echo "(compiled w/ tk4.0-) to be installed."
#echo " "
tk_path="/usr/local/bin/tkman"
#if tk_path=`( which tkman ) 2>/dev/null`
#then
#  echo "Found tkman in $tk_path"
#else 
#  $echo "Please enter the absolute path/file name for the"
#  $echo "tkman executable [/usr/local/bin/tkman]:"
#  $echo "? ${nnl}"
#  read tk_path
#fi
#if [ "x$tk_path" = "x" ]
#  then
#    tk_path="/usr/local/bin/tkman"
#fi
#echo "tkman path set to: $tk_path"

# -- set name of remote shell command
if [ $machine = "hp9000s700" -o $machine = "hp9000s800" ]
then
  remotesh=remsh
else
  remotesh=rsh
fi

# -- now install the TAU tools
#TAUTOOLS="tau taud fancy classy cagey racy dandy cosy dumpy speedy handy spiffy"
# TAU Portable profiling package just needs racy
TAUTOOLS="taud racy"

if [ $tauprefix = unknown ]
then 
echo " "
echo "TAU: installing tools in ${tauroot}/${architecture}/bin"
for tool in $TAUTOOLS
do
  $echo "TAU: installing ${tool}... ${nnl}"
  rm -f ${tauroot}/${architecture}/bin/$tool
  cat ${tauroot}/tools/tool.skel |
  sed -e 's,@TAUROOT@,'$tauroot',' -e 's,@ARCH@,'$architecture',' -e 's,@TOOL@,'$tool',' \
      -e 's,@REMSH@,'$remotesh',' -e 's,@TKMANPATH@,'$tk_path',' \
      -e 's,@WISHNAME@,'$wishname',' \
      > ${tauroot}/${architecture}/bin/${tool}
  chmod a+rx ${tauroot}/${architecture}/bin/${tool}
  echo "done"
done
else 
echo " "
echo "TAU: installing tools in ${tauprefix}/${architecture}/bin"
#Make installation directories


if [ ! -d ${tauprefix} ]
  then
    echo "making directory $tauprefix "
    mkdir -p ${tauprefix}
  fi
if [ ! -d ${tauprefix}/${architecture} ]
  then
    echo "making directory $tauprefix/$architecture lib bin"
    mkdir ${tauprefix}/${architecture}
    mkdir ${tauprefix}/${architecture}/lib
    mkdir ${tauprefix}/${architecture}/bin
  fi

for tool in $TAUTOOLS
do
  $echo "TAU: installing ${tool}... ${nnl}"
  rm -f ${tauprefix}/${architecture}/bin/$tool
  cat ${tauroot}/tools/tool.skel |
  sed -e 's,@TAUROOT@,'$tauroot',' -e 's,@ARCH@,'$architecture',' -e 's,@TOOL@,'$tool',' \
      -e 's,@REMSH@,'$remotesh',' -e 's,@TKMANPATH@,'$tk_path',' \
      -e 's,@WISHNAME@,'$wishname',' \
      > ${tauprefix}/${architecture}/bin/${tool}
  chmod a+rx ${tauprefix}/${architecture}/bin/${tool}
  echo "done"
done
fi


if [ $use_pcxx = yes ]
then

$echo "TAU: installing breezy... ${nnl}"
rm -f ${tauroot}/bin/${architecture}/breezy
cat lang_support/pc++/breezy/userAgent/tool.skel |
sed -e 's,@TAUROOT@,'${tauroot}',' -e 's,@ARCH@,'${architecture}',' -e 's,@TOOL@,'breezy',' \
> ${tauroot}/bin/${architecture}/breezy
chmod a+rx ${tauroot}/bin/${architecture}/breezy
echo "done"

if [ $tcltkfile  = "/" ]
then
  echo ""
  echo "For compiling the breezy user interface, we need the very"
  echo "site-specific locations for header files and libraries for"
  echo "X11 and Tcl/Tk. Typing <return> after the questions will use"
  echo "the specified default locations in brackets."
  echo ""

  echo "Options for including Tcl/Tk headers [-I/usr/local/include]"
  $echo "? ${nnl}"
  read tcltkheader
  if [ "x$tcltkheader" = "x" ]; then tcltkheader="-I/usr/local/include"; fi

  foo="`echo $tcltkheader | sed -e 's/-I/-L/' -e 's/include/lib/'` -ltk4.0 -ltcl7.4"
  echo "Options for linking Tcl/Tk [$foo]"
  $echo "? ${nnl}"
  read tcltklib
  if [ "x$tcltklib" = "x" ]; then tcltklib="$foo"; fi

  echo "Options for including X11 headers [-I/usr/include]"
  $echo "? ${nnl}"
  read x11header
  if [ "x$x11header" = "x" ]; then x11header="-I/usr/include"; fi

  foo="`echo $x11header | sed -e 's/-I/-L/' -e 's/include/lib/'` -lX11"
  echo "Options for linking X11 [$foo]"
  $echo "? ${nnl}"
  read x11lib
  if [ "x$x11lib" = "x" ]; then x11lib="$foo"; fi

  echo ""
else
  echo "TAU: using make info from file $tcltkfile"
  . $tcltkfile
fi

sed -e 's,^TCLTKHEADER =.*$,TCLTKHEADER = '"$tcltkheader"',' \
    -e 's,^X11HEADER   =.*$,X11HEADER   = '"$x11header"','   \
    -e 's,^X11LIB      =.*$,X11LIB      = '"$x11lib"','      \
    -e 's,^TCLTKLIB    =.*$,TCLTKLIB    = '"$tcltklib"','    \
    lang_support/pc++/breezy/userAgent/Makefile > tmpmake
mv tmpmake lang_support/pc++/breezy/userAgent/Makefile

fi  # if breezy

if [ $use_hpcxx = yes ]
then
# Fix the file info for preprocessor in lang_support/hpc++/include-clean
sed -e 's,^#1 ".*/lang_support/hpc++/include/hpc++.h",'#1\ \"$tauroot/lang_support/hpc++/include/hpc++.h\"',' lang_support/hpc++/include-clean/hpc++.h > tmplib
mv tmplib lang_support/hpc++/include-clean/hpc++.h
fi

# Save the FixMakefile args
# Clear any old data
grep "^#" ./utils/FixMakefile.info > ./utils/FixMakefile.info~~0
/bin/mv ./utils/FixMakefile.info~~0 ./utils/FixMakefile.info
echo $fixmakeargs >> ./utils/FixMakefile.info

# Now FINALLY FixMakefile with the string I have built
utils/FixMakefile $fixmakeargs

# Use default setups, forget everything else (PHB)
if [ $machine = default ]
  then
    /bin/cp ./utils/FixMakefile.sed.default  ./utils/FixMakefile.sed
    /bin/cp ./utils/FixMakefile.info.default ./utils/FixMakefile.info
    /bin/cp ./build/Config.info.default      ./build/Config.info
fi

    sedout="./utils/FixMakefile.sed"
echo "Applying script to all Makefiles, please wait, this may take a while..."
for i in `find . -name Makefile -print `
#for i in $tauroot/include/Makefile $tauroot/src/Profile/Makefile $tauroot/utils/Makefile $tauroot/Makefile
  do 
    $echo ".${nnl}"
    sed -f $sedout < ${i} > ${i}~~0
    mv ${i}~~0 ${i}
done
echo .

if [ $tauprefix != unknown ]
  then 
    echo "TAU: Copying include directory in ${tauprefix}"
    cp -r include ${tauprefix}
fi

# Attempt to install metatext (jev)
if [ -f ./metatext/configure ]
  then
    cd ./metatext
    ./configure  1> /dev/null 2>&1
    cd ..
fi



#############################################################################
# Set up TAU-specific build system

echo " "
echo "Configuring TAU Build scripts..."

# -- Save C++ compiler, C compiler, and USEROPT for pC++
if [ $use_pcxx = yes ]
then
echo "$machine: pcxx_root    = $sage1dir" >> \
        ./build/pc++/Config.info
echo "$machine: pcxx_cxx     = $cxx_compiler" >> \
        ./build/pc++/Config.info
echo "$machine: pcxx_cc      = $c_compiler" >> \
        ./build/pc++/Config.info
opt=`echo $useropt | sed -e 's/_/ /g'`
echo "$machine: pcxx_useropt = $opt" >> \
        ./build/pc++/Config.info
echo "" >> ./build/pc++/Config.info
fi

# -- Save C++ compiler, C compiler, and USEROPT for HPC++
if [ $use_hpcxx = yes ]
then
opt=`echo $useropt | sed -e 's/_/ /g'`
echo "$machine: hpcxx_useropt = $opt" >> \
        ./build/hpc++/Config.info
echo "$machine: hpcxx_sage1 = $sage1dir" >> \
        ./build/hpc++/Config.info
echo "$machine: hpcxx_sage2 = $sage2dir" >> \
        ./build/hpc++/Config.info
echo "$machine: hpcxx_pstl = $pstldir" >> \
        ./build/hpc++/Config.info
echo "$machine: hpcxx_hpnx = $hpnxdir" >> \
        ./build/hpc++/Config.info
echo "" >> ./build/hpc++/Config.info
fi

# Modify the Makefiles so include/Makefile is replaced by the TAU options 
# for specific examples
echo "s@include \(.*\)TAUROOTDIR\(.*\)@include $\(TAUROOTDIR\)/$architecture/lib/Makefile.tau$tauoptions@g" > utils/sedexamples.out
#echo "s@include/Makefile@$machine/lib/Makefile.tau$tauoptions@g" >utils/sedexamples.out
sedex="./utils/sedexamples.out"

echo "Modifying Makefiles in the examples subdirectory..."

# Prefix start from examples directory
pr=examples
exampleslist="instrument/Makefile mapping/embedded/Makefile \
  mapping/external/Makefile fork/Makefile selectiveAccess/Makefile"

if [ $fortran_compiler != no ] 
then
  exampleslist="$exampleslist fortran/Makefile f90/Makefile"
fi

# Rules for adding examples follow...
# If PDT is specified, then modify the following makefiles
if [ $pdt = yes ]
then
  exampleslist="$exampleslist autoinstrument/Makefile reduce/Makefile cinstrument/Makefile"
  if [ $fortran_compiler != no ]
  then
    exampleslist="$exampleslist selective/Makefile"
  fi
fi

# If PDT is specified WITH MPI
if [ $pdt = yes -a $mpi = yes ]
then
  exampleslist="$exampleslist pdt_mpi/c++/Makefile pdt_mpi/c/Makefile" 
  if [ $pthread = yes ]
  then
    exampleslist="$exampleslist mixedmode/Makefile"
  fi

  if [ $fortran_compiler != no ]
  then
    exampleslist="$exampleslist pdt_mpi/f90/Makefile"
  fi 
fi

if [ $mpi = yes ]
then
  exampleslist="$exampleslist pi/Makefile mpishlib/Makefile"
  if [ $fortran_compiler != no ]
  then
    exampleslist="$exampleslist NPB2.3/config/make.def"
  fi
  if [ $openmp = yes ]
  then 
    exampleslist="$exampleslist openmpi/Makefile"
  fi
fi

if [ $opari = yes ] 
then
  exampleslist="$exampleslist opari/c++/Makefile"
  if [ $pdt = yes -a $fortran_compiler != no ]
  then 
    exampleslist="$exampleslist opari/pdt_f90/Makefile"
  fi

  if [ $mpi = yes ]
  then
    exampleslist="$exampleslist opari/openmpi/Makefile"
  fi
fi

if [ $trace = yes ]
then
  exampleslist="$exampleslist traceinput/c++/Makefile traceinput/c/Makefile"
fi

if [ $callpath = yes ]
then
  exampleslist="$exampleslist callpath/Makefile"
fi

if [ $python = yes -o $java = yes -o $dyninst = yes ]
then
# RESET the exampleslist, the C, C++, F90 examples don't matter!
  exampleslist=""
fi

if [ $pthread = yes ]
then
  exampleslist="$exampleslist threads/Makefile cthreads/Makefile"
fi

if [ $sproc = yes ]
then
  exampleslist="$exampleslist sproc/Makefile"
fi

if [ $papi = yes -o $pcl = yes ]
then
  exampleslist="$exampleslist papi/Makefile multicounter/Makefile"
  if [ $pthread = yes ]
  then
    exampleslist="$exampleslist papithreads/Makefile" 
  fi 
fi






######################################################################
# If the default gcc/g++ is not used, Modify the Makefiles...
# Choose the c++ and cc compiler

case $machine in
    
    apple)
	gunzip -c tools/src/contrib/apple/libjogl.jnilib.gz > $architecture/lib/libjogl.jnilib
	;;
    
    i386_linux)
	gunzip -c tools/src/contrib/i386_linux/libjogl.so.gz > $architecture/lib/libjogl.so
	;;
    
    x86_64)
	gunzip -c tools/src/contrib/i386_linux/libjogl.so.gz > $architecture/lib/libjogl.so
	;;

    ia64)
	gunzip -c tools/src/contrib/ia64/libjogl.so.gz > $architecture/lib/libjogl.so
	gunzip -c tools/src/contrib/ia64/jogl.jar.gz > $architecture/lib/jogl.jar
	;;

    solaris2)
	gunzip -c tools/src/contrib/solaris2/libjogl.so.gz > $architecture/lib/libjogl.so
	;;
    
    *)
	$echo "Platform does not support JOGL, no 3d displays will be available in ParaProf"
	;;
esac




# Modify the Makefiles only if prefix is not specified. 
if [ $tauprefix = unknown ]
then 
  for i in $exampleslist
  do 
    $echo ".${nnl}"
    sed -f $sedex < $pr/${i} > $pr/${i}~~0
    mv $pr/${i}~~0 $pr/${i}
  done
# Copy over the Makefile so make clean works
  cp include/Makefile $machine/lib/Makefile.tau$tauoptions
fi
echo .

# If it is default, restore to original state
if [ "y$1"  = "ydefault" ]
then
  echo "Fixing examples Makefiles..."
  echo "s@include \(.*\)TAUROOTDIR\(.*\)@include $\(TAUROOTDIR\)/include/Makefile@g" >utils/sedexamples.out
  sedex="./utils/sedexamples.out"
  for i in `find examples -name Makefile -print` examples/NPB2.3/config/make.def
  do 
    $echo ".${nnl}"
    sed -f $sedex < ${i} > ${i}~~0
    mv ${i}~~0 ${i}
  done
fi
    
  

if [ $slog2 = yes ]
then
  /bin/rm -f utils/slogconverter/trace_impl.h
  utils/slogconverter/slogtest $jdkdir > utils/slogconverter/trace_impl.h
fi



# bye bye
echo 
echo "Configuration complete!"
if [ $tauprefix != unknown ]
  then 
    echo "   Please add " $tauprefix/$architecture/bin " to your path"
  else
    echo "   Please add " $tauroot/$architecture/bin " to your path"
fi
echo '   Type "make install" to begin compilation'

exit 0







