#!/bin/sh

TAUROOT=@TAUROOTDIR@
TAUARCH=@ARCH@

BASEDIR=$TAUROOT/$TAUARCH

SICORTEX=no
PREFIX=no


usage()
{
    echo ""
    echo "Usage: tauex [options] [--] <exe> <exe options>"
    echo ""
# Common options first
    echo "Options:"
    echo "        -d: Enable debugging output, use repeatedly for more output."
    echo "        -h: Print this message."
    echo "        -i: Print information about the host machine."
    echo "        -s: Dump the shell environment variables and exit."
    echo "        -U: User mode counts"
    echo "        -K: Kernel mode counts"
    echo "        -S: Supervisor mode counts"
    echo "        -I: Interrupt mode counts"
    echo "        -l: List events"
    echo "        -L <event> : Describe event"
#    echo "        -a: Count all native events (implies -m)"
#    echo "        -m: Multiple runs (enough runs of exe to gather all events)"
    echo "        -e <event> : Specify PAPI preset or native event"
# tauex specific options
    echo "        -T <MPI,OPENMP,PROFILE,CALLPATH,TRACE,VAMPIRTRACE,EPILOG,DISABLE> : specify TAU option"
    echo "        -v: Debug/Verbose mode"
    echo "        -XrunTAU-<options> : specify TAU library directly"
    echo ""
    echo "Defaults if unspecified: -U -T MPI,PROFILE -e GET_TIME_OF_DAY"
    echo ""
    echo "Example:"
    echo "    mpirun -np 2 tauex -e PAPI_TOT_CYC -e PAPI_FP_OPS -T MPI,PROFILE -- ./ring"
    echo ""
    exit
}

if [ $# = 0 ] ; then
    usage
fi


dryrun="false"
ProfileSpecified="false"
TraceSpecified="false"
DisableSpecified="false"
processT="false"
processE="false"
TauOptions=""
TauOptionsExclude=""
Counters=""
NumCounters=1
verbose=false
multiplerun=false
allnative=false
binding_specified=""
unset TAU_PAPI_DOMAIN
export TAU_PAPI_DOMAIN

for arg in "$@" ; do
  # Thanks to Bernd Mohr for the following that handles quotes and spaces (see configure for explanation)
  modarg=`echo "x$arg" | sed -e 's/^x//' -e 's/"/\\\"/g' -e s,\',%@%\',g -e 's/%@%/\\\/g' -e 's/ /\\\ /g'`

  if [ "$processT" = "true" ] ; then
      options=`echo $arg | sed -e 's/,/ /g' | tr [A-Z] [a-z]`
      for i in $options ; do
	  if [ "$i" = "profile" ] ; then
	      ProfileSpecified="true"
	  elif [ "$i" = "trace" ] ; then
	      TraceSpecified="true"
	  elif [ "$i" = "disable" ] ; then
	      DisableSpecified="true"
	  else
	      TauOptions="$TauOptions $i"
	  fi
      done
      processT="false"
      shift
  elif [ "$processE" = "true" ] ; then
      options=`echo $arg | sed -e 's/,/ /g'`
      for i in $options ; do
	  if [ "$SICORTEX" = "yes" ]; then
	      if [ "$i" != "GET_TIME_OF_DAY" -a "${i:0:5}" != "PAPI_" ]; then
		  i=PAPI_NATIVE_$i
	      fi
	  fi
	  Counters="$Counters $i"
	  NumCounters=$(( $NumCounters + 1 ))
      done
      processE="false"
      shift
  else
      case $arg in 
	  -v|-d)
	      verbose=true
	      shift
	      ;;
	  -help|-h|--help)
	      usage
	      ;;
	  -i|-l|-L)
	      PAPIEX=`which papiex`
	      if [ -x $PAPIEX ]; then
		  if [ $arg = "-L" ]; then
		      $PAPIEX $arg $2
		  else
		      $PAPIEX $arg
		  fi
		  exit $?;
	      else
		  echo "This option requires papiex to be in your path."
		  exit 1
	      fi
	      ;;
	  -s)
	      dryrun=true
	      shift
	      ;;
	  -V)
	      echo '$Id: tauex.in,v 1.15 2007/11/29 23:16:31 amorris Exp $';
	      exit 0;
	      ;;
#	  -m)
#	      multiplerun=true
#	      shift
#	      ;;
#	  -a)
#	      allnative=true
#	      multiplerun=true
#	      shift
#	      ;;
	  -e)
	      processE=true
	      shift
	      ;;
	  -T)
	      processT=true
	      shift
	      ;;
	  -U) 
	      TAU_PAPI_DOMAIN=$TAU_PAPI_DOMAIN:PAPI_DOM_USER
	      shift
	      ;;
	  -K) 
	      TAU_PAPI_DOMAIN=$TAU_PAPI_DOMAIN:PAPI_DOM_KERNEL
	      shift
	      ;;
	  -S) 
	      TAU_PAPI_DOMAIN=$TAU_PAPI_DOMAIN:PAPI_DOM_SUPERVISOR
	      shift
	      ;;
	  -I) 
	      TAU_PAPI_DOMAIN=$TAU_PAPI_DOMAIN:PAPI_DOM_OTHER
	      shift
	      ;;
	  -XrunTAU-*)
	      myarg=`echo $arg | sed 's/-XrunTAU-//'`
	      binding_specified="shared-$myarg"
	      shift
	      ;;
	  --)
	      shift
	      break
	      ;;
	  -*)
	      echo "Unknown option: $arg"
	      exit
# First non-option signifies end of options. This would be much easier with getopt()
	      ;;
	  *)
	      break
	      ;;
      esac
  fi
done

if [ "$Counters" = "" ] ; then
    Counters="GET_TIME_OF_DAY"
fi

if [ $allnative = "true" ] ; then
    native=`papi_native_avail | grep "0x" | awk '{ print $1 }'`
    for i in $native ; do
	Counters="$Counters PAPI_NATIVE_$i"
	NumCounters=$(( $NumCounters + 1 ))
    done
fi

if [ $verbose = "true" ] ; then
    echo ""
    echo "Program to run : $@"
    echo ""
fi


if [ "x$binding_specified" = "x" ] ; then
    if [ "$ProfileSpecified" = "false" -a "$TraceSpecified" = "false" ] ; then
	ProfileSpecified="true"
    fi
    
    if [ "$ProfileSpecified" = "true" -a "$TraceSpecified" = "false" ] ; then
	TauOptionsExclude="trace"
    elif [ "$ProfileSpecified" = "true" -a "$TraceSpecified" = "true" ] ; then
	TauOptions="$TauOptions profile trace"
    elif [ "$ProfileSpecified" = "false" -a "$TraceSpecified" = "true" ] ; then
	TauOptionsExclude="profile"
	TauOptions="$TauOptions trace"
    fi

    if [ "$DisableSpecified" = "false" ] ; then
	TauOptionsExclude="disable"
    fi
    
    if [ $NumCounters -gt 1 ] ; then
	TauOptions="$TauOptions multiplecounters papi"
    fi
    
    if [ "$SICORTEX" = "yes" ] ; then
	bindings=`ls $PREFIX/lib64 | grep TAU-shared`
    else
	bindings=`ls $BASEDIR/lib | grep shared`
    fi
    
    for opt in $TauOptions; do 
	newbindings=""
	for b in $bindings ; do
	    add=`echo $b | grep -i $opt`
	    newbindings="$newbindings $add"
	done
	bindings=$newbindings
    done
    
    for opt in $TauOptionsExclude; do 
	newbindings=""
	for b in $bindings ; do
	    add=`echo $b | grep -v -i $opt`
	    newbindings="$newbindings $add"
	done
	bindings=$newbindings
    done

    declare -i minLength
    declare -i length
    minLength=9999
    theBinding=""
    for b in $bindings ; do
	length=${#b}
	if [ "$length" -lt "$minLength" ] ; then
	    theBinding=$b
	    minLength=$length
	fi
    done

    if [ "x$theBinding" = "x" ] ; then
	echo "Error: Couldn't find a matching TAU binding"
	exit
    fi
else
    theBinding=$binding_specified
fi

# unset any counters that may be active
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; do
    unset COUNTER$i
done

if [ "$SICORTEX" = "yes" ] ; then
    TAUEX_LD_LIBRARY_PATH=$PREFIX/lib32/$theBinding:$LD_LIBRARY_PATH
    TAUEX_LD_LIBRARY_PATH=$PREFIX/lib64/$theBinding:$TAUEX_LD_LIBRARY_PATH
    TAUEX_LD_PRELOAD=libTAU.so:$LD_PRELOAD
else 
    TAUEX_LD_LIBRARY_PATH=$BASEDIR/lib/$theBinding:$LD_LIBRARY_PATH
    TAUEX_LD_PRELOAD=$BASEDIR/lib/$theBinding/libTAU.so:$LD_PRELOAD
fi

if [ $verbose = "true" ] ; then
    echo "Matching bindings:"
    echo "$bindings"
    echo ""
    echo "Using:"
    echo "$theBinding"
    echo ""
    echo "Configuration:"
    echo "Setting TAU_PAPI_DOMAIN to $TAU_PAPI_DOMAIN"
    counterlist=""
    counter=1
    for c in $Counters ; do 
    #echo export COUNTER$counter=$c
	echo "Setting COUNTER$counter to $c"
	counter=$(( $counter + 1 ))
	counterlist="$counterlist $c"
    done
    echo ""
    echo "Runtime:"
    echo "Setting LD_LIBRARY_PATH to $TAUEX_LD_LIBRARY_PATH"
    echo "Setting LD_PRELOAD to $TAUEX_LD_PRELOAD"
    echo ""
fi

    # execute the program
if [ $dryrun = "true" ]; then
    counterlist=""
    counter=1
    for c in $Counters ; do 
    #echo export COUNTER$counter=$c
	echo export COUNTER$counter=$c
	counter=$(( $counter + 1 ))
	counterlist="$counterlist $c"
    done
    echo "export TAU_PAPI_DOMAIN=$TAU_PAPI_DOMAIN"
    echo "export LD_LIBRARY_PATH=$TAUEX_LD_LIBRARY_PATH"
    echo "export LD_PRELOAD=$TAUEX_LD_PRELOAD"
    if [ $multiplerun = "true" ] ; then
	echo tauex.multiple $counterlist -- "$@"
    else 
	echo "$@"
    fi
    exit 0;
else
    counterlist=""
    counter=1
    for c in $Counters ; do 
    #echo export COUNTER$counter=$c
	export COUNTER$counter=$c
	counter=$(( $counter + 1 ))
	counterlist="$counterlist $c"
    done
    export LD_LIBRARY_PATH=$TAUEX_LD_LIBRARY_PATH
    export LD_PRELOAD=$TAUEX_LD_PRELOAD
    if [ $multiplerun = "true" ] ; then
	tauex.multiple $counterlist -- "$@"
    else 
	"$@"
    fi
fi



