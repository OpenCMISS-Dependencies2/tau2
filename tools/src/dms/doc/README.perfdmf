*****************************************************************************
**			             PerfDMF  - Performance Database                    **
**			             http://tau.cs.uoregon.edu  		               **
*****************************************************************************
**  Copyright 2003                                                         **
**  Department of Computer and Information Science, University of Oregon   **
*****************************************************************************
*****************************************************************************
**  Authors :    
**       Kevin Huck (khuck@cs.uoregon.edu) (UO)
**       Robert Michael Ansell Bell (UO), 
**       Li Li (UO), 
**  Principal Investigators : 
**		 Allen Malony (UO)
**  TAU project was developed by Bernd Mohr, Lars Hansen, Kurt Windisch, 
**  Darryl Brown, et. al. and directed by Allen Malony at University of Oregon.
**  The TAU Portable Profiling Package uses part of TAU.
*****************************************************************************

Performance Database: PerfDMF
****************************

PerfDMF is a tool related to the TAU framework.  The PerfDMF database is
designed to store and provide access to TAU profile data.  A number of
utility programs have been written in Java to load the data into PerfDMF
and to query the data.  With PerfDMF, users can perform performance analyses
such as regression analysis, scalability analysis across multiple trials, 
and so on.  An unlimited number of comparative analyses are available 
through the PerfDMF toolkit.  Work is being done to provide the user
with standard analysis tools, and an API has been developed to access the
data with standard Java classes.

Prerequisites:
************** 

- PostgreSQL 7.0 (or an equivalent DBMS)

PerfDMF requires a DataBase Management System (DBMS).  It has been tested 
with both PostgreSQL and MySQL databases.  The default database is 
PostgreSQL (http://www.postgresql.org).

- Java 1.4

The PerfDMF utilities and API are written in Java.

Installation:
*************

PerfDMF is installed as part of the standard TAU release.  Shell scripts
are installed in the TAU bin directory to run the configuration and 
loading utilities.  It is assumed that the user has installed TAU and
run TAU's configure and 'make install'.

1) Create a database

Once a DBMS is installed, a database needs to be created.  This database
can be called anything the user likes - perfdmf is the default.  If the 
DBMS is PostgreSQL, the command from the shell prompt is:

	$ createdb perfdmf

If the user is in psql, the command is:

	psql=# create database perfdmf

Other DBMS are similar.

2) Build PerfDMF

The build process for PerfDMF is simple.  Change to the 
$TAUROOT/tools/src/dms directory, and issue the command:

	$ make

3) Configuration

PerfDMF needs to be configured for the first time use.  To configure PerfDMF,
run the command (assuming $TAUROOT/$arch/bin is in your path):

	$ perfdmf_configure

The configure program will prompt the user for several values.  The default
values in all cases will work for 99.9% of users.  Unless you need to specify
something other than the default values (for example, if you are using MySQL
instead of PostgreSQL, you need to specify a different JDBC .jar file, 
driver name, and database vendor).  The only value for which there is no 
default is the database username.  Enter the name of a database user which
has administrative access.  Once the configuration
program collects the information, it prompts for the user's database password,
and connects to the database to test the configuration.  If the configuration
is valid, the database schema is loaded into the database.

4) Loading database schema

If the configuration ended successfuly, then the database schema was loaded
at the end of the configuration process.  If problems occurred, then it may
be necessary to load the database schema later.  If that is the case, then
the program to load the schema is:

	$ perfdmf_loadschema

5) Loading application data

To load application data, simply run the perfdmf_loadapp program.  There is 
one parameter for perfdmf_loadapp, and it is:

	{-x --xmlfile} filename : the name of the application data file

The xmlfile passed in is the application data file.  A sample application
data file is $TAUROOT/tools/src/dms/data/App_Info.xml.  For example,
you could run perfdmf_loadapp this way:

	$ perfdmf_loadapp -x App_Info.xml

The application loader will load the application, and return the ID of the
application in the database.

Alternatively, just run the utility to create a default application, 
perfdmf_createapp.  There is one parameter:

	{-n --name} application_name : the name of the application

6) Loading experiment data

To load experiment data, simply run the perfdmf_loadexp program.  There are 
two parameters for perfdmf_loadexp, and they are:

	{-x --xmlfile} filename : the name of the experiment data file
	{-a --applicationid} value : the value of the application ID

The xmlfile passed in is the experiment data file.  A sample experiment
data file is $TAUROOT/tools/src/dms/data/Exp_Info.xml.  For example,
you could run perfdmf_loadexp this way:

	$ perfdmf_loadexp -x Exp_Info.xml - a 1

The experiment loader will load the experiment, and return the ID of the
experiment in the database.

Alternatively, just run the utility to create a default experiment, 
perfdmf_createexp.  There is one parameter:

	{-n --name} experiment_name : the name of the experiment

7) Loading translated Trial data

The trial data is loaded by running the perfdmf_loadtrial command.  The 
parameters for perfdmf_loadtrial are:

	{-e --experimentid} value : the value of the experiment ID
	{-f --filetype} file_type : the type of profile data: profiles (TAU),
		pprof (TAU pprof.dat), dynaprof, gprof, xprof, sddf, etc.
	{-s --sourcefile} filename : the name of the TAU data file
	{-t --trialid} value : the value of an existing trial ID
	{-n --name} trial_name : the name of the trial
	{-p --problemfile} filename : the name of a problem definition file

perfdmf_loadtrial can be run two ways.  When creating a new trial, the user
calls perfdmf_loadtrial with an optional problem definition file.  The problem
definition file is a user-defined XML file that describes the trial data.
An example problem definiton file is in the data directory.  For example:

	$ perfdmf_loadtrial -x pprof.xml -p sample_problem.xml

If the user is adding trial data to an existing trial (due to multiple
metrics recorded during the run with TAU), then the problem 
file is omitted, and the trial ID is passed in:

	$ perfdmf_loadtrial -t 1

Once the data has been loaded into the database, analysis can be performed.
See the ${TAUROOT}/tools/src/dms/README file for more details.

