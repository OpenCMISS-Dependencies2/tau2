/* 	ExperimentListManager.java	Title:			jRacy	Author:			Robert Bell	Description:	*/package jRacy;import java.util.*;import java.awt.*;import java.awt.event.*;import java.io.*;import javax.swing.*;import javax.swing.border.*;import javax.swing.event.*;public class ExperimentListManager extends JFrame implements ActionListener {	public ExperimentListManager()	{				//Some window stuff.		setLocation(new java.awt.Point(300, 300));		setSize(new java.awt.Dimension(800, 400));		setTitle("Experiment Manager");				//Add some window listener code				addWindowListener(new java.awt.event.WindowAdapter() {					public void windowClosing(java.awt.event.WindowEvent evt) {						thisWindowClosing(evt);					}				});						//******************************		//Code to generate the menus.		//******************************						JMenuBar mainMenu = new JMenuBar();				//******************************		//File menu.		//******************************		JMenu fileMenu = new JMenu("File");				//Add a menu item.		JMenuItem closeItem = new JMenuItem("Close Experiment Manager");		closeItem.addActionListener(this);		fileMenu.add(closeItem);						//Add a menu item.		JMenuItem exitItem = new JMenuItem("Exit jRacy!");		exitItem.addActionListener(this);		fileMenu.add(exitItem);		//******************************		//End - File menu.		//******************************				//******************************		//Help menu.		//******************************		JMenu helpMenu = new JMenu("Help");				//Add a menu item.		JMenuItem aboutItem = new JMenuItem("About Racy");		aboutItem.addActionListener(this);		helpMenu.add(aboutItem);				//Add a menu item.		JMenuItem showHelpWindowItem = new JMenuItem("Show Help Window");		showHelpWindowItem.addActionListener(this);		helpMenu.add(showHelpWindowItem);		//******************************		//End - Help menu.		//******************************						//Now, add all the menus to the main menu.		mainMenu.add(fileMenu);		mainMenu.add(helpMenu);		setJMenuBar(mainMenu);				//******************************		//End - Code to generate the menus.		//******************************										//Setting up the layout system.		Container contentPane = getContentPane();		GridBagLayout gbl = new GridBagLayout();		contentPane.setLayout(gbl);				//Create some borders.		Border loweredbev = BorderFactory.createLoweredBevelBorder();		Border raisedbev = BorderFactory.createRaisedBevelBorder();		Border empty = BorderFactory.createEmptyBorder();				//Initialize the two lists and their models.		experimentsModel = new DefaultListModel();		experimentsList = new JList(experimentsModel);		experimentsList.setPreferredSize(new Dimension(1000,1000));				runsModel = new DefaultListModel();		runsList = new JList(runsModel);		runsList.setPreferredSize(new Dimension(1000,1000));				valuesModel = new DefaultListModel();		valuesList = new JList(valuesModel);		valuesList.setPreferredSize(new Dimension(1000,1000));				//The scroll panes into which the list shall be placed.		JScrollPane experimentsScrollPane = new JScrollPane(experimentsList);		experimentsScrollPane.setBorder(loweredbev);		JScrollPane runsScrollPane = new JScrollPane(runsList);		runsScrollPane.setBorder(loweredbev);		JScrollPane valuesScrollPane = new JScrollPane(valuesList);		valuesScrollPane.setBorder(loweredbev);				//Other componants.		JLabel experimentsLabel = new JLabel("Experiments", JLabel.LEFT);		experimentsLabel.setBorder(empty);		experimentsLabel.setFont(new Font("Times-Roman", Font.ITALIC, 15));				JLabel runsLabel = new JLabel("Runs", JLabel.LEFT);		runsLabel.setBorder(empty);		runsLabel.setFont(new Font("Times-Roman", Font.ITALIC, 15));				JLabel valuesLabel = new JLabel("Values", JLabel.LEFT);		valuesLabel.setBorder(empty);		valuesLabel.setFont(new Font("Times-Roman", Font.ITALIC, 15));				JButton addExperimentButton = new JButton("Add Exp.");		addExperimentButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		addExperimentButton.setBorder(raisedbev);		JButton removeExperimentsButton = new JButton("Remove Exp.");		removeExperimentsButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		removeExperimentsButton.setBorder(raisedbev);				JButton addRunButton = new JButton("Add Run");		addRunButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		addRunButton.setBorder(raisedbev);		JButton removeRunsButton = new JButton("Remove Run");		removeRunsButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		removeRunsButton.setBorder(raisedbev);				JButton addValuesButton = new JButton("Add Value");		addValuesButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		addValuesButton.setBorder(raisedbev);		JButton applyOperationButton = new JButton("Apply Operation");		applyOperationButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		applyOperationButton.setBorder(raisedbev);				JButton saveButton = new JButton("Save Experiment/Run lists");		saveButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		saveButton.setBorder(raisedbev);		JButton loadButton = new JButton("Load Experiment/Run lists");		loadButton.setFont(new Font("Times-Roman", Font.PLAIN, 12));		loadButton.setBorder(raisedbev);						JLabel opALabel = new JLabel("Operand A", JLabel.LEFT);		opALabel.setBorder(empty);		opALabel.setFont(new Font("Times-Roman", Font.ITALIC, 15));				JLabel opBLabel = new JLabel("Operand B", JLabel.LEFT);		opBLabel.setBorder(empty);		opBLabel.setFont(new Font("Times-Roman", Font.ITALIC, 15));				JLabel operationLabel = new JLabel("Operation", JLabel.LEFT);		operationLabel.setBorder(empty);		operationLabel.setFont(new Font("Times-Roman", Font.ITALIC, 15));				String operationStrings[] = {"Add", "Subtract", "Multiply", "Divide"};		operation = new JComboBox(operationStrings);		opASelection = new JComboBox();		opBSelection = new JComboBox();				GridBagConstraints gbc = new GridBagConstraints();		gbc.insets = new Insets(5, 5, 5, 5);				//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.WEST;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(experimentsLabel, gbc, 0, 0, 1, 1);		//**		gbc.fill = GridBagConstraints.BOTH;		gbc.anchor = GridBagConstraints.WEST;		gbc.weightx = 0.33;		gbc.weighty = 1;		addCompItem(experimentsScrollPane, gbc, 0, 1, 2, 3);		//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.SOUTH;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(addExperimentButton, gbc, 2, 1, 1, 1);		//**		//gbc.fill = GridBagConstraints.NONE;		//gbc.anchor = GridBagConstraints.CENTER;		//gbc.weightx = 0;		//gbc.weighty = 0;		//addCompItem(removeExperimentsButton, gbc, 2, 2, 1, 1);				//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.WEST;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(runsLabel, gbc, 3, 0, 1, 1);		//**		gbc.fill = GridBagConstraints.BOTH;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0.33;		gbc.weighty = 1;		addCompItem(runsScrollPane, gbc, 3, 1, 2, 3);		//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.SOUTH;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(addRunButton, gbc, 5, 1, 1, 1);		//**		//gbc.fill = GridBagConstraints.NONE;		//gbc.anchor = GridBagConstraints.CENTER;		//gbc.weightx = 0;		//gbc.weighty = 0;		//addCompItem(removeRunsButton, gbc, 5, 2, 1, 1);								//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.WEST;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(valuesLabel, gbc, 6, 0, 1, 1);		//**		gbc.fill = GridBagConstraints.BOTH;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0.33;		gbc.weighty = 1;		addCompItem(valuesScrollPane, gbc, 6, 1, 2, 3);		//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.SOUTH;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(addValuesButton, gbc, 8, 1, 1, 1);		//**		gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.SOUTH;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(applyOperationButton, gbc, 8, 3, 1, 1);														gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(opALabel, gbc, 0, 4, 2, 1);				gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(opASelection, gbc, 0, 5, 3, 1);				gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(opBLabel, gbc, 3, 4, 2, 1);				gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(opBSelection, gbc, 3, 5, 3, 1);				gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(operationLabel, gbc, 6, 4, 2, 1);				gbc.fill = GridBagConstraints.NONE;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(operation, gbc, 6, 5, 3, 1);												//**		/*gbc.fill = GridBagConstraints.BOTH;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(loadButton, gbc, 4, 3, 3, 1);		//**		gbc.fill = GridBagConstraints.BOTH;		gbc.anchor = GridBagConstraints.CENTER;		gbc.weightx = 0;		gbc.weighty = 0;		addCompItem(saveButton, gbc, 8, 3, 3, 1);*/				//Add the listeners.		//The listeners responsible for adding to the lists.		addExperimentButton.addActionListener(new ActionListener(){											public void actionPerformed(ActionEvent evt)											{												addExperimentButtonFunction();											}										});												removeExperimentsButton.addActionListener(new ActionListener(){											public void actionPerformed(ActionEvent evt)											{												removeExperimentsButtonFunction();											}										});		addRunButton.addActionListener(new ActionListener(){											public void actionPerformed(ActionEvent evt)											{												addRunButtonFunction();											}										});												removeRunsButton.addActionListener(new ActionListener(){											public void actionPerformed(ActionEvent evt)											{												removeRunsButtonFunction();											}										});		addValuesButton.addActionListener(new ActionListener(){											public void actionPerformed(ActionEvent evt)											{												addValueButtonFunction();											}										});												applyOperationButton.addActionListener(new ActionListener(){											public void actionPerformed(ActionEvent evt)											{												applyOperationButtonFunction();											}										});		//The listener responsible for listening for a selection in the server list.		experimentsList.addListSelectionListener(new ListSelectionListener(){											 public void valueChanged(ListSelectionEvent evt)											 {											 	if(!(evt.getValueIsAdjusting()))											 		populateRunsList();											 }										});												runsList.addListSelectionListener(new ListSelectionListener(){											 public void valueChanged(ListSelectionEvent evt)											 {											 	if(!(evt.getValueIsAdjusting()))											 		populateValuesList();											 }										});		valuesList.addListSelectionListener(new ListSelectionListener(){											 public void valueChanged(ListSelectionEvent evt)											 {											 	if(!(evt.getValueIsAdjusting()))											 		showValue();											 }										});											 														//Populate the Server list.		populateExperimentsList();								}		//********************	//Callback functions.	//********************	void addExperimentButtonFunction()	{		//First get the name of the new experiment.		String newExperimentName = JOptionPane.showInputDialog(this, "Please enter a new experiment name");				if(newExperimentName == null)			return;				//Check to see if this experiment name is already present before adding.		if(jRacy.experimentManager.isExperimentNamePresent(newExperimentName)){			//Pop up an error.			JOptionPane.showMessageDialog(this, "Sorry, but this experiment name is already in use!", "Input Error!"															  ,JOptionPane.ERROR_MESSAGE);		}		else{					//Ok, create a new experiment, and add it to the system.			Experiment exp = new Experiment(newExperimentName);			jRacy.experimentManager.addExperiment(exp);		}				//Now want to re-populate the experiments list.		populateExperimentsList();	}		void removeExperimentsButtonFunction()	{		//Get the currently selected items and cycle through them.		Object [] values = experimentsList.getSelectedValues();		for(int i = 0; i < values.length; i++)		{			jRacy.experimentManager.removeExperiment(values[i]);					}				//Now want to re-populate the experiments list.		populateExperimentsList();	}		void addRunButtonFunction()	{				try{			//Just add to the first experiment in the list.						Object [] values = experimentsList.getSelectedValues();			//Check to see whether an experiment is selected.			if(values.length == 0)			{				//Pop up an error.				JOptionPane.showMessageDialog(this, "Please select an experiment!", "Selection Error!"																  ,JOptionPane.ERROR_MESSAGE);				//Now just return as nothing further is needed.  The user must select an experiment				//from the experiments lists.				return;			}										Experiment exp = (Experiment) values[0];						Trial trial = null;			String tmpString1 = null;			String tmpString2 = null;			String tmpString3 = null;						//First get the name of the new run.			String newRunName = JOptionPane.showInputDialog(this, "Please enter a new run name, click ok, and then select a pprof dump file!");						//Now show a file dialog to get the file.						//Create a file chooser to allow the user to select the pprof dump file.			JFileChooser pprofDumpFileChooser = new JFileChooser();						//Set the directory to the current directory.			pprofDumpFileChooser.setCurrentDirectory(null);						//Bring up the file chooser.			int resultValue = pprofDumpFileChooser.showOpenDialog(this);						if(resultValue == JFileChooser.APPROVE_OPTION)			{				//Try and get the file name.				File file = pprofDumpFileChooser.getSelectedFile();								//Test to see if valid.				if(file != null)				{						tmpString1 = file.getCanonicalPath();					tmpString2 = jRacy.experimentManager.getPathReverse(tmpString1);					tmpString3 = newRunName + " : " + tmpString2;										//Pop up the dialog if there is already an experiment with this name.					if(exp.isTrialNamePresent(tmpString3)){						JOptionPane.showMessageDialog(this, "A run already exists with that name!", "Warning!"																		  ,JOptionPane.ERROR_MESSAGE);						return;					}																		  					trial = new Trial();					trial.setProfilePathName(tmpString1);					trial.setRunName(tmpString3);										exp.addTrial(trial);										populateRunsList();										trial.buildStaticData(true, file);											trial.showStaticMainWindow();									}				else				{					System.out.println("There was some sort of internal error!");					return;				}			}		}		catch(Exception e)		{						jRacy.systemError(e, null, "ELM01");		}	}		void removeRunsButtonFunction()	{		/*		//Get the currently selected items and cycle through them.		Object [] values = ContextList.getSelectedValues();		for(int i = 0; i < values.length; i++)		{			//Must remove the context from the ContextVector for the selected server.						//Now remove the string from the ContextList.			contextmodel.removeElement(values[i]);		}		*/	}		void addValueButtonFunction()	{				try{			//Just add to the first run in the list.						Object [] values = runsList.getSelectedValues();			//Check to see whether a run is selected.			if(values.length == 0)			{				//Pop up an error.				JOptionPane.showMessageDialog(this, "Please select a run!", "Selection Error!"																  ,JOptionPane.ERROR_MESSAGE);				//Now just return as nothing further is needed.  The user must select an experiment				//from the experiments lists.				return;			}							Trial trial = (Trial) values[0];			//Now show a file dialog to get the file.						//Create a file chooser to allow the user to select the pprof dump file.			JFileChooser pprofDumpFileChooser = new JFileChooser();						//Set the directory to the current directory.			pprofDumpFileChooser.setCurrentDirectory(null);						//Bring up the file chooser.			int resultValue = pprofDumpFileChooser.showOpenDialog(this);						if(resultValue == JFileChooser.APPROVE_OPTION)			{				//Try and get the file name.				File file = pprofDumpFileChooser.getSelectedFile();								//Test to see if valid.				if(file != null){					trial.buildStaticData(false, file);					populateValuesList();				}				else				{					System.out.println("There was some sort of internal error!");					return;				}			}						trial.getSystemEvents().updateRegisteredObjects("dataEvent");		}		catch(Exception e)		{						jRacy.systemError(e, null, "ELM02");		}	}		void applyOperationButtonFunction()	{				try{						//Get the selected run.			Object [] values = runsList.getSelectedValues();			Trial trial = (Trial) values[0];						int tmpInt1 = opASelection.getSelectedIndex();			int tmpInt2 = opBSelection.getSelectedIndex();						String tmpString1 = (String) valuesModel.elementAt(tmpInt1);			tmpString1 = tmpString1.substring((tmpString1.indexOf('-')) + 2);			String tmpString2 = (String) valuesModel.elementAt(tmpInt2);			tmpString2 = tmpString2.substring((tmpString2.indexOf('-')) + 2);						String tmpString3 = (String) operation.getSelectedItem();						trial.applyOperation(tmpString1, tmpString2, tmpString3);						populateValuesList();						trial.getSystemEvents().updateRegisteredObjects("dataEvent");												}		catch(Exception e)		{						jRacy.systemError(e, null, "ELM03");		}	}		void showValue()	{				try{			//Get the selected run.			Object [] values1 = runsList.getSelectedValues();			Object [] values2 = valuesList.getSelectedValues();						if((values1.length != 0) && (values2.length != 0))			{				Trial trial = (Trial) values1[0];				String tmpString = (String) values2[0];				tmpString = tmpString.substring((tmpString.indexOf('-')) + 2);				trial.setCurRunValLoc(tmpString);				trial.getSystemEvents().updateRegisteredObjects("dataEvent");			}		}		catch(Exception e){			jRacy.systemError(e, null, "ELM04");		}	}		void selectValueButtonFunction()	{		//Get the selected run.		Object [] values1 = runsList.getSelectedValues();		Object [] values2 = valuesList.getSelectedValues();				if((values1.length == 0) || (values2.length == 0))		{			//Pop up an error.			JOptionPane.showMessageDialog(this, "Please select a value!", "Selection Error!"															  ,JOptionPane.ERROR_MESSAGE);			//Now just return as nothing further is needed.  The user must select an experiment			//from the experiments lists.			return;		}				Trial trial = (Trial) values1[0];		String tmpString = (String) values2[0];		trial.setCurRunValLoc(tmpString);		trial.getSystemEvents().updateRegisteredObjects("dataEvent");	}		void populateRunsList()	{		//Get the currently selected server items.		Object [] values = experimentsList.getSelectedValues();		if(values.length == 0)			return;				Experiment exp = (Experiment) values[0];				runsModel.clear();		valuesModel.clear();				for(Enumeration e = (exp.getTrials()).elements(); e.hasMoreElements() ;)		{			Trial trial = (Trial) e.nextElement();			runsModel.addElement(trial);		}	}		void populateValuesList(){			//Get the currently selected server items.		Object [] values = runsList.getSelectedValues();		if(values.length == 0)			return;					Trial trial = (Trial) values[0];				valuesModel.clear();				opASelection.removeAllItems();		opBSelection.removeAllItems();				int counter = 0;				for(Enumeration e = (trial.getRunValueNameList()).elements(); e.hasMoreElements() ;)		{			String trialName = (String) e.nextElement();			String tmpString1 = counter + " - " + trialName;			String tmpString2 = "Pos: " + counter;									valuesModel.addElement(tmpString1);						opASelection.addItem(tmpString2);			opBSelection.addItem(tmpString2);						counter++;					}			}		//********************	//End - Callback functions.	//********************		void populateExperimentsList()	{		experimentsModel.clear();				for(Enumeration e = (jRacy.experimentManager.getExperimentList()).elements(); e.hasMoreElements() ;)		{			Experiment exp = (Experiment) e.nextElement();			experimentsModel.addElement(exp);		}	}		//******************************	//Event listener code!!	//******************************		//ActionListener code.	public void actionPerformed(ActionEvent evt)	{		try{			Object EventSrc = evt.getSource();						if(EventSrc instanceof JMenuItem)			{				String arg = evt.getActionCommand();								if(arg.equals("Exit jRacy!"))				{					setVisible(false);					dispose();					System.exit(0);				}					else if(arg.equals("Close Experiment Manager"))				{					if(!(jRacy.runHasBeenOpened)){						setVisible(false);						dispose();						System.out.println("Quiting jRacy!");						System.exit(0);					}					else{						dispose();					}				}				else if(arg.equals("About Racy"))				{					JOptionPane.showMessageDialog(this, jRacy.getInfoString());				}				else if(arg.equals("Show Help Window"))				{					//Show the jRacy help window.					jRacy.helpWindow.clearText();					jRacy.helpWindow.show();										jRacy.helpWindow.writeText("This is the experiment manager window.");					jRacy.helpWindow.writeText("");					jRacy.helpWindow.writeText("You can create an experiment, and then add separate runs,.");					jRacy.helpWindow.writeText("which may contain one or more values (gettimeofday, cache misses, etc.");					jRacy.helpWindow.writeText("You can also derive new metrics in this window.");					jRacy.helpWindow.writeText("");					jRacy.helpWindow.writeText("Please see jRacy's documentation for more information.");				}			}		}		catch(Exception e)		{			jRacy.systemError(e, null, "ELM05");		}	}		//Respond correctly when this window is closed.	void thisWindowClosing(java.awt.event.WindowEvent e)	{		closeThisWindow();	}		void closeThisWindow()	{			try		{			if(jRacy.debugIsOn)			{				System.out.println("------------------------");				System.out.println("Experiment List Manager Window is closing!");				System.out.println("Clearing resourses for this window.");			}						setVisible(false);			dispose();		}		catch(Exception e)		{			jRacy.systemError(e, null, "ELM06");		}	}		private void addCompItem(Component c, GridBagConstraints gbc, int x, int y, int w, int h)	{		gbc.gridx = x;		gbc.gridy = y;		gbc.gridwidth = w;		gbc.gridheight = h;				getContentPane().add(c, gbc);	}		//Instance data.	private DefaultListModel experimentsModel;	private DefaultListModel runsModel;	private DefaultListModel valuesModel;	private JList experimentsList;	private JList runsList;	private JList valuesList;		private JComboBox operation;	private JComboBox opASelection;	private JComboBox opBSelection;	}