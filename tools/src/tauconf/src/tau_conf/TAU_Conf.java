/*
 * TAU_Conf.java
 *
 * Created on June 10, 2005, 8:58 AM
 */

package tau_conf;
import javax.swing.*;
import java.io.*;
/**
 *
 * @author  wspear
 */
public class TAU_Conf extends javax.swing.JFrame {
    
    /** Creates new form TAU_Conf */
    public TAU_Conf() {
        initComponents();
    }
    
    String configureline = "./configure";
    String instline = "./installtau";
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        profstatsCheckBox = new javax.swing.JCheckBox();
        jFileChooser1 = new javax.swing.JFileChooser();
        tabPane = new javax.swing.JTabbedPane();
        installationPanel = new javax.swing.JPanel();
        compilerPanel = new javax.swing.JPanel();
        cccompLabel = new javax.swing.JLabel();
        cppcompLabel = new javax.swing.JLabel();
        fortrancompLabel = new javax.swing.JLabel();
        String[] ccCompStrings = { "Default","cc","gcc","KCC","pgcc","guidec","xlc","ecc","pathcc" };
        ccCombo = new javax.swing.JComboBox(ccCompStrings);
        String[] cppCompStrings = { "Default","CC","KCC","g++","xlC","cxx","pgCC","FCC","guidec++","aCC","c++","ecpc","icpc","pathCC" };
        cppCombo = new javax.swing.JComboBox(cppCompStrings);
        String[] fortranCompStrings = {"Default","gnu","sgi","ibm","ibm64","hp","cray","pgi","absoft","fujitsu","sun","compaq","kai","nec","hitachi","intel","absoft","lahey","nagware","pathscale"};
        fortranCombo = new javax.swing.JComboBox(fortranCompStrings);
        defccTextField = new javax.swing.JTextField();
        defcppTextField = new javax.swing.JTextField();
        deffortranTextField = new javax.swing.JTextField();
        defccCheckBox = new javax.swing.JCheckBox();
        defcppCheckBox = new javax.swing.JCheckBox();
        deffortranCheckBox = new javax.swing.JCheckBox();
        cQjButton = new javax.swing.JButton();
        cppQjButton = new javax.swing.JButton();
        fortQjButton = new javax.swing.JButton();
        pdtPanel = new javax.swing.JPanel();
        pdtCheckBox = new javax.swing.JCheckBox();
        pdtCompilerLabel = new javax.swing.JLabel();
        String[] pdtcCompStrings = { "Default","CC","KCC","g++","xlC","cxx","pgCC","FCC","guidec++","aCC","c++","ecpc","icpc" };
        pdtcppCombo = new javax.swing.JComboBox(pdtcCompStrings);
        pdtdirField = new javax.swing.JTextField();
        pdtButton = new javax.swing.JButton();
        defpdtCheckBox = new javax.swing.JCheckBox();
        defpdtTextField = new javax.swing.JTextField();
        pdtQjButton = new javax.swing.JButton();
        pdtcppQjButton = new javax.swing.JButton();
        papiPanel = new javax.swing.JPanel();
        papiCheckBox = new javax.swing.JCheckBox();
        papiTextField = new javax.swing.JTextField();
        papiwallCheckBox = new javax.swing.JCheckBox();
        papivirtCheckBox = new javax.swing.JCheckBox();
        multiplecountCheckBox = new javax.swing.JCheckBox();
        papiButton = new javax.swing.JButton();
        papiQjButton = new javax.swing.JButton();
        papiwallQjButton = new javax.swing.JButton();
        papivirtQjButton = new javax.swing.JButton();
        multcountQjButton = new javax.swing.JButton();
        messagePannel = new javax.swing.JPanel();
        mpiPanel = new javax.swing.JPanel();
        mpiCheckBox = new javax.swing.JCheckBox();
        mpiincCheckBox = new javax.swing.JCheckBox();
        mpiincTextField = new javax.swing.JTextField();
        mpilibCheckBox = new javax.swing.JCheckBox();
        mpilibTextField = new javax.swing.JTextField();
        altmpiCheckBox = new javax.swing.JCheckBox();
        altmpiTextField = new javax.swing.JTextField();
        tagCheckBox = new javax.swing.JCheckBox();
        tagTextField = new javax.swing.JTextField();
        nocomCheckBox = new javax.swing.JCheckBox();
        mpitraceCheckBox = new javax.swing.JCheckBox();
        mpiincButton = new javax.swing.JButton();
        mpilibButton = new javax.swing.JButton();
        altmpiButton = new javax.swing.JButton();
        mpiQjButton = new javax.swing.JButton();
        mpiincQjButton = new javax.swing.JButton();
        mpilibQjButton = new javax.swing.JButton();
        altmpiQjButton = new javax.swing.JButton();
        tagQjButton = new javax.swing.JButton();
        nocommQjButton = new javax.swing.JButton();
        mpitraceQjButton = new javax.swing.JButton();
        shmemPanel = new javax.swing.JPanel();
        shmemCheckBox = new javax.swing.JCheckBox();
        shmemincCheckBox = new javax.swing.JCheckBox();
        shmemincTextField = new javax.swing.JTextField();
        shmemlibCheckBox = new javax.swing.JCheckBox();
        shmemlibTextField = new javax.swing.JTextField();
        altshmemCheckBox = new javax.swing.JCheckBox();
        altshmemTextField = new javax.swing.JTextField();
        shmemincButton = new javax.swing.JButton();
        shmemlibButton = new javax.swing.JButton();
        altshmemButton = new javax.swing.JButton();
        shmemQjButton = new javax.swing.JButton();
        shmemincQjButton = new javax.swing.JButton();
        shmemlibQjButton = new javax.swing.JButton();
        altshmemQjButton = new javax.swing.JButton();
        outputPanel = new javax.swing.JPanel();
        profilePanel = new javax.swing.JPanel();
        profileCheckBox = new javax.swing.JCheckBox();
        compensateCheckBox = new javax.swing.JCheckBox();
        profcallpathCheckBox = new javax.swing.JCheckBox();
        profheadroomCheckBox = new javax.swing.JCheckBox();
        profmemoryCheckBox = new javax.swing.JCheckBox();
        memorypQjButton = new javax.swing.JButton();
        profileQjButton = new javax.swing.JButton();
        compensateQjButton = new javax.swing.JButton();
        callpathQjButton = new javax.swing.JButton();
        headroomQjButton = new javax.swing.JButton();
        tracePanel = new javax.swing.JPanel();
        traceCheckBox = new javax.swing.JCheckBox();
        epilogCheckBox = new javax.swing.JCheckBox();
        epilogTextField = new javax.swing.JTextField();
        slog2CheckBox = new javax.swing.JCheckBox();
        slog2exCheckBox = new javax.swing.JCheckBox();
        slog2TextField = new javax.swing.JTextField();
        vtfCheckBox = new javax.swing.JCheckBox();
        vtfTextField = new javax.swing.JTextField();
        epilogButton = new javax.swing.JButton();
        slog2Button = new javax.swing.JButton();
        vtfButton = new javax.swing.JButton();
        traceQjButton = new javax.swing.JButton();
        epilogQjButton = new javax.swing.JButton();
        slog2QjButton = new javax.swing.JButton();
        vtfQjButton = new javax.swing.JButton();
        slog2eQjButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        profphaseCheckBox = new javax.swing.JCheckBox();
        depthlimitCheckBox = new javax.swing.JCheckBox();
        phaseQjButton = new javax.swing.JButton();
        depthQjButton = new javax.swing.JButton();
        threadPanel = new javax.swing.JPanel();
        ompPanel = new javax.swing.JPanel();
        ompCheckBox = new javax.swing.JCheckBox();
        opariCheckBox = new javax.swing.JCheckBox();
        opariTextField = new javax.swing.JTextField();
        opariregionCheckBox = new javax.swing.JCheckBox();
        opariconstructCheckBox = new javax.swing.JCheckBox();
        opariButton = new javax.swing.JButton();
        openmpQjButton = new javax.swing.JButton();
        opariQjButton = new javax.swing.JButton();
        opariregionQjButton = new javax.swing.JButton();
        opariconstructQjButton = new javax.swing.JButton();
        charmPanel = new javax.swing.JPanel();
        charmCheckBox = new javax.swing.JCheckBox();
        charmTextField = new javax.swing.JTextField();
        charmButton = new javax.swing.JButton();
        charmQjButton = new javax.swing.JButton();
        tulipthreadsPanel = new javax.swing.JPanel();
        tulipCheckBox = new javax.swing.JCheckBox();
        tulipTextField = new javax.swing.JTextField();
        smartCheckBox = new javax.swing.JCheckBox();
        tulipButton = new javax.swing.JButton();
        tulipQjButton = new javax.swing.JButton();
        smartQjButton = new javax.swing.JButton();
        pthreadsPanel = new javax.swing.JPanel();
        pthreadsCheckBox = new javax.swing.JCheckBox();
        pthreadsQjButton = new javax.swing.JButton();
        sprocPanel = new javax.swing.JPanel();
        sprocCheckBox = new javax.swing.JCheckBox();
        sprocQjButton = new javax.swing.JButton();
        generalPanel = new javax.swing.JPanel();
        dyninstPanel = new javax.swing.JPanel();
        dyninstCheckBox = new javax.swing.JCheckBox();
        dyninstTextField = new javax.swing.JTextField();
        dyninstButton = new javax.swing.JButton();
        dyninstQjButton = new javax.swing.JButton();
        pclPanel = new javax.swing.JPanel();
        pclCheckBox = new javax.swing.JCheckBox();
        pclTextField = new javax.swing.JTextField();
        pclButton = new javax.swing.JButton();
        pclQjButton = new javax.swing.JButton();
        timePanel = new javax.swing.JPanel();
        cputimeCheckBox = new javax.swing.JCheckBox();
        craytimeCheckBox = new javax.swing.JCheckBox();
        linuxtimeCheckBox = new javax.swing.JCheckBox();
        sgitimeCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        cputQjButton = new javax.swing.JButton();
        craytQjButton = new javax.swing.JButton();
        linuxtQjButton = new javax.swing.JButton();
        sgitQjButton = new javax.swing.JButton();
        musePanel = new javax.swing.JPanel();
        museCheckBox = new javax.swing.JCheckBox();
        museeventCheckBox = new javax.swing.JCheckBox();
        musemultCheckBox = new javax.swing.JCheckBox();
        musemQjButton = new javax.swing.JButton();
        museeQjButton = new javax.swing.JButton();
        museQjButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        pythonPanel = new javax.swing.JPanel();
        usepythonCheckbox = new javax.swing.JCheckBox();
        pythonincField = new javax.swing.JTextField();
        pythonlibCheckBox = new javax.swing.JCheckBox();
        pythonlibField = new javax.swing.JTextField();
        pythonincButton = new javax.swing.JButton();
        pythonlibButton = new javax.swing.JButton();
        pythonincQjButton = new javax.swing.JButton();
        pythonlibQjButton = new javax.swing.JButton();
        jdkPanel = new javax.swing.JPanel();
        usejdkCheckBox = new javax.swing.JCheckBox();
        jdkField = new javax.swing.JTextField();
        usejavatimersCheckBox = new javax.swing.JCheckBox();
        jdkButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jdkQjButton = new javax.swing.JButton();
        javatQjButton = new javax.swing.JButton();
        dirarcPanel = new javax.swing.JPanel();
        installdirCheckBox = new javax.swing.JCheckBox();
        installdirField = new javax.swing.JTextField();
        archdirCheckBox = new javax.swing.JCheckBox();
        archdirField = new javax.swing.JTextField();
        archLabel = new javax.swing.JLabel();
        String[] archStrings = { "Default","bgl","ibm64","ibm64linux","solaris2-64","sgin32","sgi64","sgio32" };
        archCombo = new javax.swing.JComboBox(archStrings);
        useroptCheckBox = new javax.swing.JCheckBox();
        useroptField = new javax.swing.JTextField();
        noexceptCheckBox = new javax.swing.JCheckBox();
        installdirButton = new javax.swing.JButton();
        archdirButton = new javax.swing.JButton();
        custinstQjButton = new javax.swing.JButton();
        custarchQjButton = new javax.swing.JButton();
        archQjButton = new javax.swing.JButton();
        useroptQjButton = new javax.swing.JButton();
        noexQjButton = new javax.swing.JButton();
        commandPanel = new javax.swing.JPanel();
        confButton = new javax.swing.JButton();
        confjScrollPane = new javax.swing.JScrollPane(commandTextArea);
        commandTextArea = new javax.swing.JTextArea();
        commandTextArea.setText(configureline);
        makejButton = new javax.swing.JButton();
        instjScrollPane = new javax.swing.JScrollPane(commandTextArea);
        instTextArea = new javax.swing.JTextArea();
        commandTextArea.setText(configureline);
        instButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        profstatsCheckBox.setText("Profile Stats [-PROFILESTATS]");
        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TAU_Conf");
        setResizable(false);
        installationPanel.setLayout(null);

        compilerPanel.setLayout(null);

        compilerPanel.setBorder(new javax.swing.border.EtchedBorder());
        cccompLabel.setText("C Compiler [-cc=]:");
        compilerPanel.add(cccompLabel);
        cccompLabel.setBounds(10, 10, 280, 15);

        cppcompLabel.setText("C++ Compiler [-c++=]:");
        compilerPanel.add(cppcompLabel);
        cppcompLabel.setBounds(10, 70, 280, 15);

        fortrancompLabel.setText("Fortran Compiler [-fortran=]:");
        compilerPanel.add(fortrancompLabel);
        fortrancompLabel.setBounds(10, 130, 280, 15);

        ccCombo.setToolTipText("Specifies the name of the C compiler");
        ccCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ccComboActionPerformed(evt);
            }
        });

        compilerPanel.add(ccCombo);
        ccCombo.setBounds(300, 10, 90, 24);

        cppCombo.setToolTipText("Specifies the name of the C++ compiler");
        cppCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cppComboActionPerformed(evt);
            }
        });

        compilerPanel.add(cppCombo);
        cppCombo.setBounds(300, 70, 90, 24);

        fortranCombo.setToolTipText("Specifies the name of the Fortran compiler");
        fortranCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fortranComboActionPerformed(evt);
            }
        });

        compilerPanel.add(fortranCombo);
        fortranCombo.setBounds(300, 130, 90, 24);

        defccTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        defccTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defccTextFieldActionPerformed(evt);
            }
        });

        compilerPanel.add(defccTextField);
        defccTextField.setBounds(300, 40, 200, 19);

        defcppTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        defcppTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defcppTextFieldActionPerformed(evt);
            }
        });

        compilerPanel.add(defcppTextField);
        defcppTextField.setBounds(300, 100, 200, 19);

        deffortranTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        deffortranTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deffortranTextFieldActionPerformed(evt);
            }
        });

        compilerPanel.add(deffortranTextField);
        deffortranTextField.setBounds(300, 160, 200, 19);

        defccCheckBox.setText("User Defined");
        defccCheckBox.setToolTipText("Specify an alternate C compiler (e.g. *xlc*)");
        defccCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                defccCheckBoxItemStateChanged(evt);
            }
        });

        compilerPanel.add(defccCheckBox);
        defccCheckBox.setBounds(10, 40, 280, 23);

        defcppCheckBox.setText("User Defined");
        defcppCheckBox.setToolTipText("Specify an alternate C++ compiler (e.g. *xlC*)");
        defcppCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                defcppCheckBoxItemStateChanged(evt);
            }
        });

        compilerPanel.add(defcppCheckBox);
        defcppCheckBox.setBounds(10, 100, 280, 23);

        deffortranCheckBox.setText("User Defined");
        deffortranCheckBox.setToolTipText("Specify an alternate Fortran compiler");
        deffortranCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                deffortranCheckBoxItemStateChanged(evt);
            }
        });

        compilerPanel.add(deffortranCheckBox);
        deffortranCheckBox.setBounds(10, 160, 280, 23);

        cQjButton.setText("?");
        cQjButton.setToolTipText("More Info");
        cQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        cQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cQjButtonActionPerformed(evt);
            }
        });

        compilerPanel.add(cQjButton);
        cQjButton.setBounds(600, 10, 20, 20);

        cppQjButton.setText("?");
        cppQjButton.setToolTipText("More Info");
        cppQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        cppQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cppQjButtonActionPerformed(evt);
            }
        });

        compilerPanel.add(cppQjButton);
        cppQjButton.setBounds(600, 70, 20, 20);

        fortQjButton.setText("?");
        fortQjButton.setToolTipText("More Info");
        fortQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        fortQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fortQjButtonActionPerformed(evt);
            }
        });

        compilerPanel.add(fortQjButton);
        fortQjButton.setBounds(600, 130, 20, 20);

        installationPanel.add(compilerPanel);
        compilerPanel.setBounds(10, 10, 630, 190);

        pdtPanel.setLayout(null);

        pdtPanel.setBorder(new javax.swing.border.EtchedBorder());
        pdtCheckBox.setText("PDT [-pdt=]:");
        pdtCheckBox.setToolTipText("Specify location of PDT (Program Database Toolkit)");
        pdtCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pdtCheckBoxStateChanged(evt);
            }
        });

        pdtPanel.add(pdtCheckBox);
        pdtCheckBox.setBounds(5, 4, 290, 23);

        pdtCompilerLabel.setText("PDT C++ Compiler [-pdt_c++=]:");
        pdtPanel.add(pdtCompilerLabel);
        pdtCompilerLabel.setBounds(10, 50, 280, 15);

        pdtcppCombo.setToolTipText("Specify a different PDT C++ compiler");
        pdtcppCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdtcppComboActionPerformed(evt);
            }
        });

        pdtPanel.add(pdtcppCombo);
        pdtcppCombo.setBounds(300, 50, 90, 24);

        pdtdirField.setPreferredSize(new java.awt.Dimension(200, 19));
        pdtdirField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdtdirFieldActionPerformed(evt);
            }
        });

        pdtPanel.add(pdtdirField);
        pdtdirField.setBounds(300, 10, 200, 19);

        pdtButton.setText("Browse");
        pdtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdtButtonActionPerformed(evt);
            }
        });

        pdtPanel.add(pdtButton);
        pdtButton.setBounds(510, 10, 80, 25);

        defpdtCheckBox.setText("User Defined");
        defpdtCheckBox.setToolTipText("Specify an alternate C++ compiler (e.g. *xlC*)");
        defpdtCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                defpdtCheckBoxItemStateChanged(evt);
            }
        });

        pdtPanel.add(defpdtCheckBox);
        defpdtCheckBox.setBounds(10, 80, 280, 23);

        defpdtTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        defpdtTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defpdtTextFieldActionPerformed(evt);
            }
        });

        pdtPanel.add(defpdtTextField);
        defpdtTextField.setBounds(300, 80, 200, 19);

        pdtQjButton.setText("?");
        pdtQjButton.setToolTipText("More Info");
        pdtQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pdtQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdtQjButtonActionPerformed(evt);
            }
        });

        pdtPanel.add(pdtQjButton);
        pdtQjButton.setBounds(600, 10, 20, 20);

        pdtcppQjButton.setText("?");
        pdtcppQjButton.setToolTipText("More Info");
        pdtcppQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pdtcppQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdtcppQjButtonActionPerformed(evt);
            }
        });

        pdtPanel.add(pdtcppQjButton);
        pdtcppQjButton.setBounds(600, 50, 20, 20);

        installationPanel.add(pdtPanel);
        pdtPanel.setBounds(10, 210, 630, 110);

        papiPanel.setLayout(null);

        papiPanel.setBorder(new javax.swing.border.EtchedBorder());
        papiCheckBox.setText("PAPI [-papi=]:");
        papiCheckBox.setToolTipText("Specify location of PAPI (Performance API)");
        papiCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                papiCheckBoxStateChanged(evt);
            }
        });

        papiPanel.add(papiCheckBox);
        papiCheckBox.setBounds(10, 10, 290, 23);

        papiTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        papiTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                papiTextFieldActionPerformed(evt);
            }
        });

        papiPanel.add(papiTextField);
        papiTextField.setBounds(300, 10, 200, 19);

        papiwallCheckBox.setText("PAPI Wallclock [-PAPIWALLCLOCK]");
        papiwallCheckBox.setToolTipText("Use PAPI to access wallclock time. Needs -papi");
        papiwallCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                papiwallCheckBoxStateChanged(evt);
            }
        });

        papiPanel.add(papiwallCheckBox);
        papiwallCheckBox.setBounds(20, 30, 350, 23);

        papivirtCheckBox.setText("PAPI Virtual [-PAPIVIRTUAL]");
        papivirtCheckBox.setToolTipText("Use PAPI for virtual (user) time calculation");
        papivirtCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                papivirtCheckBoxStateChanged(evt);
            }
        });

        papiPanel.add(papivirtCheckBox);
        papivirtCheckBox.setBounds(20, 50, 330, 23);

        multiplecountCheckBox.setText("Multiple Counters [-MULTIPLECOUNTERS]");
        multiplecountCheckBox.setToolTipText("Use multiple hardware counters and time");
        multiplecountCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                multiplecountCheckBoxStateChanged(evt);
            }
        });

        papiPanel.add(multiplecountCheckBox);
        multiplecountCheckBox.setBounds(10, 80, 330, 23);

        papiButton.setText("Browse");
        papiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                papiButtonActionPerformed(evt);
            }
        });

        papiPanel.add(papiButton);
        papiButton.setBounds(510, 10, 80, 25);

        papiQjButton.setText("?");
        papiQjButton.setToolTipText("More Info");
        papiQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        papiQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                papiQjButtonActionPerformed(evt);
            }
        });

        papiPanel.add(papiQjButton);
        papiQjButton.setBounds(600, 10, 20, 20);

        papiwallQjButton.setText("?");
        papiwallQjButton.setToolTipText("More Info");
        papiwallQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        papiwallQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                papiwallQjButtonActionPerformed(evt);
            }
        });

        papiPanel.add(papiwallQjButton);
        papiwallQjButton.setBounds(600, 30, 20, 20);

        papivirtQjButton.setText("?");
        papivirtQjButton.setToolTipText("More Info");
        papivirtQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        papivirtQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                papivirtQjButtonActionPerformed(evt);
            }
        });

        papiPanel.add(papivirtQjButton);
        papivirtQjButton.setBounds(600, 50, 20, 20);

        multcountQjButton.setText("?");
        multcountQjButton.setToolTipText("More Info");
        multcountQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        multcountQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multcountQjButtonActionPerformed(evt);
            }
        });

        papiPanel.add(multcountQjButton);
        multcountQjButton.setBounds(600, 80, 20, 20);

        installationPanel.add(papiPanel);
        papiPanel.setBounds(10, 330, 630, 110);

        tabPane.addTab("Compilers", installationPanel);

        messagePannel.setLayout(null);

        messagePannel.setMinimumSize(new java.awt.Dimension(600, 300));
        messagePannel.setPreferredSize(new java.awt.Dimension(600, 300));
        mpiPanel.setLayout(null);

        mpiPanel.setBorder(new javax.swing.border.EtchedBorder());
        mpiCheckBox.setText("MPI [-mpi]");
        mpiCheckBox.setToolTipText("Specify use of TAU MPI wrapper library");
        mpiCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpiCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(mpiCheckBox);
        mpiCheckBox.setBounds(10, 10, 290, 23);

        mpiincCheckBox.setText("MPI Includes  [-mpiinc=]:");
        mpiincCheckBox.setToolTipText("Specify location of MPI include dir and use the TAU MPI Profiling and Tracing Interface");
        mpiincCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpiincCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(mpiincCheckBox);
        mpiincCheckBox.setBounds(10, 40, 290, 23);

        mpiincTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        mpiincTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpiincTextFieldActionPerformed(evt);
            }
        });

        mpiPanel.add(mpiincTextField);
        mpiincTextField.setBounds(300, 40, 200, 19);

        mpilibCheckBox.setText("MPI Librararies [-mpilib=]:");
        mpilibCheckBox.setToolTipText("Specify location of MPI library dir and use the TAU MPI Profiling and Tracing Interface.");
        mpilibCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpilibCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(mpilibCheckBox);
        mpilibCheckBox.setBounds(10, 70, 290, 23);

        mpilibTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        mpilibTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpilibTextFieldActionPerformed(evt);
            }
        });

        mpiPanel.add(mpilibTextField);
        mpilibTextField.setBounds(300, 70, 200, 19);

        altmpiCheckBox.setToolTipText("Specify a different MPI library e.g., -mpilibrary=-lmpi_r");
        altmpiCheckBox.setLabel("Alt. MPI LIbrary [-mpilibrary=]:");
        altmpiCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                altmpiCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(altmpiCheckBox);
        altmpiCheckBox.setBounds(10, 100, 290, 23);

        altmpiTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        altmpiTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altmpiTextFieldActionPerformed(evt);
            }
        });

        mpiPanel.add(altmpiTextField);
        altmpiTextField.setBounds(300, 100, 200, 19);

        tagCheckBox.setText("Tag [-tag=]:");
        tagCheckBox.setToolTipText("Specify a tag to identify the installation");
        tagCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tagCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(tagCheckBox);
        tagCheckBox.setBounds(10, 130, 290, 23);

        tagTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        tagTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagTextFieldActionPerformed(evt);
            }
        });

        mpiPanel.add(tagTextField);
        tagTextField.setBounds(300, 130, 200, 19);

        nocomCheckBox.setText("nocomm [-nocomm]");
        nocomCheckBox.setToolTipText("Disable tracking communication events in MPI library");
        nocomCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nocomCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(nocomCheckBox);
        nocomCheckBox.setBounds(10, 160, 290, 23);

        mpitraceCheckBox.setText("MPI Trace [-MPITRACE]");
        mpitraceCheckBox.setToolTipText("Generate event traces for MPI events and their ancestors");
        mpitraceCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpitraceCheckBoxStateChanged(evt);
            }
        });

        mpiPanel.add(mpitraceCheckBox);
        mpitraceCheckBox.setBounds(10, 190, 290, 23);

        mpiincButton.setText("Browse");
        mpiincButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpiincButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(mpiincButton);
        mpiincButton.setBounds(510, 40, 80, 25);

        mpilibButton.setText("Browse");
        mpilibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpilibButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(mpilibButton);
        mpilibButton.setBounds(510, 70, 80, 25);

        altmpiButton.setText("Browse");
        altmpiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altmpiButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(altmpiButton);
        altmpiButton.setBounds(510, 100, 80, 25);

        mpiQjButton.setText("?");
        mpiQjButton.setToolTipText("More Info");
        mpiQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        mpiQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpiQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(mpiQjButton);
        mpiQjButton.setBounds(600, 10, 20, 20);

        mpiincQjButton.setText("?");
        mpiincQjButton.setToolTipText("More Info");
        mpiincQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        mpiincQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpiincQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(mpiincQjButton);
        mpiincQjButton.setBounds(600, 40, 20, 20);

        mpilibQjButton.setText("?");
        mpilibQjButton.setToolTipText("More Info");
        mpilibQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        mpilibQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpilibQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(mpilibQjButton);
        mpilibQjButton.setBounds(600, 70, 20, 20);

        altmpiQjButton.setText("?");
        altmpiQjButton.setToolTipText("More Info");
        altmpiQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        altmpiQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altmpiQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(altmpiQjButton);
        altmpiQjButton.setBounds(600, 100, 20, 20);

        tagQjButton.setText("?");
        tagQjButton.setToolTipText("More Info");
        tagQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        tagQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(tagQjButton);
        tagQjButton.setBounds(600, 130, 20, 20);

        nocommQjButton.setText("?");
        nocommQjButton.setToolTipText("More Info");
        nocommQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        nocommQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nocommQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(nocommQjButton);
        nocommQjButton.setBounds(600, 160, 20, 20);

        mpitraceQjButton.setText("?");
        mpitraceQjButton.setToolTipText("More Info");
        mpitraceQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        mpitraceQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpitraceQjButtonActionPerformed(evt);
            }
        });

        mpiPanel.add(mpitraceQjButton);
        mpitraceQjButton.setBounds(600, 190, 20, 20);

        messagePannel.add(mpiPanel);
        mpiPanel.setBounds(10, 10, 630, 220);

        shmemPanel.setLayout(null);

        shmemPanel.setBorder(new javax.swing.border.EtchedBorder());
        shmemCheckBox.setText("SHMEM [-shmem]");
        shmemCheckBox.setToolTipText("Specify use of TAU SHMEM wrapper library");
        shmemCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shmemCheckBoxStateChanged(evt);
            }
        });

        shmemPanel.add(shmemCheckBox);
        shmemCheckBox.setBounds(10, 10, 290, 23);

        shmemincCheckBox.setText("Shmem Includes [-shmeminc=]:");
        shmemincCheckBox.setToolTipText("Specify location of SHMEM include dir and use the TAU SHMEM Profiling and Tracing Interface");
        shmemincCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shmemincCheckBoxStateChanged(evt);
            }
        });

        shmemPanel.add(shmemincCheckBox);
        shmemincCheckBox.setBounds(10, 40, 290, 23);

        shmemincTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        shmemincTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemincTextFieldActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemincTextField);
        shmemincTextField.setBounds(300, 40, 200, 19);

        shmemlibCheckBox.setText("Shmem Libraries [-shmemlib=]:");
        shmemlibCheckBox.setToolTipText("Specify location of SHMEM library dir and use the TAU MPI Profiling and Tracing Interface");
        shmemlibCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shmemlibCheckBoxStateChanged(evt);
            }
        });

        shmemPanel.add(shmemlibCheckBox);
        shmemlibCheckBox.setBounds(10, 70, 290, 23);

        shmemlibTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        shmemlibTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemlibTextFieldActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemlibTextField);
        shmemlibTextField.setBounds(300, 70, 200, 19);

        altshmemCheckBox.setText("Alt. Shmem Library [-shmemlibrary=]:");
        altshmemCheckBox.setToolTipText("Specify a different SHMEM library e.g., -shmemlibrary=-lsmac");
        altshmemCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                altshmemCheckBoxStateChanged(evt);
            }
        });

        shmemPanel.add(altshmemCheckBox);
        altshmemCheckBox.setBounds(10, 100, 290, 23);

        altshmemTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        altshmemTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altshmemTextFieldActionPerformed(evt);
            }
        });

        shmemPanel.add(altshmemTextField);
        altshmemTextField.setBounds(300, 100, 200, 19);

        shmemincButton.setText("Browse");
        shmemincButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemincButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemincButton);
        shmemincButton.setBounds(510, 40, 80, 25);

        shmemlibButton.setText("Browse");
        shmemlibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemlibButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemlibButton);
        shmemlibButton.setBounds(510, 70, 80, 25);

        altshmemButton.setText("Browse");
        altshmemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altshmemButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(altshmemButton);
        altshmemButton.setBounds(510, 100, 80, 25);

        shmemQjButton.setText("?");
        shmemQjButton.setToolTipText("More Info");
        shmemQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        shmemQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemQjButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemQjButton);
        shmemQjButton.setBounds(603, 10, 20, 20);

        shmemincQjButton.setText("?");
        shmemincQjButton.setToolTipText("More Info");
        shmemincQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        shmemincQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemincQjButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemincQjButton);
        shmemincQjButton.setBounds(603, 40, 20, 20);

        shmemlibQjButton.setText("?");
        shmemlibQjButton.setToolTipText("More Info");
        shmemlibQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        shmemlibQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shmemlibQjButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(shmemlibQjButton);
        shmemlibQjButton.setBounds(603, 70, 20, 20);

        altshmemQjButton.setText("?");
        altshmemQjButton.setToolTipText("More Info");
        altshmemQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        altshmemQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altshmemQjButtonActionPerformed(evt);
            }
        });

        shmemPanel.add(altshmemQjButton);
        altshmemQjButton.setBounds(603, 100, 20, 20);

        messagePannel.add(shmemPanel);
        shmemPanel.setBounds(10, 240, 630, 130);

        tabPane.addTab("Message Passing", messagePannel);

        outputPanel.setLayout(null);

        profilePanel.setLayout(null);

        profilePanel.setBorder(new javax.swing.border.EtchedBorder());
        profileCheckBox.setSelected(true);
        profileCheckBox.setText("Profile [-PROFILE]");
        profileCheckBox.setToolTipText("Generate profiles (summary statistics) (default)");
        profileCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                profileCheckBoxStateChanged(evt);
            }
        });

        profilePanel.add(profileCheckBox);
        profileCheckBox.setBounds(10, 10, 260, 23);

        compensateCheckBox.setText("Compensate [-COMPENSATE]");
        compensateCheckBox.setToolTipText("Compensate for profiling measurement perturbation");
        compensateCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compensateCheckBoxStateChanged(evt);
            }
        });

        profilePanel.add(compensateCheckBox);
        compensateCheckBox.setBounds(10, 30, 280, 23);

        profcallpathCheckBox.setText("Callpath Profiling [-PROFILECALLPATH]");
        profcallpathCheckBox.setToolTipText("Generate call path profiles");
        profcallpathCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                profcallpathCheckBoxStateChanged(evt);
            }
        });

        profilePanel.add(profcallpathCheckBox);
        profcallpathCheckBox.setBounds(10, 50, 280, 23);

        profheadroomCheckBox.setText("Profile Headroom [-PROFILEHEADROOM]");
        profheadroomCheckBox.setToolTipText("Track memory free (or headroom) at each func entry");
        profheadroomCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                profheadroomCheckBoxStateChanged(evt);
            }
        });

        profilePanel.add(profheadroomCheckBox);
        profheadroomCheckBox.setBounds(10, 70, 290, 23);

        profmemoryCheckBox.setText("Profile Memory [-PROFILEMEMORY]");
        profmemoryCheckBox.setToolTipText("Track heap memory utilization at each function entry");
        profmemoryCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                profmemoryCheckBoxStateChanged(evt);
            }
        });

        profilePanel.add(profmemoryCheckBox);
        profmemoryCheckBox.setBounds(10, 90, 280, 23);

        memorypQjButton.setText("?");
        memorypQjButton.setToolTipText("More Info");
        memorypQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        memorypQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memorypQjButtonActionPerformed(evt);
            }
        });

        profilePanel.add(memorypQjButton);
        memorypQjButton.setBounds(600, 90, 20, 20);

        profileQjButton.setText("?");
        profileQjButton.setToolTipText("More Info");
        profileQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        profileQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileQjButtonActionPerformed(evt);
            }
        });

        profilePanel.add(profileQjButton);
        profileQjButton.setBounds(600, 10, 20, 20);

        compensateQjButton.setText("?");
        compensateQjButton.setToolTipText("More Info");
        compensateQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        compensateQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compensateQjButtonActionPerformed(evt);
            }
        });

        profilePanel.add(compensateQjButton);
        compensateQjButton.setBounds(600, 30, 20, 20);

        callpathQjButton.setText("?");
        callpathQjButton.setToolTipText("More Info");
        callpathQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        callpathQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callpathQjButtonActionPerformed(evt);
            }
        });

        profilePanel.add(callpathQjButton);
        callpathQjButton.setBounds(600, 50, 20, 20);

        headroomQjButton.setText("?");
        headroomQjButton.setToolTipText("More Info");
        headroomQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        headroomQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headroomQjButtonActionPerformed(evt);
            }
        });

        profilePanel.add(headroomQjButton);
        headroomQjButton.setBounds(600, 70, 20, 20);

        outputPanel.add(profilePanel);
        profilePanel.setBounds(10, 10, 630, 120);

        tracePanel.setLayout(null);

        tracePanel.setBorder(new javax.swing.border.EtchedBorder());
        traceCheckBox.setText("Trace [-TRACE]");
        traceCheckBox.setToolTipText("Generate TAU event traces");
        traceCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                traceCheckBoxStateChanged(evt);
            }
        });

        tracePanel.add(traceCheckBox);
        traceCheckBox.setBounds(10, 10, 290, 23);

        epilogCheckBox.setText("Epilog [-epilog=]:");
        epilogCheckBox.setToolTipText("Specify location of EPILOG Tracing package");
        epilogCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                epilogCheckBoxStateChanged(evt);
            }
        });

        tracePanel.add(epilogCheckBox);
        epilogCheckBox.setBounds(10, 40, 290, 23);

        epilogTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        epilogTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epilogTextFieldActionPerformed(evt);
            }
        });

        tracePanel.add(epilogTextField);
        epilogTextField.setBounds(300, 40, 200, 19);

        slog2CheckBox.setText("SLOG2 [-slog2]:");
        slog2CheckBox.setToolTipText("Specify use of TAU internal SLOG2 SDK/Jumpshot Package");
        slog2CheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slog2CheckBoxStateChanged(evt);
            }
        });

        tracePanel.add(slog2CheckBox);
        slog2CheckBox.setBounds(10, 70, 290, 23);

        slog2exCheckBox.setText("Use External SLOG2SDK [-slog2=]:");
        slog2exCheckBox.setToolTipText("Specify location of SLOG2 SDK/Jumpshot Package");
        slog2exCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slog2exCheckBoxStateChanged(evt);
            }
        });

        tracePanel.add(slog2exCheckBox);
        slog2exCheckBox.setBounds(20, 90, 280, 23);

        slog2TextField.setPreferredSize(new java.awt.Dimension(200, 19));
        slog2TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slog2TextFieldActionPerformed(evt);
            }
        });

        tracePanel.add(slog2TextField);
        slog2TextField.setBounds(300, 90, 200, 19);

        vtfCheckBox.setText("VTF [-vtf=]:");
        vtfCheckBox.setToolTipText("Specify location of VTF3 Trace Generation Package");
        vtfCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vtfCheckBoxStateChanged(evt);
            }
        });

        tracePanel.add(vtfCheckBox);
        vtfCheckBox.setBounds(10, 120, 290, 23);

        vtfTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        vtfTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vtfTextFieldActionPerformed(evt);
            }
        });

        tracePanel.add(vtfTextField);
        vtfTextField.setBounds(300, 120, 200, 19);

        epilogButton.setText("Browse");
        epilogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epilogButtonActionPerformed(evt);
            }
        });

        tracePanel.add(epilogButton);
        epilogButton.setBounds(510, 40, 80, 25);

        slog2Button.setText("Browse");
        slog2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slog2ButtonActionPerformed(evt);
            }
        });

        tracePanel.add(slog2Button);
        slog2Button.setBounds(510, 90, 80, 25);

        vtfButton.setText("Browse");
        vtfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vtfButtonActionPerformed(evt);
            }
        });

        tracePanel.add(vtfButton);
        vtfButton.setBounds(510, 120, 80, 25);

        traceQjButton.setText("?");
        traceQjButton.setToolTipText("More Info");
        traceQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        traceQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceQjButtonActionPerformed(evt);
            }
        });

        tracePanel.add(traceQjButton);
        traceQjButton.setBounds(600, 10, 20, 20);

        epilogQjButton.setText("?");
        epilogQjButton.setToolTipText("More Info");
        epilogQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        epilogQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epilogQjButtonActionPerformed(evt);
            }
        });

        tracePanel.add(epilogQjButton);
        epilogQjButton.setBounds(600, 40, 20, 20);

        slog2QjButton.setText("?");
        slog2QjButton.setToolTipText("More Info");
        slog2QjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        slog2QjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slog2QjButtonActionPerformed(evt);
            }
        });

        tracePanel.add(slog2QjButton);
        slog2QjButton.setBounds(600, 70, 20, 20);

        vtfQjButton.setText("?");
        vtfQjButton.setToolTipText("More Info");
        vtfQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        vtfQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vtfQjButtonActionPerformed(evt);
            }
        });

        tracePanel.add(vtfQjButton);
        vtfQjButton.setBounds(600, 120, 20, 20);

        slog2eQjButton.setText("?");
        slog2eQjButton.setToolTipText("More Info");
        slog2eQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        slog2eQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slog2eQjButtonActionPerformed(evt);
            }
        });

        tracePanel.add(slog2eQjButton);
        slog2eQjButton.setBounds(600, 90, 20, 20);

        outputPanel.add(tracePanel);
        tracePanel.setBounds(10, 140, 630, 160);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.EtchedBorder());
        profphaseCheckBox.setText("Phase Profiling [-PROFILEPHASE]");
        profphaseCheckBox.setToolTipText("Generate phase based profiles");
        profphaseCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                profphaseCheckBoxStateChanged(evt);
            }
        });

        jPanel5.add(profphaseCheckBox);
        profphaseCheckBox.setBounds(10, 10, 290, 23);

        depthlimitCheckBox.setText("Depth Limit [-DEPTHLIMIT]:");
        depthlimitCheckBox.setToolTipText("Disable instrumentation beyond a certain depth");
        depthlimitCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                depthlimitCheckBoxStateChanged(evt);
            }
        });

        jPanel5.add(depthlimitCheckBox);
        depthlimitCheckBox.setBounds(10, 30, 290, 23);

        phaseQjButton.setText("?");
        phaseQjButton.setToolTipText("More Info");
        phaseQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        phaseQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phaseQjButtonActionPerformed(evt);
            }
        });

        jPanel5.add(phaseQjButton);
        phaseQjButton.setBounds(600, 10, 20, 20);

        depthQjButton.setText("?");
        depthQjButton.setToolTipText("More Info");
        depthQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        depthQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depthQjButtonActionPerformed(evt);
            }
        });

        jPanel5.add(depthQjButton);
        depthQjButton.setBounds(600, 30, 20, 20);

        outputPanel.add(jPanel5);
        jPanel5.setBounds(10, 310, 630, 60);

        tabPane.addTab("Tracing/Profiling", outputPanel);

        threadPanel.setLayout(null);

        threadPanel.setMinimumSize(new java.awt.Dimension(600, 300));
        threadPanel.setPreferredSize(new java.awt.Dimension(600, 300));
        ompPanel.setLayout(null);

        ompPanel.setBorder(new javax.swing.border.EtchedBorder());
        ompCheckBox.setText("openMP [-openmp]");
        ompCheckBox.setToolTipText("Use OpenMP threads");
        ompCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ompCheckBoxStateChanged(evt);
            }
        });

        ompPanel.add(ompCheckBox);
        ompCheckBox.setBounds(10, 10, 290, 23);

        opariCheckBox.setText("Use Opari [-opari=]:");
        opariCheckBox.setToolTipText("Specify location of Opari OpenMP tool (use with above)");
        opariCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opariCheckBoxStateChanged(evt);
            }
        });

        ompPanel.add(opariCheckBox);
        opariCheckBox.setBounds(10, 40, 290, 23);

        opariTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        opariTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opariTextFieldActionPerformed(evt);
            }
        });

        ompPanel.add(opariTextField);
        opariTextField.setBounds(300, 40, 200, 19);

        opariregionCheckBox.setText("Region [-opari_region]");
        opariregionCheckBox.setToolTipText("Report performance data for all OpenMP regions");
        opariregionCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opariregionCheckBoxStateChanged(evt);
            }
        });

        ompPanel.add(opariregionCheckBox);
        opariregionCheckBox.setBounds(30, 60, 270, 23);

        opariconstructCheckBox.setText("Construct [-opari_construct]");
        opariconstructCheckBox.setToolTipText("Report performance data for all OpenMP constructs");
        opariconstructCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opariconstructCheckBoxStateChanged(evt);
            }
        });

        ompPanel.add(opariconstructCheckBox);
        opariconstructCheckBox.setBounds(30, 80, 270, 23);

        opariButton.setText("Browse");
        opariButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opariButtonActionPerformed(evt);
            }
        });

        ompPanel.add(opariButton);
        opariButton.setBounds(510, 40, 80, 25);

        openmpQjButton.setText("?");
        openmpQjButton.setToolTipText("More Info");
        openmpQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        openmpQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openmpQjButtonActionPerformed(evt);
            }
        });

        ompPanel.add(openmpQjButton);
        openmpQjButton.setBounds(600, 10, 20, 20);

        opariQjButton.setText("?");
        opariQjButton.setToolTipText("More Info");
        opariQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        opariQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opariQjButtonActionPerformed(evt);
            }
        });

        ompPanel.add(opariQjButton);
        opariQjButton.setBounds(600, 40, 20, 20);

        opariregionQjButton.setText("?");
        opariregionQjButton.setToolTipText("More Info");
        opariregionQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        opariregionQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opariregionQjButtonActionPerformed(evt);
            }
        });

        ompPanel.add(opariregionQjButton);
        opariregionQjButton.setBounds(600, 60, 20, 20);

        opariconstructQjButton.setText("?");
        opariconstructQjButton.setToolTipText("More Info");
        opariconstructQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        opariconstructQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opariconstructQjButtonActionPerformed(evt);
            }
        });

        ompPanel.add(opariconstructQjButton);
        opariconstructQjButton.setBounds(600, 80, 20, 20);

        threadPanel.add(ompPanel);
        ompPanel.setBounds(10, 60, 630, 110);

        charmPanel.setLayout(null);

        charmPanel.setBorder(new javax.swing.border.EtchedBorder());
        charmCheckBox.setText("charm++ [-charm=]:");
        charmCheckBox.setToolTipText("Use charm++ thread package");
        charmCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                charmCheckBoxStateChanged(evt);
            }
        });

        charmPanel.add(charmCheckBox);
        charmCheckBox.setBounds(10, 10, 290, 23);

        charmTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        charmTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charmTextFieldActionPerformed(evt);
            }
        });

        charmPanel.add(charmTextField);
        charmTextField.setBounds(300, 10, 200, 19);

        charmButton.setText("Browse");
        charmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charmButtonActionPerformed(evt);
            }
        });

        charmPanel.add(charmButton);
        charmButton.setBounds(510, 10, 80, 25);

        charmQjButton.setText("?");
        charmQjButton.setToolTipText("More Info");
        charmQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        charmQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charmQjButtonActionPerformed(evt);
            }
        });

        charmPanel.add(charmQjButton);
        charmQjButton.setBounds(600, 10, 20, 20);

        threadPanel.add(charmPanel);
        charmPanel.setBounds(10, 180, 630, 40);

        tulipthreadsPanel.setLayout(null);

        tulipthreadsPanel.setBorder(new javax.swing.border.EtchedBorder());
        tulipCheckBox.setText("tulip threads [-tulipthread=]:");
        tulipCheckBox.setToolTipText("Specify location of Tulip/Smarts package");
        tulipCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tulipCheckBoxStateChanged(evt);
            }
        });

        tulipthreadsPanel.add(tulipCheckBox);
        tulipCheckBox.setBounds(10, 10, 290, 23);

        tulipTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        tulipTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tulipTextFieldActionPerformed(evt);
            }
        });

        tulipthreadsPanel.add(tulipTextField);
        tulipTextField.setBounds(300, 10, 200, 19);

        smartCheckBox.setText("Use smart API [-smart]");
        smartCheckBox.setToolTipText("Use SMARTS API for threads (use with above)");
        smartCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                smartCheckBoxStateChanged(evt);
            }
        });

        tulipthreadsPanel.add(smartCheckBox);
        smartCheckBox.setBounds(20, 30, 280, 23);

        tulipButton.setText("Browse");
        tulipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tulipButtonActionPerformed(evt);
            }
        });

        tulipthreadsPanel.add(tulipButton);
        tulipButton.setBounds(510, 10, 80, 25);

        tulipQjButton.setText("?");
        tulipQjButton.setToolTipText("More Info");
        tulipQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        tulipQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tulipQjButtonActionPerformed(evt);
            }
        });

        tulipthreadsPanel.add(tulipQjButton);
        tulipQjButton.setBounds(600, 10, 20, 20);

        smartQjButton.setText("?");
        smartQjButton.setToolTipText("More Info");
        smartQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        smartQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smartQjButtonActionPerformed(evt);
            }
        });

        tulipthreadsPanel.add(smartQjButton);
        smartQjButton.setBounds(600, 30, 20, 20);

        threadPanel.add(tulipthreadsPanel);
        tulipthreadsPanel.setBounds(10, 280, 630, 70);

        pthreadsPanel.setLayout(null);

        pthreadsPanel.setBorder(new javax.swing.border.EtchedBorder());
        pthreadsCheckBox.setText("pthreads [-pthread]");
        pthreadsCheckBox.setToolTipText("Use pthread thread package");
        pthreadsCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pthreadsCheckBoxStateChanged(evt);
            }
        });

        pthreadsPanel.add(pthreadsCheckBox);
        pthreadsCheckBox.setBounds(10, 10, 290, 23);

        pthreadsQjButton.setText("?");
        pthreadsQjButton.setToolTipText("More Info");
        pthreadsQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pthreadsQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pthreadsQjButtonActionPerformed(evt);
            }
        });

        pthreadsPanel.add(pthreadsQjButton);
        pthreadsQjButton.setBounds(600, 10, 20, 20);

        threadPanel.add(pthreadsPanel);
        pthreadsPanel.setBounds(10, 10, 630, 40);

        sprocPanel.setLayout(null);

        sprocPanel.setBorder(new javax.swing.border.EtchedBorder());
        sprocCheckBox.setText("sproc [-sproc]");
        sprocCheckBox.setToolTipText("Use SGI sproc thread package");
        sprocCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sprocCheckBoxStateChanged(evt);
            }
        });

        sprocPanel.add(sprocCheckBox);
        sprocCheckBox.setBounds(10, 10, 290, 23);

        sprocQjButton.setText("?");
        sprocQjButton.setToolTipText("More Info");
        sprocQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        sprocQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sprocQjButtonActionPerformed(evt);
            }
        });

        sprocPanel.add(sprocQjButton);
        sprocQjButton.setBounds(600, 10, 20, 20);

        threadPanel.add(sprocPanel);
        sprocPanel.setBounds(10, 230, 630, 40);

        tabPane.addTab("Threads", threadPanel);

        generalPanel.setLayout(null);

        generalPanel.setMinimumSize(new java.awt.Dimension(600, 300));
        generalPanel.setPreferredSize(new java.awt.Dimension(600, 300));
        dyninstPanel.setLayout(null);

        dyninstPanel.setBorder(new javax.swing.border.EtchedBorder());
        dyninstCheckBox.setText("Dyninst [-dyninst=]:");
        dyninstCheckBox.setToolTipText("Specify location of DynInst Package");
        dyninstCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dyninstCheckBoxStateChanged(evt);
            }
        });

        dyninstPanel.add(dyninstCheckBox);
        dyninstCheckBox.setBounds(10, 10, 280, 23);

        dyninstTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        dyninstTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dyninstTextFieldActionPerformed(evt);
            }
        });

        dyninstPanel.add(dyninstTextField);
        dyninstTextField.setBounds(300, 10, 200, 19);

        dyninstButton.setText("Browse");
        dyninstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dyninstButtonActionPerformed(evt);
            }
        });

        dyninstPanel.add(dyninstButton);
        dyninstButton.setBounds(510, 10, 80, 25);

        dyninstQjButton.setText("?");
        dyninstQjButton.setToolTipText("More Info");
        dyninstQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        dyninstQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dyninstQjButtonActionPerformed(evt);
            }
        });

        dyninstPanel.add(dyninstQjButton);
        dyninstQjButton.setBounds(600, 10, 20, 20);

        generalPanel.add(dyninstPanel);
        dyninstPanel.setBounds(10, 60, 630, 40);

        pclPanel.setLayout(null);

        pclPanel.setBorder(new javax.swing.border.EtchedBorder());
        pclCheckBox.setText("PCL [-pcl=]:");
        pclCheckBox.setToolTipText("Specify location of PCL (Performance Counter Library)");
        pclCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pclCheckBoxStateChanged(evt);
            }
        });

        pclPanel.add(pclCheckBox);
        pclCheckBox.setBounds(10, 10, 280, 23);

        pclTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        pclTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pclTextFieldActionPerformed(evt);
            }
        });

        pclPanel.add(pclTextField);
        pclTextField.setBounds(300, 10, 200, 19);

        pclButton.setText("Browse");
        pclButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pclButtonActionPerformed(evt);
            }
        });

        pclPanel.add(pclButton);
        pclButton.setBounds(510, 10, 80, 25);

        pclQjButton.setText("?");
        pclQjButton.setToolTipText("More Info");
        pclQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pclQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pclQjButtonActionPerformed(evt);
            }
        });

        pclPanel.add(pclQjButton);
        pclQjButton.setBounds(600, 10, 20, 20);

        generalPanel.add(pclPanel);
        pclPanel.setBounds(10, 10, 630, 40);

        timePanel.setLayout(null);

        timePanel.setBorder(new javax.swing.border.EtchedBorder());
        cputimeCheckBox.setText("CPU Time [-CPUTIME]");
        cputimeCheckBox.setToolTipText("Use usertime+system time instead of wallclock time");
        cputimeCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cputimeCheckBoxStateChanged(evt);
            }
        });

        timePanel.add(cputimeCheckBox);
        cputimeCheckBox.setBounds(10, 30, 280, 23);

        craytimeCheckBox.setText("Cray Timers [-CRAYTIMERS]");
        craytimeCheckBox.setToolTipText("Use fast nanosecond timers on Cray X1 systems");
        craytimeCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                craytimeCheckBoxStateChanged(evt);
            }
        });

        timePanel.add(craytimeCheckBox);
        craytimeCheckBox.setBounds(10, 60, 290, 23);

        linuxtimeCheckBox.setText("Linux Timers [-LINUXTIMERS]");
        linuxtimeCheckBox.setToolTipText("Use low overhead TSC Counter for wallclock time");
        linuxtimeCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                linuxtimeCheckBoxStateChanged(evt);
            }
        });

        timePanel.add(linuxtimeCheckBox);
        linuxtimeCheckBox.setBounds(10, 80, 300, 23);

        sgitimeCheckBox.setText("SGI Timers [-SGITIMERS]");
        sgitimeCheckBox.setToolTipText("Use fast nanosecond timers on SGI R10000 systems");
        sgitimeCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sgitimeCheckBoxStateChanged(evt);
            }
        });

        timePanel.add(sgitimeCheckBox);
        sgitimeCheckBox.setBounds(10, 100, 300, 23);

        jLabel2.setText("Timer Type");
        timePanel.add(jLabel2);
        jLabel2.setBounds(70, 10, 120, 15);

        cputQjButton.setText("?");
        cputQjButton.setToolTipText("More Info");
        cputQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        cputQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cputQjButtonActionPerformed(evt);
            }
        });

        timePanel.add(cputQjButton);
        cputQjButton.setBounds(600, 30, 20, 20);

        craytQjButton.setText("?");
        craytQjButton.setToolTipText("More Info");
        craytQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        craytQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                craytQjButtonActionPerformed(evt);
            }
        });

        timePanel.add(craytQjButton);
        craytQjButton.setBounds(600, 60, 20, 20);

        linuxtQjButton.setText("?");
        linuxtQjButton.setToolTipText("More Info");
        linuxtQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        linuxtQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linuxtQjButtonActionPerformed(evt);
            }
        });

        timePanel.add(linuxtQjButton);
        linuxtQjButton.setBounds(600, 80, 20, 20);

        sgitQjButton.setText("?");
        sgitQjButton.setToolTipText("More Info");
        sgitQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        sgitQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sgitQjButtonActionPerformed(evt);
            }
        });

        timePanel.add(sgitQjButton);
        sgitQjButton.setBounds(600, 100, 20, 20);

        generalPanel.add(timePanel);
        timePanel.setBounds(10, 210, 630, 130);

        musePanel.setLayout(null);

        musePanel.setBorder(new javax.swing.border.EtchedBorder());
        museCheckBox.setText("Muse [-muse]");
        museCheckBox.setToolTipText("Specify the use of MAGNET/MUSE");
        museCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                museCheckBoxActionPerformed(evt);
            }
        });

        musePanel.add(museCheckBox);
        museCheckBox.setBounds(5, 5, 300, 23);

        museeventCheckBox.setText("Muse Event [-muse_event]");
        museeventCheckBox.setToolTipText("Specify the use of MAGNET/MUSE w/ non-monotonically increasing values");
        museeventCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                museeventCheckBoxStateChanged(evt);
            }
        });

        musePanel.add(museeventCheckBox);
        museeventCheckBox.setBounds(20, 30, 290, 23);

        musemultCheckBox.setText(" Muse Multiple [-muse_multiple]");
        musemultCheckBox.setToolTipText("Specify the use of MAGNET/MUSE w/ monotonically increasing values");
        musemultCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                musemultCheckBoxStateChanged(evt);
            }
        });

        musePanel.add(musemultCheckBox);
        musemultCheckBox.setBounds(20, 50, 290, 23);

        musemQjButton.setText("?");
        musemQjButton.setToolTipText("More Info");
        musemQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        musemQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musemQjButtonActionPerformed(evt);
            }
        });

        musePanel.add(musemQjButton);
        musemQjButton.setBounds(600, 50, 20, 20);

        museeQjButton.setText("?");
        museeQjButton.setToolTipText("More Info");
        museeQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        museeQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                museeQjButtonActionPerformed(evt);
            }
        });

        musePanel.add(museeQjButton);
        museeQjButton.setBounds(600, 30, 20, 20);

        museQjButton.setText("?");
        museQjButton.setToolTipText("More Info");
        museQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        museQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                museQjButtonActionPerformed(evt);
            }
        });

        musePanel.add(museQjButton);
        museQjButton.setBounds(600, 10, 20, 20);

        generalPanel.add(musePanel);
        musePanel.setBounds(10, 110, 630, 90);

        tabPane.addTab("Data Tools", generalPanel);

        jPanel1.setLayout(null);

        pythonPanel.setLayout(null);

        pythonPanel.setBorder(new javax.swing.border.EtchedBorder());
        usepythonCheckbox.setText("Use Python [-pythoninc=]:");
        usepythonCheckbox.setToolTipText("Specify location of Python include directory");
        usepythonCheckbox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                usepythonCheckboxStateChanged(evt);
            }
        });

        pythonPanel.add(usepythonCheckbox);
        usepythonCheckbox.setBounds(10, 10, 290, 23);

        pythonincField.setPreferredSize(new java.awt.Dimension(200, 19));
        pythonincField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonincFieldActionPerformed(evt);
            }
        });

        pythonPanel.add(pythonincField);
        pythonincField.setBounds(300, 10, 200, 19);

        pythonlibCheckBox.setText("Python Libraries [-pythonlib=]:");
        pythonlibCheckBox.setToolTipText("Specify location of Python lib directory");
        pythonlibCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pythonlibCheckBoxStateChanged(evt);
            }
        });

        pythonPanel.add(pythonlibCheckBox);
        pythonlibCheckBox.setBounds(10, 40, 290, 23);

        pythonlibField.setPreferredSize(new java.awt.Dimension(200, 19));
        pythonlibField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonlibFieldActionPerformed(evt);
            }
        });

        pythonPanel.add(pythonlibField);
        pythonlibField.setBounds(300, 40, 200, 19);

        pythonincButton.setText("Browse");
        pythonincButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonincButtonActionPerformed(evt);
            }
        });

        pythonPanel.add(pythonincButton);
        pythonincButton.setBounds(510, 10, 80, 25);

        pythonlibButton.setText("Browse");
        pythonlibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonlibButtonActionPerformed(evt);
            }
        });

        pythonPanel.add(pythonlibButton);
        pythonlibButton.setBounds(510, 40, 80, 25);

        pythonincQjButton.setText("?");
        pythonincQjButton.setToolTipText("More Info");
        pythonincQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pythonincQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonincQjButtonActionPerformed(evt);
            }
        });

        pythonPanel.add(pythonincQjButton);
        pythonincQjButton.setBounds(600, 10, 20, 20);

        pythonlibQjButton.setText("?");
        pythonlibQjButton.setToolTipText("More Info");
        pythonlibQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pythonlibQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pythonlibQjButtonActionPerformed(evt);
            }
        });

        pythonPanel.add(pythonlibQjButton);
        pythonlibQjButton.setBounds(600, 40, 20, 20);

        jPanel1.add(pythonPanel);
        pythonPanel.setBounds(10, 10, 630, 70);

        jdkPanel.setLayout(null);

        jdkPanel.setBorder(new javax.swing.border.EtchedBorder());
        usejdkCheckBox.setText("Use JDK [-jdk=]:");
        usejdkCheckBox.setToolTipText("Specify location of JAVA 2 Development Kit (jdk1.2+)");
        usejdkCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                usejdkCheckBoxStateChanged(evt);
            }
        });

        jdkPanel.add(usejdkCheckBox);
        usejdkCheckBox.setBounds(10, 30, 280, 23);

        jdkField.setPreferredSize(new java.awt.Dimension(200, 19));
        jdkField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdkFieldActionPerformed(evt);
            }
        });

        jdkPanel.add(jdkField);
        jdkField.setBounds(300, 30, 200, 19);

        usejavatimersCheckBox.setText("Java Timers [-JAVACPUTIME]");
        usejavatimersCheckBox.setToolTipText("Use JVMPI thread specific cpu time");
        usejavatimersCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                usejavatimersCheckBoxStateChanged(evt);
            }
        });

        jdkPanel.add(usejavatimersCheckBox);
        usejavatimersCheckBox.setBounds(10, 60, 290, 23);

        jdkButton.setText("Browse");
        jdkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdkButtonActionPerformed(evt);
            }
        });

        jdkPanel.add(jdkButton);
        jdkButton.setBounds(510, 30, 80, 25);

        jLabel1.setText("For use with JVMPI Only!");
        jdkPanel.add(jLabel1);
        jLabel1.setBounds(10, 10, 280, 15);

        jdkQjButton.setText("?");
        jdkQjButton.setToolTipText("More Info");
        jdkQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jdkQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdkQjButtonActionPerformed(evt);
            }
        });

        jdkPanel.add(jdkQjButton);
        jdkQjButton.setBounds(600, 30, 20, 20);

        javatQjButton.setText("?");
        javatQjButton.setToolTipText("More Info");
        javatQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        javatQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                javatQjButtonActionPerformed(evt);
            }
        });

        jdkPanel.add(javatQjButton);
        javatQjButton.setBounds(600, 60, 20, 20);

        jPanel1.add(jdkPanel);
        jdkPanel.setBounds(10, 90, 630, 90);

        dirarcPanel.setLayout(null);

        dirarcPanel.setBorder(new javax.swing.border.EtchedBorder());
        installdirCheckBox.setText("Custom Installation Directory [-prefix=]:");
        installdirCheckBox.setToolTipText("Specify a target installation directory");
        installdirCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                installdirCheckBoxStateChanged(evt);
            }
        });

        dirarcPanel.add(installdirCheckBox);
        installdirCheckBox.setBounds(10, 10, 290, 23);

        installdirField.setPreferredSize(new java.awt.Dimension(200, 19));
        installdirField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installdirFieldActionPerformed(evt);
            }
        });

        dirarcPanel.add(installdirField);
        installdirField.setBounds(300, 10, 200, 19);

        archdirCheckBox.setText("Custom Arch Directory [-exec-prefix=]:");
        archdirCheckBox.setToolTipText("Specify a target architecture directory");
        archdirCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                archdirCheckBoxStateChanged(evt);
            }
        });

        dirarcPanel.add(archdirCheckBox);
        archdirCheckBox.setBounds(10, 40, 290, 23);

        archdirField.setPreferredSize(new java.awt.Dimension(200, 19));
        archdirField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archdirFieldActionPerformed(evt);
            }
        });

        dirarcPanel.add(archdirField);
        archdirField.setBounds(300, 40, 200, 19);

        archLabel.setText("Architecture [-arch=]:");
        dirarcPanel.add(archLabel);
        archLabel.setBounds(10, 70, 280, 15);

        archCombo.setToolTipText("Specify a target architecture");
        archCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archComboActionPerformed(evt);
            }
        });

        dirarcPanel.add(archCombo);
        archCombo.setBounds(300, 70, 90, 24);

        useroptCheckBox.setText("Use User Options [-useropt=]:");
        useroptCheckBox.setToolTipText("list of commandline parameters");
        useroptCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                useroptCheckBoxStateChanged(evt);
            }
        });

        dirarcPanel.add(useroptCheckBox);
        useroptCheckBox.setBounds(10, 100, 280, 23);

        useroptField.setPreferredSize(new java.awt.Dimension(200, 19));
        useroptField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useroptFieldActionPerformed(evt);
            }
        });

        dirarcPanel.add(useroptField);
        useroptField.setBounds(300, 100, 200, 19);

        noexceptCheckBox.setText("No Exceptions [-noex]");
        noexceptCheckBox.setToolTipText("Use no exceptions while compiling the library");
        noexceptCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noexceptCheckBoxStateChanged(evt);
            }
        });

        dirarcPanel.add(noexceptCheckBox);
        noexceptCheckBox.setBounds(10, 130, 280, 23);

        installdirButton.setText("Browse");
        installdirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installdirButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(installdirButton);
        installdirButton.setBounds(510, 10, 80, 25);

        archdirButton.setText("Browse");
        archdirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archdirButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(archdirButton);
        archdirButton.setBounds(510, 40, 80, 25);

        custinstQjButton.setText("?");
        custinstQjButton.setToolTipText("More Info");
        custinstQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        custinstQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custinstQjButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(custinstQjButton);
        custinstQjButton.setBounds(600, 10, 20, 20);

        custarchQjButton.setText("?");
        custarchQjButton.setToolTipText("More Info");
        custarchQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        custarchQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custarchQjButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(custarchQjButton);
        custarchQjButton.setBounds(600, 40, 20, 20);

        archQjButton.setText("?");
        archQjButton.setToolTipText("More Info");
        archQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        archQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archQjButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(archQjButton);
        archQjButton.setBounds(600, 70, 20, 20);

        useroptQjButton.setText("?");
        useroptQjButton.setToolTipText("More Info");
        useroptQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        useroptQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useroptQjButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(useroptQjButton);
        useroptQjButton.setBounds(600, 100, 20, 20);

        noexQjButton.setText("?");
        noexQjButton.setToolTipText("More Info");
        noexQjButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        noexQjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noexQjButtonActionPerformed(evt);
            }
        });

        dirarcPanel.add(noexQjButton);
        noexQjButton.setBounds(600, 130, 20, 20);

        jPanel1.add(dirarcPanel);
        dirarcPanel.setBounds(10, 190, 630, 160);

        tabPane.addTab("Misc", jPanel1);

        getContentPane().add(tabPane);
        tabPane.setBounds(10, 10, 650, 480);

        commandPanel.setLayout(null);

        commandPanel.setBorder(new javax.swing.border.EtchedBorder());
        confButton.setText("Configure Tau");
        confButton.setToolTipText("Run the generated TAU configure command");
        confButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confButtonActionPerformed(evt);
            }
        });

        commandPanel.add(confButton);
        confButton.setBounds(10, 50, 150, 25);

        confjScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        confjScrollPane.setAutoscrolls(true);
        confjScrollPane.setPreferredSize(new java.awt.Dimension(600, 35));
        confjScrollPane.setRequestFocusEnabled(false);
        commandTextArea.setText("./configure");
        confjScrollPane.setViewportView(commandTextArea);

        commandPanel.add(confjScrollPane);
        confjScrollPane.setBounds(10, 10, 630, 35);

        makejButton.setText("Make Tau");
        makejButton.setToolTipText("Clean TAU and install the most recent configuration specified");
        makejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makejButtonActionPerformed(evt);
            }
        });

        commandPanel.add(makejButton);
        makejButton.setBounds(170, 50, 150, 25);

        instjScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        instjScrollPane.setAutoscrolls(true);
        instjScrollPane.setPreferredSize(new java.awt.Dimension(600, 35));
        instjScrollPane.setRequestFocusEnabled(false);
        instTextArea.setText("./installtau");
        instjScrollPane.setViewportView(instTextArea);

        commandPanel.add(instjScrollPane);
        instjScrollPane.setBounds(10, 90, 630, 35);

        instButton.setText("Install Tau");
        instButton.setToolTipText("Install TAU with the indicated command");
        instButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instButtonActionPerformed(evt);
            }
        });

        commandPanel.add(instButton);
        instButton.setBounds(10, 130, 150, 25);

        getContentPane().add(commandPanel);
        commandPanel.setBounds(10, 500, 650, 170);

        resetButton.setText("Reset");
        resetButton.setToolTipText("Returns settings to default");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        getContentPane().add(resetButton);
        resetButton.setBounds(350, 680, 150, 25);

        exitButton.setText("Exit");
        exitButton.setToolTipText("Exits the program");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        getContentPane().add(exitButton);
        exitButton.setBounds(510, 680, 150, 25);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-677)/2, (screenSize.height-746)/2, 677, 746);
    }
    // </editor-fold>

    private void useroptFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.useroptCheckBox.isSelected()){
	    
	    String id=" -useropt=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+useroptField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void archdirFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.archdirCheckBox.isSelected()){
	    
	    String id=" -exec-prefix=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+archdirField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void installdirFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.installdirCheckBox.isSelected()){
	    
	    String id=" -prefix=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+installdirField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void jdkFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.usejdkCheckBox.isSelected()){
	    
	    String id=" -jdk=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+jdkField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void pythonincFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.usepythonCheckbox.isSelected()){
	    
	    String id=" -pythoninc=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+pythonincField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void pythonlibFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.pythonlibCheckBox.isSelected()){
	    
	    String id=" -pythonlib=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+pythonlibField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void dyninstTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.dyninstCheckBox.isSelected()){
	    
	    String id=" -dyninst=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+dyninstTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void pclTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.pclCheckBox.isSelected()){
	    
	    String id=" -pcl=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+pclTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void tulipTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.tulipCheckBox.isSelected()){
	    
	    String id=" -tulipthread=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+tulipTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void charmTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.charmCheckBox.isSelected()){
	    
	    String id=" -charm=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+charmTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void opariTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.opariCheckBox.isSelected()){
	    
	    String id=" -opari=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+opariTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void vtfTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.vtfCheckBox.isSelected()){
	    
	    String id=" -vtf=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+vtfTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void slog2TextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.slog2CheckBox.isSelected()){
	    
	    String id=" -slog2=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+slog2TextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void epilogTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.epilogCheckBox.isSelected()){
	    
	    String id=" -epilog=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+epilogTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void altshmemTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.altshmemCheckBox.isSelected()){
	    
	    String id=" -shmemlibrary=";
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    
	    configureline = begin+altshmemTextField.getText()+end;

	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void shmemlibTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.shmemlibCheckBox.isSelected()){
	    
	    String id=" -shmemlib=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+shmemlibTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void shmemincTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.shmemincCheckBox.isSelected()){
	    
	    String id=" -shmeminc=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+shmemincTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void tagTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.tagCheckBox.isSelected()){
	    
	    String id=" -tag=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+tagTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void altmpiTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.altmpiCheckBox.isSelected()){
	    
	    String id=" -mpilibrary=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+altmpiTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void mpilibTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.mpilibCheckBox.isSelected()){
	    
	    String id=" -mpilib=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+mpilibTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void mpiincTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.mpiincCheckBox.isSelected()){
	    
	    String id=" -mpiinc=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+mpiincTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void papiTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.papiCheckBox.isSelected()){
	    
	    String id=" -papi=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+papiTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void defpdtTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.defpdtCheckBox.isSelected()){
	    
	    String id=" -pdt_c++=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+defpdtTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void pdtdirFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.pdtCheckBox.isSelected()){
	    
	    String id=" -pdt=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+pdtdirField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void deffortranTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.deffortranCheckBox.isSelected()){
	    
	    String id=" -fortran=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+deffortranTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void defcppTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.defcppCheckBox.isSelected()){
	    
	    String id=" -c++=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+defcppTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }

    private void defccTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
	if(this.defccCheckBox.isSelected()){
	    
	    String id=" -cc=";
	    //this.defccTextField
	    int start = configureline.indexOf(id);
	    if(start<0){
		return;
	    }
	    int stop = configureline.indexOf(" ", start+1);//Math.min(configureline.length()-2, configureline.indexOf(" -", start+2));
	    String begin = configureline.substring(0,configureline.indexOf("=", start)+1);
	    String end = configureline.substring(stop);
	    configureline = begin+defccTextField.getText()+end;
		    //configureline.substring(0, configureline.indexOf("=", start)+1)+
		    
		    //configureline.substring(stop);
	    commandTextArea.setText(configureline); updateITCommand();
	}
    }


    
private void updateITCommand(){
//    String confcop = configureline;
//String buildinst = "";

    instline = "./installtau ";
    
    String[] varopts = {"arch", "fortran", "cc", "c++", "useropt", "pdt", 
	    "pdtcompdir", "pdt_c++", "papi", "vtf", "slog2", "dyninst",
	    "mpiinc","mpilib","mpilibrary","tag","opari","epilog","prefix",
	    "exec-prefix"};

    String[] singopts = {"slog2", "mpi", "nocomm"};
    int start;
    String addop;
    for(int i=0;i<varopts.length;i++){
	//addop="-"+varopts[i]+"=";
	start = configureline.indexOf(" -"+varopts[i]+"="); 
	if(start>-1){
	    instline+=configureline.substring(start, configureline.indexOf(" ", start+1));
	}
    }
    
    for(int i=0; i<singopts.length;i++){
	
	start=configureline.indexOf("-"+singopts[i]+" ");
	if(start>-1){
	    instline+=" -"+singopts[i]+" ";
	}
    }
    
    this.instTextArea.setText(instline);

}    
    
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
    System.exit(0);
    }                                          

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
// TODO add your handling code here:
    }                                           

    private void instButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
	instButton.setEnabled(false);
	try {
	     Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec(instline);
            InputStream stdin = proc.getInputStream();
            InputStreamReader isr = new InputStreamReader(stdin);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
           // System.out.println("<ERROR>");
	    
            while ( (line = br.readLine()) != null)
                System.out.println(line);
	    
            //System.out.println("</ERROR>");
            int ret = proc.waitFor();
	    br.close();
            //System.out.println("Process exitValue: " + exitVal);
	
	if(ret==0)
	{JOptionPane.showMessageDialog(null,"Installation Successful", "Success!", JOptionPane.INFORMATION_MESSAGE);}
	else
	{
	    JOptionPane.showMessageDialog(null,"Installation Error.  Returned: "+ret, "Error!", JOptionPane.ERROR_MESSAGE);
	}
	
	} catch (Exception e) {
	e.printStackTrace();}
	instButton.setEnabled(true);
    }                                          

    private void makejButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
	makejButton.setEnabled(false);
	try {
	     Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec("make clean install");
            InputStream stdin = proc.getInputStream();
            InputStreamReader isr = new InputStreamReader(stdin);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
           // System.out.println("<ERROR>");
	    
            while ( (line = br.readLine()) != null)
                System.out.println(line);
	    
            //System.out.println("</ERROR>");
            int ret = proc.waitFor();
	    br.close();
            //System.out.println("Process exitValue: " + exitVal);
	
	if(ret==0)
	{JOptionPane.showMessageDialog(null,"Installation Successful", "Success!", JOptionPane.INFORMATION_MESSAGE);}
	else
	{
	    JOptionPane.showMessageDialog(null,"Installation Error.  Returned: "+ret, "Error!", JOptionPane.ERROR_MESSAGE);
	}
	
	} catch (Exception e) {
	e.printStackTrace();}
	makejButton.setEnabled(true);
    }                                           

    private void noexQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
	JOptionPane.showMessageDialog(null,
		"Specifies that no exceptions be used while compiling the library. This is\n"+
		"relevant for C++.",
		"-noex",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void useroptQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
JOptionPane.showMessageDialog(null,
"Specifies additional user options such as -g or -I.  For multiple options,\n"+
"the options list should be enclosed in a single quote.",
	"-useropt=<options-list>",JOptionPane.INFORMATION_MESSAGE);
    }                                               

    private void archQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
JOptionPane.showMessageDialog(null,
"Specifies the architecture. If the user does not specify this option,\n"+
"configure determines the architecture. For SGI, the user can specify either\n"+
"of sgi32, sgin32 or sgi64 for 32, n32 or 64 bit compilation modes\n"+
"respectively. The files are installed in the <architecture>/bin and\n"+ 
"<architecture>/lib directories.<architecture>/lib directories.",
	"-arch=<architecture>",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void custarchQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies an alternate architecture directory name to be generated in the\n"+
"TAU root directory. By default, the <arch> directory is named in accordance\n"+
"with the detected or specified architecture.  This function allows multiple\n"+
"alternate configurations to be generated on the same architecture.",
	"-exec-prefix=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void custinstQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies the destination directory where the header, library and binary\n"+
"files are copied. By default, these are copied to subdirectories <arch>/bin\n"+
"and <arch>/lib in the TAU root directory.",
	"-prefix=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void javatQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Use JVMPI thread specific cpu time.",
	"-JAVACPUTIME",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void jdkQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies the location of the Java 2 development kit (jdk1.2+). See\n"+
"README.JAVA on instructions on using TAU with Java 2 applications.\n"+
"This option should only be used for configuring TAU to use JVMPI for\n"+
"profiling and tracing of Java applications. It should not be used for\n"+ 
"configuring paraprof, which uses java from the user's path.",
	"-jdk=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void pythonlibQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
JOptionPane.showMessageDialog(null,
"Specifies the location of the Python lib directory. This is the directory\n"+
"where *.py and *.pyc files (and config directory) are located. This option is\n"+
"mandatory for IBM when Python bindings are used. For other systems, this option\n"+
"may not be specified (but -pythoninc=<dir> needs to be specified).",
	"-pythonlib=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                                 

    private void pythonincQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
JOptionPane.showMessageDialog(null,
"Specifies the location of the Python include directory. This is the directory\n"+
"where Python.h header file is located. This option enables python bindings to\n"+
"be generated. The user should set the environment variable PYTHONPATH to\n"+
"<TAUROOT>/<ARCH>/lib/bindings-<options> to use a specific version of the TAU\n"+ 
"Python bindings. By importing package pytau, a user can manually instrument\n"+
"the source code and use the TAU API. On the other hand, by importing tau and\n"+
"using tau.run('<func>'), TAU can automatically generate instrumentation. See\n"+
"examples/python directory for further information.",
	"-pythoninc=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                                 

    private void fortQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
JOptionPane.showMessageDialog(null,
"Specifies the name of the Fortran90 compiler. Valid options are:\n"+
"gnu, sgi, ibm, ibm64, hp, cray, pgi, absoft, fujitsu, sun, compaq, nec,\n"+
"hitachi, kai, absoft, lahey, nagware, and intel.",
	"-fortran=<Fortran Compiler>",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void cppQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies the name of the C++ compiler. Supported  C++ compilers include\n"+
"KCC (from KAI/Intel), CC,  g++ and power64-linux-g++ (from GNU), FCC (from Fujitsu),\n"+
"xlC(from IBM), guidec++ (from KAI/Intel), aCC (from HP), c++ (from Apple), and pgCC\n"+
"(from PGI).",
	"-c++=<C++ compiler>",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void cQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
JOptionPane.showMessageDialog(null,
"Specifies the name of the C compiler. Supported C compilers include cc,\n"+
"gcc and powerpc64-linux-gcc (from GNU), pgcc (from PGI), fcc (from Fujitsu),\n"+
"xlc (from IBM), and KCC (from KAI/Intel).",
	"-cc=<C Compiler>",JOptionPane.INFORMATION_MESSAGE);
    }                                         

    private void smartQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies  SMARTS (Shared Memory Asynchronous Runtime System) as the\n"+
"threads package to be used. <directory> gives the location of the SMARTS\n"+
"root directory. [ Ref: http://www.acl.lanl.gov/smarts ]",
	"-smarts",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void tulipQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies Tulip threads (HPC++) as the threads package to be used as well\n"+
"as the location of the root directory where the package is installed.\n"+
"[ Ref: http://www.acl.lanl.gov/tulip ]",
	"-tulipthread=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void sprocQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Use the SGI sproc thread package.",
	"-sproc",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void charmQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies charm++ (converse) threads as the thread package to be used.",
	"-charm=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void opariconstructQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
JOptionPane.showMessageDialog(null,
"Report performance data for only OpenMP constructs and not regions.\n"+
"By default, both regions and constructs are profiled with Opari.",
	"-opari_construct",JOptionPane.INFORMATION_MESSAGE);
    }                                                      

    private void opariregionQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
JOptionPane.showMessageDialog(null,
"Report performance data for only OpenMP regions and not constructs.\n"+
"By default, both regions and constructs are profiled with Opari.",
	"-opari_region",JOptionPane.INFORMATION_MESSAGE);
    }                                                   

    private void opariQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies the location of the Opari OpenMP directive rewriting tool.\n"+
"The use of Opari source-to-source instrumentor in conjunction with\n"+
"TAU exposes OpenMP events for instrumentation. See examples/opari directory.\n"+
"[ Ref: http://www.fz-juelich.de/zam/kojak/opari/ ]\n"+ 
"Note: There are two versions of Opari: standalone - (opari-pomp-1.1.tar.gz) and\n"+
"the newer KOJAK - kojak-<ver>.tar.gz opari/ directory. Please upgrade to the\n"+
"KOJAK version (especially if you're using IBM xlf90) and specify\n"+
"-opari=<kojak-dir>/opari while configuring TAU.",
	"-opari=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void openmpQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies OpenMP as the threads package to be used.\n"+
"[ Ref: http://www.openmp.org ]",
	"-openmp",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void pthreadsQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies pthread as the thread package to be used. In the default mode, no\n"+
"thread package is used.",
	"-pthread",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void altshmemQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"By default, TAU uses -lsma as the shmem/pshmem library. This option allows\n"+
"the user to specify a different shmem library.",
	"-shmemlibrary=<lib>",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void shmemlibQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies the directory where libsma.a resides. Specifies the use of the TAU\n"+
"SHMEM interface.",
	"-shmemlib=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void shmemincQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies the directory where shmem.h resides. Specifies the use of the TAU\n"+
"SHMEM interface.",
	"-shmeminc=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void shmemQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies use of the TAU SHMEM wrapper library.",
	"-SHMEM",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void mpitraceQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies the tracing option and generates event traces for MPI calls and\n"+
"routines that are ancestors of MPI calls in the callstack. This option is\n"+
"useful for generating traces that are converted to the EPILOG trace format.\n"+
" KOJAK's Expert automatic diagnosis tool needs traces with events that\n"+
"call MPI routines. Do not use this option with the -TRACE option.",
	"-MPITRACE",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void nocommQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Allows the user to turn off tracking of messages (synchronous/asynchronous) in\n"+
"TAU's MPI wrapper interposition library. Entry and exit events for MPI routines\n"+
"are still tracked. Affects both profiling and tracing.",
	"-nocomm",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void tagQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies a tag in the name of the stub Makefile and TAU makefiles to\n"+
"uniquely identify the installation. This is useful when more than one MPI\n"+
"library may be used with different versions of compilers.\n"+
" e.g., % configure -c++=icpc -cc=icc -tag=intel71-vmi -mpiinc=/vmi2/mpich/include",
	"-tag=<Unique Name>",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void altmpiQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies the directory where mpi library files reside. This option should\n"+
"be used in conjunction with the -mpiinc=<dir> option to generate the TAU\n"+
"MPI wrapper library.",
	"-mpilibrary=<lib>",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void mpilibQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies the directory where mpi library files reside. This option should\n"+
"be used in conjunction with the -mpiinc=<dir> option to generate the TAU\n"+
"MPI wrapper library.",
	"-mpilib=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void mpiincQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies the directory  where mpi header files reside (such as mpi.h and\n"+
"mpif.h). This option also generates the TAU MPI wrapper library that\n"+
"instruments MPI routines using the MPI Profiling Interface. See the\n"+
"examples/NPB2.3/config/make.def file for its usage with Fortran and MPI\n"+ 
"programs and examples/pi/Makefile for a C++ example that uses MPI.",
	"-mpiinc=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void mpiQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies use of the TAU MPI wrapper library.",
	"-MPI",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void musemQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies use of the MUSE/MAGNET library with monotonically increasing values.",
	"-muse_multiple",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void museeQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies use of the MUSE/MAGNET library with non-monotonically increasing values.",
	"-muse_event",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void museQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
JOptionPane.showMessageDialog(null,
"Specifies the use of MAGNET/MUSE to extract low-level information from the\n"+
"kernel. To use this configuration, Linux kernel has to be patched with MAGNET\n"+
"and MUSE has to be install on the executing machine.  Also, magnetd has to be\n"+
"running with the appropriate handlers and filters installed. User can specify\n"+ 
"package by setting the environment variable TAU_MUSE_PACKAGE.  By default\n"+
"it uses the \"count\". Please refer to README.MUSE for more information.",
	"-muse",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void dyninstQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
JOptionPane.showMessageDialog(null,
"Specifies the location of the DynInst (dynamic instrumentation) package.\n"+
"See README.DYNINST for instructions on using TAU with DynInstAPI for\n"+
"binary runtime instrumentation (instead of manual instrumentation) or\n"+
"prior to execution by rewriting it.\n"+ 
"[ Ref: http://www.cs.umd.edu/projects/dyninstAPI/ ]",
	"-dyninst=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                               

    private void pdtcppQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies a different C++ compiler for PDT (tau_instrumentor). This is\n"+
"typically used when the library is compiled with a C++ compiler\n"+
"(specified with -c++) and the tau_instrumentor is compiled with a different\n"+
"<pdt_c++> compiler. For e.g., -c++=pgCC -cc=pgcc -pdt_c++=KCC -openmp ...\n"+ 
"uses PGI's OpenMP compilers for TAU's library and KCC for tau_instrumentor.",
	"-pdt_c++=<C++ Compiler>",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void pdtQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies the location of the installed PDT (Program Database Toolkit) root\n"+
"directory. PDT is used to build tau_instrumentor, a C++, C and F90\n"+
"instrumentation program that automatically inserts TAU annotations in the\n"+
"source code. If PDT is configured with a subdirectory option (-compdir=<opt>)\n"+ 
"then TAU can be configured with the same option by specifying\n"+
"-pdt=<dir> -pdtcompdir=<opt>.\n"+
"[ http://www.cs.uoregon.edu/research/paracomp/pdtoolkit/ ]",
	"-pdt=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void multcountQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
JOptionPane.showMessageDialog(null,
"Allows TAU to track more than one quantity (multiple hardware counters, CPU\n"+
"time, wallclock time, etc.) Configure with other options such as -papi=<dir>,\n"+
"-pcl=<dir>, -LINUXTIMERS, -SGITIMERS, -CRAYTIMERS, -CPUTIME, -PAPIVIRTUAL,\n"+
"etc. See examples/multicounters/README file for detailed instructions on\n"+ 
"setting the environment variables for this option. If -MULTIPLECOUNTERS is\n"+
"used with the -TRACE option, tracing employs the COUNTER1 variable for\n"+
"wallclock time.",
	"-MULTIPLECOUNTERS",JOptionPane.INFORMATION_MESSAGE);
    }                                                 

    private void papivirtQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Uses PAPI (must specify -papi=<dir> also) to access process virtual time.\n"+
"This represents the user time for measurements.",
	"-PAPIVIRTUAL",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void papiwallQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Uses PAPI (must specify -papi=<dir> also) to access high resolution CPU\n"+
"timers for wallclock time. The default case uses gettimeofday() which\n"+
"has a higher overhead than this.",
	"-PAPIWALLCLOCK",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void papiQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
JOptionPane.showMessageDialog(null,
"Specifies the location of the installed PAPI (Performance API) root\n"+
"directory. PAPI specifies a standard application programming interface (API)\n"+
"for accessing hardware performance counters available on most modern\n"+
"microprocessors similar. To measure floating point instructions, set the\n"+ 
"environment variable PAPI_EVENT to PAPI_FP_INS (for example). Refer to the\n"+
"TAU User's Guide or PAPI Documentation for other event names.\n"+
"[ Ref : http://icl.cs.utk.edu/projects/papi/api/ ]",
	"-papi=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void pclQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies the location of the installed PCL (Performance Counter Library)\n"+
"root directory. PCL provides a common interface to access hardware\n"+
"performance counters on modern microprocessors. The library supports\n"+
"Sun UltraSparc I/II, PowerPC 604e under AIX, MIPS R10000/12000 under IRIX,\n"+ 
"HP/Compaq Alpha 21164, 21264 under Tru64 Unix and Cray Unicos (T3E) and the\n"+
"Intel Pentium family of microprocessors under Linux. This option specifies\n"+
"the use of hardware performance counters for profiling (instead of time).\n"+
"To measure floating point instructions, set the environment variable\n"+
"PCL_EVENT to PCL_FP_INSTR (for example). Refer to the TAU User's Guide or\n"+
"PCL Documentation (pcl.h) for other event names."+
"[ Ref : http://www.fz-juelich.de/zam/PCL ]",
	"-pcl=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void sgitQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
JOptionPane.showMessageDialog(null,
"Specifies use of the free running nanosecond resolution on-chip timer on\n"+
"the MIPS R10000. This timer has a lower overhead than the default timer on\n"+
"SGI, and is recommended for SGIs.",
	"-SGITIMERS",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void linuxtQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies the use of the free running nanosecond resolution time stamp\n"+
"counter (TSC) on Pentium III+ and Itanium family of processors under Linux.\n"+
"This timer has a lower overhead than the default time and is recommended.",
	"-LINUXTIMERS",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void craytQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies use of the free running nanosecond resolution on-chip timer on\n"+
"the CRAY X1 cpu (accessed by the rtc() syscall). This timer has a\n"+
"significantly lower overhead than the default timer on the X1, and is\n"+
"recommended for profiling. Since this timer is not synchronized across\n"+ 
"different cpus, this option should not be used with the -TRACE option for\n"+
"tracing a multi-cpu application, where a globally synchronized realtime\n"+
"clock is required.",
	"-CRAYTIMERS",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void cputQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
JOptionPane.showMessageDialog(null,
"Uses usertime + system time instead of wallclock time. It gives the CPU\n"+
"time spent in the routines.  This currently works only on LINUX systems\n"+
"for multi-threaded programs and on all systems for single-threaded programs.",
	"-CPUTIME",JOptionPane.INFORMATION_MESSAGE);
    }                                            

    private void depthQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Allows users to enable instrumentation at runtime based on the depth of a\n"+
"calling routine on a callstack. The depth is specified using the environment\n"+
"variable TAU_DEPTH_LIMIT. When its value is 1, instrumentation in the\n"+
"top-level routine such as main (in C/C++) or program (in F90) is activated.\n"+ 
"When it is 2, only routine invoked directly by main and main are recorded.\n"+
"When a routine appears at a depth of 2 and at 10 and we set the limit at 5,\n"+
"then the routine is recorded when its depth is 2, and ignored when its depth\n"+
"is 10 on the calling stack. This can be used with -PROFILECALLPATH to\n"+
"generate a tree of height <h> from the main routine by setting\n"+
"TAU_CALLPATH_DEPTH and TAU_DEPTH_LIMIT variables to <h>.",
	"-DEPTHLIMIT",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void phaseQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"This option generates phase based profiles. It requires special\n"+
"instrumentation to mark phases in an application (I/O, computation, etc.).\n"+
"Phases can be static or dynamic (different phases for each loop iteration,\n"+
"for instance). See examples/phase/README for further information.",
	"-PROFILEPHASE",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void vtfQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
JOptionPane.showMessageDialog(null,
"Specifies the location of the VTF3 trace generation package. TAU's binary\n"+
"traces can be converted to the VTF3 format using tau2vtf, a tool that links\n"+
"with the VTF3 library. The VTF3 format is read by Intel trace analyzer,\n"+
"formerly known as vampir, a commercial trace visualization tool developed\n"+ 
"by TU. Dresden, Germany.",
	"-vtf=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                           

    private void slog2eQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies the location of the SLOG2 SDK trace generation package. TAU's\n"+
"binary traces can be converted to the SLOG2 format using tau2slog2, a tool\n"+
"that uses the SLOG2 SDK. The SLOG2 format is read by the Jumpshot4 trace\n"+
"visualization software, a freely available trace visualizer from Argonne\n"+ 
"National Laboratories.\n"+
"[ Ref: http://www-unix.mcs.anl.gov/perfvis/download/index.htm#slog2sdk ]",
	"-slog2=<directory>",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void slog2QjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Specifies the use of the SLOG2 trace generation package and the Jumpshot\n"+
"trace visualizer that is bundled with TAU. Jumpshot v4 and SLOG2 v1.2.5delta\n"+
"are included in the TAU distribution. When the -slog2 flag is specified,\n"+
"tau2slog2 and jumpshot tools are copied to the <tau>/<arch>/<bin> directory.\n"+ 
"It is important to have a working javac and java (preferably v1.4+) in your\n"+
"path. On linux systems, where /usr/bin/java may be a place holder, you'll\n"+
"need to modify your path accordingly.",
	"-slog2",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void epilogQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
JOptionPane.showMessageDialog(null,
"Specifies the directory where the EPILOG tracing package [FZJ] is installed.\n"+
"This option should be used in conjunction with the -TRACE option to generate\n"+
"binary EPILOG traces (instead of binary TAU traces). EPILOG traces can then\n"+
"be used with other tools such as EXPERT. EPILOG comes with its own\n"+ 
"implementation of the MPI wrapper library and the POMP library used with\n"+
"Opari. Using option overrides TAU's libraries for MPI, and OpenMP.\n",
	"-epilog=<dir>",JOptionPane.INFORMATION_MESSAGE);
    }                                              

    private void traceQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
JOptionPane.showMessageDialog(null,
"Generates event-trace logs, rather than summary profiles. Traces show when\n"+
"and where an event occurred, in terms of the location in the source code and\n"+
"the process that executed it. Traces can be merged and converted using\n"+
"tau_merge and tau_convert utilities respectively, and  visualized using\n"+ 
"Vampir, a commercial trace visualization tool. [ Ref http://www.pallas.de ]\n",
	"-TRACE",JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void memorypQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
JOptionPane.showMessageDialog(null,
"Specifies tracking heap memory utilitization for each instrumented function.\n"+
"When any function entry takes place, a sample of the heap memory used is\n"+
"taken. This data is stored as user-defined event data in profiles/traces.\n",
	"-PROFILEMEMORY",JOptionPane.INFORMATION_MESSAGE);
    }                                               

    private void headroomQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"Specifies tracking memory available in the heap (as opposed to memory\n"+
"utilization tracking in -PROFILEMEMORY). When any function entry takes place,\n"+
"a sample of the memory available (headroom to grow) is taken. This data is\n"+
"stored as user-defined event data in profiles/traces. Please refer to the\n"+ 
"examples/headroom/README file for a full explanation of these headroom\n"+
"options and the C++/C/F90 API for evaluating the headroom.\n",
	"-PROFILEHEADROOM",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void callpathQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
JOptionPane.showMessageDialog(null,
"This option generates call path profiles which shows the time spent in a\n"+
"routine when it is called by another routine in the calling path. \"a => b\"\n"+
"stands for the time spent in routine \"b\" when it is invoked by routine \"a\".\n"+
"This option is an extension of -PROFILE, the default profiling option.\n"+ 
"Specifying TAU_CALLPATH_DEPTH environment variable, the user can vary the\n"+
"depth of the callpath. See examples/calltree for further information.\n",
	"-PROFILECALLPATH",JOptionPane.INFORMATION_MESSAGE);
    }                                                

    private void compensateQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
JOptionPane.showMessageDialog(null,
"Specifies online compensation of performance perturbation. When this\n"+
"option is used, TAU computes its overhead and subtracts it from the\n"+
"profiles. It can be only used when profiling is chosen. This option works\n"+
"with MULTIPLECOUNTERS as well, but while it is relevant for removing\n"+ 
"perturbation with wallclock time, it cannot accurately account for\n"+
"perturbation with hardware performance counts (e.g., L1 Data cache misses).\n"+
"See TAU Publication [Europar04] for further information on this option.",
	"-COMPENSATE",JOptionPane.INFORMATION_MESSAGE);
    }                                                  

    private void profileQjButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
JOptionPane.showMessageDialog(null,"This is the default option; it specifies summary profile files to be\n"+
   "generated at the end of execution. Profiling generates aggregate statistics\n"+
   "(such as the total time spent in routines and statements), and can be used\n"+
   "in conjunction with the profile browser paraprof to analyse the performance.\n"+ 
   "Wallclock time is used for profiling  program entities.","-PROFILE",JOptionPane.INFORMATION_MESSAGE);
    }                                               

    private void confButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
	confButton.setEnabled(false);
	try {
	     Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec(configureline);
            InputStream stdin = proc.getInputStream();
            InputStreamReader isr = new InputStreamReader(stdin);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
           // System.out.println("<ERROR>");
	    
            while ( (line = br.readLine()) != null)
                System.out.println(line);
	    
            //System.out.println("</ERROR>");
            int ret = proc.waitFor();
	    br.close();
            //System.out.println("Process exitValue: " + exitVal);
	
	if(ret==0)
	{JOptionPane.showMessageDialog(null,"Configuration Successful", "Success!", JOptionPane.INFORMATION_MESSAGE);}
	else
	{
	    JOptionPane.showMessageDialog(null,"Configuration Error.  Returned: "+ret, "Error!", JOptionPane.ERROR_MESSAGE);
	}
	
	} catch (Exception e) {
	e.printStackTrace();}
	confButton.setEnabled(true);
    }                                          

    private void deffortranCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {                                                    
	if(deffortranCheckBox.isSelected()){
	    if(!(evt.getStateChange()==evt.SELECTED))
	    {
		return;
	    }
	     int start = configureline.indexOf(" -fortran=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    if(configureline.indexOf(" -fortran=")==-1){
		configureline+=" -fortran=";
		configureline+=deffortranTextField.getText()+" ";
	    }
	    fortranCombo.setEnabled(false);
	}
	else{
	    if(!(evt.getStateChange()==evt.DESELECTED))
	    {
		return;
	    }
	    int start = configureline.indexOf(" -fortran=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    fortranCombo.setEnabled(true);
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                   

    private void defcppCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {                                                
if(defcppCheckBox.isSelected()){
    	    if(!(evt.getStateChange()==evt.SELECTED))
	    {
		return;
	    }
	    int start = configureline.indexOf(" -c++=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    if(configureline.indexOf(" -c++=")==-1){
		configureline+=" -c++=";
		configureline+=defcppTextField.getText()+" ";
	    }
	    cppCombo.setEnabled(false);
	}
	else{
	    if(!(evt.getStateChange()==evt.DESELECTED))
	    {
		return;
	    }
	    int start = configureline.indexOf(" -c++=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    cppCombo.setEnabled(true);
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                               

    private void defccCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {                                               
if(defccCheckBox.isSelected()){
    	    if(!(evt.getStateChange()==evt.SELECTED))
	    {
		return;
	    }
	    int start = configureline.indexOf(" -cc=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    if(configureline.indexOf(" -cc=")==-1){
		configureline+=" -cc=";
		configureline+=defccTextField.getText()+" ";
	    }
	    ccCombo.setEnabled(false);
	}
	else{
	    if(!(evt.getStateChange()==evt.DESELECTED))
	    {
		return;
	    }
	    int start = configureline.indexOf(" -cc=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    ccCombo.setEnabled(true);
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                              

    private void defpdtCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {                                                
    if(defpdtCheckBox.isSelected())
    {
	if(!(evt.getStateChange()==evt.SELECTED))
	    {
		return;
	    }
	 int start = configureline.indexOf(" -pdt_c++=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}}
	if(configureline.indexOf(" -pdt_c++=")==-1){
		configureline+=" -pdt_c++=";
		configureline+=defpdtTextField.getText()+" ";
	    }
	    pdtcppCombo.setEnabled(false);
	}
	else{
	    if(!(evt.getStateChange()==evt.DESELECTED))
	    {
		return;
	    }
	    int start = configureline.indexOf(" -pdt_c++=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	    pdtcppCombo.setEnabled(true);
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                               

    private void noexceptCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
String entry=" -noex ";
	if(noexceptCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void useroptCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
	String entry =" -useropt=";
	if(useroptCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=useroptField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void archComboActionPerformed(java.awt.event.ActionEvent evt) {                                          
	String input = (String)archCombo.getSelectedItem();
	
	int start = configureline.indexOf(" -arch=");
	
	if(start>-1)
	{
	    int end = configureline.indexOf(" ",  start+1);
	    if(end==-1)
	    {
	        configureline = configureline.substring(0, start);
	    } 
	    else
	    {
		configureline = configureline.substring(0, start)+configureline.substring(end+1);
	    }
	}
	

	if(!input.equals("Default"))
	{
	    configureline+=" -arch="+input+" ";
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                         

    private void archdirButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    archdirField.setText(filename);
	}
    }                                             

    private void archdirCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
	String entry =" -exec_prefix=";
	if(archdirCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=archdirField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void installdirButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    installdirField.setText(filename);
	}
    }                                                

    private void installdirCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                
	String entry =" -prefix=";
	if(installdirCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=installdirField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                               

    private void usejavatimersCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                   
String entry=" -JAVACPUTIME ";
	if(usejavatimersCheckBox.isSelected()){
    
	if(!usejdkCheckBox.isSelected()){
	    usejdkCheckBox.doClick();
	}
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                  

    private void jdkButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    jdkField.setText(filename);
	}
    }                                         

    private void usejdkCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                            
	String entry =" -jdk=";
	if(usejdkCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=jdkField.getText()+" ";
	    }
	}
	
	else{
	    
	    if(usejavatimersCheckBox.isSelected())
	    {
		usejdkCheckBox.setSelected(true);
		return;
	    }
	    
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                           

    private void pythonlibButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    pythonlibField.setText(filename);
	}
    }                                               

    private void pythonlibCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                               
	String entry =" -pythonlib=";
	if(pythonlibCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=pythonlibField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                              

    private void pythonincButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    pythonincField.setText(filename);
	}
    }                                               

    private void usepythonCheckboxStateChanged(javax.swing.event.ChangeEvent evt) {                                               
	String entry =" -pythoninc=";
	if(usepythonCheckbox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=pythonincField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                              

    private void fortranComboActionPerformed(java.awt.event.ActionEvent evt) {                                             
	String input = (String)fortranCombo.getSelectedItem();
	
	int start = configureline.indexOf(" -fortran=");
	
	if(start>-1)
	{
	    int end = configureline.indexOf(" ",  start+1);
	    if(end==-1)
	    {
	        configureline = configureline.substring(0, start);
	    } 
	    else
	    {
		configureline = configureline.substring(0, start)+configureline.substring(end+1);
	    }
	}
	

	if(!input.equals("Default"))
	{
	    configureline+=" -fortran="+input+" ";
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void cppComboActionPerformed(java.awt.event.ActionEvent evt) {                                         
	String input = (String)cppCombo.getSelectedItem();
	
	int start = configureline.indexOf(" -c++=");
	
	if(start>-1)
	{
	    int end = configureline.indexOf(" ",  start+1);
	    if(end==-1)
	    {
	        configureline = configureline.substring(0, start);
	    } 
	    else
	    {
		configureline = configureline.substring(0, start)+configureline.substring(end+1);
	    }
	}
	

	if(!input.equals("Default"))
	{
	    configureline+=" -c++="+input+" ";
	}
	if(input.equals("xlC"))
	{
	    if(defcppTextField.getText().equals(""))
	    {
		defcppTextField.setText("xlC");
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void ccComboActionPerformed(java.awt.event.ActionEvent evt) {                                        
	String input = (String)ccCombo.getSelectedItem();
	
	int start = configureline.indexOf(" -cc=");
	
	if(start>-1)
	{
	    int end = configureline.indexOf(" ",  start+1);
	    if(end==-1)
	    {
	        configureline = configureline.substring(0, start);
	    } 
	    else
	    {
		configureline = configureline.substring(0, start)+configureline.substring(end+1);
	    }
	}
	

	if(!input.equals("Default"))
	{
	    configureline+=" -cc="+input+" ";
	}
	if(input.equals("xlC"))
	{
	    if(defccTextField.getText().equals(""))
	    {
		defccTextField.setText("xlc");
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                       

    private void charmCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
	String entry =" -charm=";
	if(charmCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=charmTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void smartCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
String entry=" -smart ";
	if(smartCheckBox.isSelected()){

    	    if(!tulipCheckBox.isSelected()){
		tulipCheckBox.doClick();
	    }    
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void tulipButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    tulipTextField.setText(filename);
	}
    }                                           

    private void tulipCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
String entry=" -tulipthread=";
	if(tulipCheckBox.isSelected()){
    
    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=tulipTextField.getText()+" ";
	    }
	} else{
    
    	    if(smartCheckBox.isSelected()) {
		tulipCheckBox.setSelected(true);
		return;
	    }
	    
 int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void sprocCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
String entry=" -sproc ";
	if(sprocCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void charmButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    charmTextField.setText(filename);
	}
    }                                           

    private void opariconstructCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                    
String entry=" -opari_construct ";
	if(opariconstructCheckBox.isSelected()){

    	    if(!opariCheckBox.isSelected()){
		opariCheckBox.doClick();
	    }    
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                   

    private void opariregionCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                 
String entry=" -opari_region ";
	if(opariregionCheckBox.isSelected()){
    
    	    if(!opariCheckBox.isSelected()){
		opariCheckBox.doClick();
	    }
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                

    private void opariButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    opariTextField.setText(filename);
	}
    }                                           

    private void opariCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
String entry=" -opari=";
	if(opariCheckBox.isSelected()){
    
	    if(!ompCheckBox.isSelected()){
		ompCheckBox.doClick();
	    }
    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=opariTextField.getText()+" ";
	    }
	} else{
    
    	    if(opariregionCheckBox.isSelected()||opariconstructCheckBox.isSelected()) {
		opariCheckBox.setSelected(true);
		return;
	    }
	    
 int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void ompCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                         
String entry=" -openmp ";
	if(ompCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
    
	    if(opariCheckBox.isSelected()) {
		ompCheckBox.setSelected(true);
		return;
	    }
    
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void pthreadsCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
String entry=" -pthread ";
	if(pthreadsCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void altshmemButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    altshmemTextField.setText(filename);
	}
    }                                              

    private void altshmemCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
	String entry =" -shmemlibrary=";
	if(altshmemCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=altshmemTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void shmemlibButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    shmemlibTextField.setText(filename);
	}
    }                                              

    private void shmemlibCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
	String entry =" -shmemlib=";
	if(shmemlibCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=shmemlibTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void shmemincButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    shmemincTextField.setText(filename);
	}
    }                                              

    private void shmemincCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
	String entry =" -shmeminc=";
	if(shmemincCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=shmemincTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void shmemCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
String entry=" -shmem ";
	if(shmemCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void mpitraceCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
String entry=" -MPITRACE ";
	if(mpitraceCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void nocomCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
String entry=" -nocomm ";
	if(nocomCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void tagCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                         
	String entry =" -tag=";
	if(tagCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=tagTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void altmpiButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    altmpiTextField.setText(filename);
	}
    }                                            

    private void altmpiCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                            
	String entry =" -mpilibrary=";
	if(altmpiCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=altmpiTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                           

    private void mpiincButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    mpiincTextField.setText(filename);
	}
    }                                            

    private void mpilibCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                            
	String entry =" -mpilib=";
	if(mpilibCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=mpilibTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                           

    private void mpilibButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    mpilibTextField.setText(filename);
	}
    }                                            

    private void mpiincCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                            

	String entry =" -mpiinc=";
	if(mpiincCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		configureline+=mpiincTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(entry);
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                           

    private void mpiCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                         
String entry=" -mpi ";
	if(mpiCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void musemultCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
	String entry=" -muse_multiple ";
	if(musemultCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	    if(!museCheckBox.isSelected()){
		museCheckBox.doClick();
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void museeventCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                               
	String entry=" -muse_event ";
	if(museeventCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	    if(!museCheckBox.isSelected()){
		museCheckBox.doClick();
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                              

    private void museCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
	String entry=" -muse ";
	if(museCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    
	    if(museeventCheckBox.isSelected() || musemultCheckBox.isSelected()) {
		museCheckBox.setSelected(true);
		return;
	    }
	    
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void dyninstButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    dyninstTextField.setText(filename);
	}
    }                                             

    private void dyninstCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
if(dyninstCheckBox.isSelected()){
	    if(configureline.indexOf(" -dyninst=")==-1){
		configureline+=" -dyninst=";
		configureline+=dyninstTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(" -dyninst=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void pdtcppComboActionPerformed(java.awt.event.ActionEvent evt) {                                            
	String input = (String)pdtcppCombo.getSelectedItem();
	
	int start = configureline.indexOf(" -pdt_c++=");
	
	if(start>-1)
	{
	    int end = configureline.indexOf(" ",  start+1);
	    if(end==-1)
	    {
	        configureline = configureline.substring(0, start);
	    } 
	    else
	    {
		configureline = configureline.substring(0, start)+configureline.substring(end+1);
	    }
	}
	

	if(!input.equals("Default"))
	{
	    configureline+=" -pdt_c++="+input+" ";
	}
	if(input.equals("xlC"))
	{
	    if(defpdtTextField.getText().equals(""))
	    {
		defpdtTextField.setText("xlC");
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                           

    private void pdtButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    pdtdirField.setText(filename);
	}
    }                                         

    private void pdtCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                         
if(pdtCheckBox.isSelected()){
	    if(configureline.indexOf(" -pdt=")==-1){
		configureline+=" -pdt=";
		configureline+=pdtdirField.getText()+" ";
	    }
	}
	else{
	    int start = configureline.indexOf(" -pdt=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void multiplecountCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                   
String entry=" -MULTIPLECOUNTERS ";
	if(multiplecountCheckBox.isSelected()){
    
	   /* if(!papiCheckBox.isSelected()){
		papiCheckBox.doClick();
	    }*/
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                  

    private void papivirtCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
String entry=" -PAPIVIRTUAL ";
	if(papivirtCheckBox.isSelected()){
    
	    if(!papiCheckBox.isSelected()){
		papiCheckBox.doClick();
	    }
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                             

    private void papiwallCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
String entry=" -PAPIWALLCLOCK ";
	if(papiwallCheckBox.isSelected()){
    
	    if(!papiCheckBox.isSelected()){
		papiCheckBox.doClick();
	    }
    
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	//System.out.println("Set "+configureline);
	commandTextArea.setText(configureline); updateITCommand();
	//System.out.println("Done "+configureline);
    }                                             

    private void papiButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    papiTextField.setText(filename);
	}
    }                                          

    private void papiCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                          
if(papiCheckBox.isSelected()){
	    if(configureline.indexOf(" -papi=")==-1){
		configureline+=" -papi=";
		configureline+=papiTextField.getText()+" ";
	    }
	}
	else{
    
    
    	    if(papiwallCheckBox.isSelected() || papivirtCheckBox.isSelected()) {//||multiplecountCheckBox.isSelected()
		papiCheckBox.setSelected(true);
		return;
	    }
    
	    int start = configureline.indexOf(" -papi=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                         

    private void pclButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    pclTextField.setText(filename);
	}
    }                                         

    private void pclCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                         
if(pclCheckBox.isSelected()){
	    if(configureline.indexOf(" -pcl=")==-1){
		configureline+=" -pcl=";
		configureline+=pclTextField.getText()+" ";
	    }
	}
	
	else{
	    int start = configureline.indexOf(" -pcl=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void profileCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
	if(profileCheckBox.isSelected()){
	    if(traceCheckBox.isSelected()) {
		if(configureline.indexOf(" -PROFILE ")==-1)
		    configureline+=" -PROFILE ";
		if(configureline.indexOf(" -TRACE ")==-1)
		    configureline+=" -TRACE ";
	    }
	} else {
	    
	    if(compensateCheckBox.isSelected() || profmemoryCheckBox.isSelected() || profheadroomCheckBox.isSelected() || profcallpathCheckBox.isSelected()) {
		profileCheckBox.setSelected(true);
		return;
	    }
	    
	    if(!traceCheckBox.isSelected()) {
		profileCheckBox.doClick();
	    } else{
		if(configureline.indexOf(" -PROFILE ")>-1) {
		    configureline = configureline.replaceFirst(" -PROFILE ","");
		}
	    }
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void compensateCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                
	if(compensateCheckBox.isSelected()){
	    if(configureline.indexOf(" -COMPENSATE ")==-1){
		configureline+=" -COMPENSATE ";
	    }
	    if(!profileCheckBox.isSelected()){
		profileCheckBox.doClick();
	    }
	} else{
	    if(configureline.indexOf(" -COMPENSATE ")>-1)
		configureline = configureline.replaceFirst(" -COMPENSATE ","");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                               

    private void profcallpathCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                  
	if(profcallpathCheckBox.isSelected()){
	    if(configureline.indexOf(" -PROFILECALLPATH ")==-1){
		configureline+=" -PROFILECALLPATH ";
	    }
	    if(!profileCheckBox.isSelected()){
		profileCheckBox.doClick();
	    }
	} else{
	    if(configureline.indexOf(" -PROFILECALLPATH ")>-1)
		configureline = configureline.replaceFirst(" -PROFILECALLPATH ","");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                 

    private void profheadroomCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                  
	if(profheadroomCheckBox.isSelected()){
	    if(configureline.indexOf(" -PROFILEHEADROOM ")==-1){
		configureline+=" -PROFILEHEADROOM ";
	    }
	    if(!profileCheckBox.isSelected()){
		profileCheckBox.doClick();
	    }
	} else{
	    if(configureline.indexOf(" -PROFILEHEADROOM ")>-1)
		configureline = configureline.replaceFirst(" -PROFILEHEADROOM ","");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                                 

    private void profmemoryCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                
	if(profmemoryCheckBox.isSelected()){
	    if(configureline.indexOf(" -PROFILEMEMORY ")==-1){
		configureline+=" -PROFILEMEMORY ";
	    }
	    if(!profileCheckBox.isSelected()){
		profileCheckBox.doClick();
	    }
	} else{
	    if(configureline.indexOf(" -PROFILEMEMORY ")>-1)
		configureline = configureline.replaceFirst(" -PROFILEMEMORY ","");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                               

    private void traceCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
	if(traceCheckBox.isSelected()) {
	    if(profileCheckBox.isSelected()) {
		if(configureline.indexOf(" -PROFILE ")==-1)
		    configureline+=" -PROFILE ";
		if(configureline.indexOf(" -TRACE ")==-1)
		    configureline+=" -TRACE ";
	    }
	} else {
	    if(epilogCheckBox.isSelected() || slog2CheckBox.isSelected() || vtfCheckBox.isSelected()) {
		traceCheckBox.setSelected(true);
		return;
	    }
	    
	    if(!profileCheckBox.isSelected()) {
		profileCheckBox.doClick();//setSelected(true);
	    }
	    if(configureline.indexOf(" -PROFILE ")>-1)
		configureline = configureline.replaceFirst(" -PROFILE ","");
	    //configureline+=" -PROFILE";
	    if(configureline.indexOf(" -TRACE ")>-1)
		configureline = configureline.replaceFirst(" -TRACE ","");
	    //configureline+=" -TRACE";
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void epilogCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                            
	if(epilogCheckBox.isSelected()){
	    if(configureline.indexOf(" -epilog=")==-1){
		configureline+=" -epilog=";
		configureline+=epilogTextField.getText()+" ";
	    }
	    
	    if(!traceCheckBox.isSelected()){
		traceCheckBox.doClick();
	    }
	}
	
	else{
	    int start = configureline.indexOf(" -epilog=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                           

    private void slog2CheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                           
	if(slog2CheckBox.isSelected()){
	    if(configureline.indexOf(" -slog2 ")==-1){
		configureline+=" -slog2 ";
	    }
	    
	    if(!traceCheckBox.isSelected()){
		traceCheckBox.doClick();
	    }
	    if(slog2exCheckBox.isSelected()){
		slog2exCheckBox.setSelected(false);
	    }
	}
	
	else{
	    
	    if(configureline.indexOf(" -slog2 ")>-1)
		configureline = configureline.replaceFirst(" -slog2 ","");
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                          

    private void slog2exCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
	if(slog2exCheckBox.isSelected()){
	    if(configureline.indexOf(" -slog2=")==-1){
		configureline+=" -slog2=";
		configureline+=slog2TextField.getText()+" ";
	    }
	    
	    if(!traceCheckBox.isSelected()){
		traceCheckBox.doClick();
	    }
	    if(slog2CheckBox.isSelected()){
		slog2CheckBox.setSelected(false);
	    }
	}
	
	else{
	    int start = configureline.indexOf(" -slog2=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void vtfCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                         
	if(vtfCheckBox.isSelected()){
	    if(configureline.indexOf(" -vtf=")==-1){
		configureline+=" -vtf=";
		configureline+=vtfTextField.getText()+" ";
	    }
	    
	    if(!traceCheckBox.isSelected()){
		traceCheckBox.doClick();
	    }
	}
	
	else{
	    int start = configureline.indexOf(" -vtf=");
	    if(start>-1){
		int end = configureline.indexOf(" ",  start+1);
		if(end==-1){
		    configureline = configureline.substring(0, start);
		} else{
		    configureline = configureline.substring(0, start)+configureline.substring(end+1);
		}
		
	    }
	}
	
	commandTextArea.setText(configureline); updateITCommand();
    }                                        

    private void epilogButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
//if (e.getSource() == openButton) {
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    epilogTextField.setText(filename);
	    //This is where a real application would open the file.
	    //  log.append("Opening: " + file.getName() + "." + newline);
	}// else {
	//log.append("Open command cancelled by user." + newline);
	// }
	//}
    }                                            

    private void slog2ButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    slog2TextField.setText(filename);
	}
    }                                           

    private void vtfButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
	int returnVal = jFileChooser1.showOpenDialog(null);
	
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File file = jFileChooser1.getSelectedFile();
	    String filename = file.getAbsolutePath();
	    vtfTextField.setText(filename);
	}
    }                                         

    private void profphaseCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                               
	if(profphaseCheckBox.isSelected()){
	    if(configureline.indexOf(" -PROFILEPHASE ")==-1){
		configureline+=" -PROFILEPHASE ";
	    }
	} else{
	    if(configureline.indexOf(" -PROFILEPHASE ")>-1)
		configureline = configureline.replaceFirst(" -PROFILEPHASE ","");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                              

    private void depthlimitCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                                
	String entry=" -DEPTHLIMIT ";
	if(depthlimitCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                               

    private void cputimeCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
	String entry=" -CPUTIME ";
	if(cputimeCheckBox.isSelected()){
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                            

    private void craytimeCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                              
	String entry=" -CRAYTIME ";
	if(craytimeCheckBox.isSelected()){
	    if(linuxtimeCheckBox.isSelected()){
		linuxtimeCheckBox.setSelected(false);
	    }
	    if(sgitimeCheckBox.isSelected()){
		sgitimeCheckBox.setSelected(false);
	    }
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
		//System.out.println(configureline);
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	//System.out.println("Set "+configureline);
	commandTextArea.setText(configureline); updateITCommand();
	//System.out.println("Done "+configureline);
    }                                             

    private void linuxtimeCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                               
	String entry=" -LINUXTIME ";
	if(linuxtimeCheckBox.isSelected()){
	    if(sgitimeCheckBox.isSelected()){
		sgitimeCheckBox.setSelected(false);;
	    }
	    if(craytimeCheckBox.isSelected()){
		craytimeCheckBox.setSelected(false);;
	    }
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                              

    private void sgitimeCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {                                             
	String entry=" -SGITIME ";
	if(sgitimeCheckBox.isSelected()){
	    if(linuxtimeCheckBox.isSelected()){
		linuxtimeCheckBox.setSelected(false);;
	    }
	    if(craytimeCheckBox.isSelected()){
		craytimeCheckBox.setSelected(false);;
	    }
	    if(configureline.indexOf(entry)==-1){
		configureline+=entry;
	    }
	} else{
	    if(configureline.indexOf(entry)>-1)
		configureline = configureline.replaceFirst(entry,"");
	}
	commandTextArea.setText(configureline); updateITCommand();
    }                                            
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TAU_Conf().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton altmpiButton;
    private javax.swing.JCheckBox altmpiCheckBox;
    private javax.swing.JButton altmpiQjButton;
    private javax.swing.JTextField altmpiTextField;
    private javax.swing.JButton altshmemButton;
    private javax.swing.JCheckBox altshmemCheckBox;
    private javax.swing.JButton altshmemQjButton;
    private javax.swing.JTextField altshmemTextField;
    private javax.swing.JComboBox archCombo;
    private javax.swing.JLabel archLabel;
    private javax.swing.JButton archQjButton;
    private javax.swing.JButton archdirButton;
    private javax.swing.JCheckBox archdirCheckBox;
    private javax.swing.JTextField archdirField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cQjButton;
    private javax.swing.JButton callpathQjButton;
    private javax.swing.JComboBox ccCombo;
    private javax.swing.JLabel cccompLabel;
    private javax.swing.JButton charmButton;
    private javax.swing.JCheckBox charmCheckBox;
    private javax.swing.JPanel charmPanel;
    private javax.swing.JButton charmQjButton;
    private javax.swing.JTextField charmTextField;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JTextArea commandTextArea;
    private javax.swing.JCheckBox compensateCheckBox;
    private javax.swing.JButton compensateQjButton;
    private javax.swing.JPanel compilerPanel;
    private javax.swing.JButton confButton;
    private javax.swing.JScrollPane confjScrollPane;
    private javax.swing.JComboBox cppCombo;
    private javax.swing.JButton cppQjButton;
    private javax.swing.JLabel cppcompLabel;
    private javax.swing.JButton cputQjButton;
    private javax.swing.JCheckBox cputimeCheckBox;
    private javax.swing.JButton craytQjButton;
    private javax.swing.JCheckBox craytimeCheckBox;
    private javax.swing.JButton custarchQjButton;
    private javax.swing.JButton custinstQjButton;
    private javax.swing.JCheckBox defccCheckBox;
    private javax.swing.JTextField defccTextField;
    private javax.swing.JCheckBox defcppCheckBox;
    private javax.swing.JTextField defcppTextField;
    private javax.swing.JCheckBox deffortranCheckBox;
    private javax.swing.JTextField deffortranTextField;
    private javax.swing.JCheckBox defpdtCheckBox;
    private javax.swing.JTextField defpdtTextField;
    private javax.swing.JButton depthQjButton;
    private javax.swing.JCheckBox depthlimitCheckBox;
    private javax.swing.JPanel dirarcPanel;
    private javax.swing.JButton dyninstButton;
    private javax.swing.JCheckBox dyninstCheckBox;
    private javax.swing.JPanel dyninstPanel;
    private javax.swing.JButton dyninstQjButton;
    private javax.swing.JTextField dyninstTextField;
    private javax.swing.JButton epilogButton;
    private javax.swing.JCheckBox epilogCheckBox;
    private javax.swing.JButton epilogQjButton;
    private javax.swing.JTextField epilogTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton fortQjButton;
    private javax.swing.JComboBox fortranCombo;
    private javax.swing.JLabel fortrancompLabel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JButton headroomQjButton;
    private javax.swing.JButton instButton;
    private javax.swing.JTextArea instTextArea;
    private javax.swing.JPanel installationPanel;
    private javax.swing.JButton installdirButton;
    private javax.swing.JCheckBox installdirCheckBox;
    private javax.swing.JTextField installdirField;
    private javax.swing.JScrollPane instjScrollPane;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton javatQjButton;
    private javax.swing.JButton jdkButton;
    private javax.swing.JTextField jdkField;
    private javax.swing.JPanel jdkPanel;
    private javax.swing.JButton jdkQjButton;
    private javax.swing.JButton linuxtQjButton;
    private javax.swing.JCheckBox linuxtimeCheckBox;
    private javax.swing.JButton makejButton;
    private javax.swing.JButton memorypQjButton;
    private javax.swing.JPanel messagePannel;
    private javax.swing.JCheckBox mpiCheckBox;
    private javax.swing.JPanel mpiPanel;
    private javax.swing.JButton mpiQjButton;
    private javax.swing.JButton mpiincButton;
    private javax.swing.JCheckBox mpiincCheckBox;
    private javax.swing.JButton mpiincQjButton;
    private javax.swing.JTextField mpiincTextField;
    private javax.swing.JButton mpilibButton;
    private javax.swing.JCheckBox mpilibCheckBox;
    private javax.swing.JButton mpilibQjButton;
    private javax.swing.JTextField mpilibTextField;
    private javax.swing.JCheckBox mpitraceCheckBox;
    private javax.swing.JButton mpitraceQjButton;
    private javax.swing.JButton multcountQjButton;
    private javax.swing.JCheckBox multiplecountCheckBox;
    private javax.swing.JCheckBox museCheckBox;
    private javax.swing.JPanel musePanel;
    private javax.swing.JButton museQjButton;
    private javax.swing.JButton museeQjButton;
    private javax.swing.JCheckBox museeventCheckBox;
    private javax.swing.JButton musemQjButton;
    private javax.swing.JCheckBox musemultCheckBox;
    private javax.swing.JCheckBox nocomCheckBox;
    private javax.swing.JButton nocommQjButton;
    private javax.swing.JButton noexQjButton;
    private javax.swing.JCheckBox noexceptCheckBox;
    private javax.swing.JCheckBox ompCheckBox;
    private javax.swing.JPanel ompPanel;
    private javax.swing.JButton opariButton;
    private javax.swing.JCheckBox opariCheckBox;
    private javax.swing.JButton opariQjButton;
    private javax.swing.JTextField opariTextField;
    private javax.swing.JCheckBox opariconstructCheckBox;
    private javax.swing.JButton opariconstructQjButton;
    private javax.swing.JCheckBox opariregionCheckBox;
    private javax.swing.JButton opariregionQjButton;
    private javax.swing.JButton openmpQjButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JButton papiButton;
    private javax.swing.JCheckBox papiCheckBox;
    private javax.swing.JPanel papiPanel;
    private javax.swing.JButton papiQjButton;
    private javax.swing.JTextField papiTextField;
    private javax.swing.JCheckBox papivirtCheckBox;
    private javax.swing.JButton papivirtQjButton;
    private javax.swing.JCheckBox papiwallCheckBox;
    private javax.swing.JButton papiwallQjButton;
    private javax.swing.JButton pclButton;
    private javax.swing.JCheckBox pclCheckBox;
    private javax.swing.JPanel pclPanel;
    private javax.swing.JButton pclQjButton;
    private javax.swing.JTextField pclTextField;
    private javax.swing.JButton pdtButton;
    private javax.swing.JCheckBox pdtCheckBox;
    private javax.swing.JLabel pdtCompilerLabel;
    private javax.swing.JPanel pdtPanel;
    private javax.swing.JButton pdtQjButton;
    private javax.swing.JComboBox pdtcppCombo;
    private javax.swing.JButton pdtcppQjButton;
    private javax.swing.JTextField pdtdirField;
    private javax.swing.JButton phaseQjButton;
    private javax.swing.JCheckBox profcallpathCheckBox;
    private javax.swing.JCheckBox profheadroomCheckBox;
    private javax.swing.JCheckBox profileCheckBox;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JButton profileQjButton;
    private javax.swing.JCheckBox profmemoryCheckBox;
    private javax.swing.JCheckBox profphaseCheckBox;
    private javax.swing.JCheckBox profstatsCheckBox;
    private javax.swing.JCheckBox pthreadsCheckBox;
    private javax.swing.JPanel pthreadsPanel;
    private javax.swing.JButton pthreadsQjButton;
    private javax.swing.JPanel pythonPanel;
    private javax.swing.JButton pythonincButton;
    private javax.swing.JTextField pythonincField;
    private javax.swing.JButton pythonincQjButton;
    private javax.swing.JButton pythonlibButton;
    private javax.swing.JCheckBox pythonlibCheckBox;
    private javax.swing.JTextField pythonlibField;
    private javax.swing.JButton pythonlibQjButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton sgitQjButton;
    private javax.swing.JCheckBox sgitimeCheckBox;
    private javax.swing.JCheckBox shmemCheckBox;
    private javax.swing.JPanel shmemPanel;
    private javax.swing.JButton shmemQjButton;
    private javax.swing.JButton shmemincButton;
    private javax.swing.JCheckBox shmemincCheckBox;
    private javax.swing.JButton shmemincQjButton;
    private javax.swing.JTextField shmemincTextField;
    private javax.swing.JButton shmemlibButton;
    private javax.swing.JCheckBox shmemlibCheckBox;
    private javax.swing.JButton shmemlibQjButton;
    private javax.swing.JTextField shmemlibTextField;
    private javax.swing.JButton slog2Button;
    private javax.swing.JCheckBox slog2CheckBox;
    private javax.swing.JButton slog2QjButton;
    private javax.swing.JTextField slog2TextField;
    private javax.swing.JButton slog2eQjButton;
    private javax.swing.JCheckBox slog2exCheckBox;
    private javax.swing.JCheckBox smartCheckBox;
    private javax.swing.JButton smartQjButton;
    private javax.swing.JCheckBox sprocCheckBox;
    private javax.swing.JPanel sprocPanel;
    private javax.swing.JButton sprocQjButton;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JCheckBox tagCheckBox;
    private javax.swing.JButton tagQjButton;
    private javax.swing.JTextField tagTextField;
    private javax.swing.JPanel threadPanel;
    private javax.swing.JPanel timePanel;
    private javax.swing.JCheckBox traceCheckBox;
    private javax.swing.JPanel tracePanel;
    private javax.swing.JButton traceQjButton;
    private javax.swing.JButton tulipButton;
    private javax.swing.JCheckBox tulipCheckBox;
    private javax.swing.JButton tulipQjButton;
    private javax.swing.JTextField tulipTextField;
    private javax.swing.JPanel tulipthreadsPanel;
    private javax.swing.JCheckBox usejavatimersCheckBox;
    private javax.swing.JCheckBox usejdkCheckBox;
    private javax.swing.JCheckBox usepythonCheckbox;
    private javax.swing.JCheckBox useroptCheckBox;
    private javax.swing.JTextField useroptField;
    private javax.swing.JButton useroptQjButton;
    private javax.swing.JButton vtfButton;
    private javax.swing.JCheckBox vtfCheckBox;
    private javax.swing.JButton vtfQjButton;
    private javax.swing.JTextField vtfTextField;
    // End of variables declaration
    
}
