#!/bin/sh 

export LANG=C

eval `tau-config`


echoIfVerbose () {
    if [ $verbose = "true" ] ; then
	echo -e "$1"
    fi
}

usage()
{
    echo ""
    echo "Usage: tau_exec [options] [--] <exe> <exe options>"
    echo ""
# Common options first
    echo "Options:"

    echo "        -v       verbose mode"
    echo "        -io      track I/O"
    echo "        -memory  track memory"
    options=`tau-config --list-options`
    echo "        -T <$options> : specify TAU option"
    echo "        -XrunTAUsh-<options> : specify TAU library directly"
    echo ""
    echo "Notes:"
    echo "	Defaults if unspecified: -T MPI"
    echo "	MPI is assumed unless SERIAL is specified"
    echo ""
    echo "Example:"
    echo "    mpirun -np 2 tauex -io ./ring"
    echo ""
    exit
}

if [ $# = 0 ] ; then
    usage
fi


dryrun="false"
processT="false"
TauOptions=""
TauOptionsExclude=""
verbose=false
binding_specified=""
binding_options=""
track_io=false
track_memory=false
TAU_PAPI_DEFAULT_DOMAIN=PAPI_DOM_USER


for arg in "$@" ; do
  # Thanks to Bernd Mohr for the following that handles quotes and spaces (see configure for explanation)
  modarg=`echo "x$arg" | sed -e 's/^x//' -e 's/"/\\\"/g' -e s,\',%@%\',g -e 's/%@%/\\\/g' -e 's/ /\\\ /g'`

  if [ "$processT" = "true" ] ; then
      binding_options=`echo $binding_options $arg | sed -e 's/,/ /g' | tr [A-Z] [a-z]`
      processT="false"
      shift
  else
      case $arg in 
	  -v|-d|-verbose|--verbose)
	      verbose=true
	      shift
	      ;;
	  -h|-help|--help)
	      usage
	      ;;
	  -io)
	      track_io=true
	      shift
	      ;;
	  -memory)
	      track_memory=true
	      shift
	      ;;
	  -s)
	      dryrun=true
	      shift
	      ;;
	  -V)
	      echo '$Id: tau_exec,v 1.7 2010/04/29 19:19:40 amorris Exp $';
	      exit 0;
	      ;;
	  -T)
	      processT=true
	      shift
	      ;;
	  -tau:*)
              binding_options="$binding_options `echo $arg | sed -e 's/-tau://' -e 's/,/ /g'`"
              ;;
	  -XrunTAU-*)
	      myarg=`echo $arg | sed 's/-XrunTAU-//'`
	      binding_specified="shared-$myarg"
	      shift
	      ;;
	  -XrunTAUsh-*)
	      myarg=`echo $arg | sed 's/-XrunTAUsh-//'`
	      binding_specified="shared-$myarg"
	      shift
	      ;;
	  --)
	      shift
	      break
	      ;;
	  -*)
	      echo "Unknown option: $arg" >&2
	      exit 1
# First non-option signifies end of options. This would be much easier with getopt()
	      ;;
	  *)
	      break
	      ;;
      esac
  fi
done


if [ "x$TAU_PAPI_DOMAIN" = "x" ]; then
    TAU_PAPI_DOMAIN=$TAU_PAPI_DEFAULT_DOMAIN
fi


# choose TAU library
new_binding_options=""
if [ "x$binding_options" != "x" ]; then
    for i in $binding_options ; do
      case $i in 
	  *)
	      new_binding_options="$new_binding_options $i"
	      ;;
      esac
    done
fi
binding_options="$new_binding_options"


if [ "x$binding_specified" = "x" ] ; then
    if [ "x$binding_options" = "x" ]; then
	binding_options=$DEFAULT_BINDING
    else
        # Add MPI by default
	serial=`echo $binding_options | grep serial`
	if [ $? != 0 ] ; then
	    binding_options="$binding_options mpi"
	fi
    fi
    theBinding=`tau-config --binding $binding_options`
    if [ $? != 0 ] ; then
	exit 1
    fi
else
    theBinding=$binding_specified
fi



if [ $verbose = "true" ] ; then
    echo ""
    echo "Program to run : $@"
    echo ""
fi


if [ `uname -s ` = Darwin ]; then
  apple=1
  TAU_SHLIBX=.dylib
else
  apple=0
  TAU_SHLIBX=.so
fi

TAUEX_LD_LIBRARY_PATH=$BASEDIR/lib/$theBinding:$LD_LIBRARY_PATH
if [ $apple = 1 ]; then
  TAUEX_LD_PRELOAD=$BASEDIR/lib/$theBinding/libTAU$TAU_SHLIBX
else
  TAUEX_LD_PRELOAD=$BASEDIR/lib/$theBinding/libTAU$TAU_SHLIBX:$LD_PRELOAD
fi

if [ $track_io = "true" ] ; then
    # Add the io wrapper library to the LD_PRELOAD list
    TAUEX_LD_PRELOAD=$BASEDIR/lib/$theBinding/libTAU-iowrap$TAU_SHLIBX:$TAUEX_LD_PRELOAD
fi

if [ $track_memory = "true" ] ; then
    # Add the memory wrapper library to the LD_PRELOAD list
    TAUEX_LD_PRELOAD=$BASEDIR/lib/$theBinding/libTAU-memorywrap$TAU_SHLIBX:$TAUEX_LD_PRELOAD
fi

if [ $apple = 1 ]; then
  TAU_LDD='otool -L'
else
  TAU_LDD=ldd
fi

echo $TAU_LDD $1 | grep libTAU$TAU_SHLIBX 
$TAU_LDD $1 | grep libTAU$TAU_SHLIBX &> /dev/null
if [ $? == 1 ] ; then
    nm $1 | grep Tau_init &> /dev/null
    if [ $? == 1 ] ; then
	echoIfVerbose "TAU: Detected uninstrumented binary, adding TAU preload wrapper"
	TAUEX_LD_PRELOAD=$TAUEX_LD_PRELOAD:$BASEDIR/lib/$theBinding/libTAU-preload$TAU_SHLIBX
    else
	echoIfVerbose "TAU: Detected instrumented binary, not using TAU preload wrapper"
    fi
else 
    echoIfVerbose "TAU: Detected instrumented binary, not using TAU preload wrapper"
fi


if [ $verbose = "true" ] ; then
    echo "Matching bindings:"
    tau-config --list-matching $binding_options
    echo ""
    echo "Using:"
    echo "$theBinding"
    echo ""
    echo "Configuration:"
    echo ""
    echo "Setting LD_LIBRARY_PATH to $TAUEX_LD_LIBRARY_PATH"
    echo "Setting LD_PRELOAD to $TAUEX_LD_PRELOAD"
    echo ""
fi


# execute the program
if [ $dryrun = "true" ]; then
    if [ $apple = 1 ]; then
      echo "export DYLD_LIBRARY_PATH=$TAUEX_LD_LIBRARY_PATH"
      echo "export DYLD_INSERT_LIBRARIES=$TAUEX_LD_PRELOAD"
      echo "export DYLD_FORCE_FLAT_NAMESPACE="
    else
      echo "export LD_LIBRARY_PATH=$TAUEX_LD_LIBRARY_PATH"
      echo "export LD_PRELOAD=$TAUEX_LD_PRELOAD"
    fi
    echo "$@"
    exit 0;
else
    if [ $apple = 1 ]; then
      export DYLD_LIBRARY_PATH=$TAUEX_LD_LIBRARY_PATH
      export DYLD_INSERT_LIBRARIES=$TAUEX_LD_PRELOAD
      export DYLD_FORCE_FLAT_NAMESPACE=""
    else
      export LD_LIBRARY_PATH=$TAUEX_LD_LIBRARY_PATH
      export LD_PRELOAD=$TAUEX_LD_PRELOAD
    fi
    "$@"
    retval=$?
    unset LD_PRELOAD
    exit $retval
fi
