#created on: Aug 5, 2007
package rules

#list any import classes here.
import glue.DifferenceMetadataOperation;
import glue.DifferenceOperation;
import glue.PerformanceDifferenceType;
import glue.DataNeeded;
import glue.MeanEventFact;
import glue.DerivedMetrics;
import glue.ScalabilityResult;

#declare any global variables here

#function myFunction( ... ) 
    #function content (can have multiple functions) 
#end


rule "High Inefficiency"
	when 
		// there is a inefficiency rate higher than the average inefficiency rate
		f : MeanEventFact ( m : metric == "(FP_OPS_RETIRED*(BACK_END_BUBBLE_ALL/CPU_CYCLES))", b : betterWorse == MeanEventFact.HIGHER, severity : severity > 0.02, e : eventName, a : mainValue, v : eventValue )
	then
		//System.out.println ( f.toString() );
		System.out.println("The event " + e + " has a higher than average inefficiency");
		System.out.println("\tAverage Inefficiency: " + a + ", Event Inefficiency: " + v);
		System.out.println("\tPercentage of total runtime: " + f.getPercentage());
end

rule "Load Imbalance"
	when 
		// there is a inefficiency rate higher than the average inefficiency rate
		f : MeanEventFact ( m : metric == "P_WALL_CLOCK_TIME", b : betterWorse == MeanEventFact.HIGHER, severity : severity > 0.02, e : eventName, a : mainValue, v : eventValue )
	then
		//System.out.println ( f.toString() );
		System.out.println("The event " + e + " has a high load imbalance");
		System.out.println("\tMean/Stddev ratio: " + a + ", Stddev actual: " + v);
		System.out.println("\tPercentage of total runtime: " + f.getPercentage());
		System.out.println("If this event is an OpenMP parallel region, consider methods to balance the workload, including dynamic instead of static work assignment");
end

