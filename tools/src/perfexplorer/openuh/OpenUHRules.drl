#created on: Aug 5, 2007
package rules

#list any import classes here.
import glue.PerformanceAnalysisOperation;;
import glue.Provenance;
import glue.Script;
import glue.MeanEventFact;

#declare any global variables here

#function myFunction( ... ) 
    #function content (can have multiple functions) 
#end


rule "High FP Inefficiency"
	when 
		// there is a inefficiency rate higher than the average inefficiency rate
		f : MeanEventFact ( m : metric == "(FP_OPS_RETIRED*(BACK_END_BUBBLE_ALL/CPU_CYCLES))", b : betterWorse == MeanEventFact.HIGHER, severity : severity > 0.02, e : eventName, a : mainValue, v : eventValue )
	then
		//System.out.println ( f.toString() );
		System.out.println("The event " + e + " has a higher than average FP inefficiency");
		System.out.println("\tAverage Inefficiency: " + a + ", Event Inefficiency: " + v);
		System.out.println("\tPercentage of total runtime: " + f.getPercentage());
		// get the last operation from the provenance
		PerformanceAnalysisOperation operation = Provenance.getLastOperation();
		Script.getInstance().addParameter(operation.getOutputs().get(0));
		Script.execute("openuh/totalStalls.py");
end

rule "High Inefficiency"
	when 
		// there is a inefficiency rate higher than the average inefficiency rate
		f : MeanEventFact ( m : metric == "(IA64_INST_RETIRED_THIS*(BACK_END_BUBBLE_ALL/CPU_CYCLES))", b : betterWorse == MeanEventFact.HIGHER, severity : severity > 0.02, e : eventName, a : mainValue, v : eventValue )
	then
		//System.out.println ( f.toString() );
		System.out.println("The event " + e + " has a higher than average inefficiency");
		System.out.println("\tAverage Inefficiency: " + f.getPercentage(a) + ", Event Inefficiency: " + f.getPercentage(v));
		System.out.println("\tPercentage of total runtime: " + f.getPercentage());
		// get the last operation from the provenance
		PerformanceAnalysisOperation operation = Provenance.getLastOperation();
		Script.getInstance().addParameter(operation.getOutputs().get(0));
		Script.execute("openuh/totalStalls.py");
end

rule "Load Imbalance"
	when 
		// there is a load imbalance for one event which is a significant event
		// f : MeanEventFact ( m : metric == "P_WALL_CLOCK_TIME", b : betterWorse == MeanEventFact.HIGHER, severity : severity > 0.05, e : eventName, a : mainValue > 0.05, v : eventValue )
		f : MeanEventFact ( m : metric, b : betterWorse == MeanEventFact.HIGHER, severity : severity > 0.05, e : eventName, a : mainValue > 0.05, v : eventValue )
	then
		//System.out.println ( f.toString() );
		System.out.println("The event " + e + " has a high load imbalance for metric " + m);
		System.out.println("\tMean/Stddev ratio: " + a + ", Stddev actual: " + v);
		System.out.println("\tPercentage of total runtime: " + f.getPercentage());
		assert(new FactWrapper("Imbalanced Event", e, null));
end

rule "New Schedule Suggested"
	when
		f1 : FactWrapper ( factName == "Imbalanced Event", e1 : factType )
		f2 : FactWrapper ( factName == "Imbalanced Event", e2 : factType != e1 )
		f3 : FactWrapper ( factName == "Callpath name/value", e3 : factType )
		eval ( e3.equals( e1 + " => " + e2) )
	then
		System.out.println(e1 + " calls " + e2 + ", and they are both showing signs of load imbalance.");
		System.out.println("If these events are in an OpenMP parallel region, consider methods to balance the workload, including dynamic instead of static work assignment.");
end

rule "Examination of Stalls"
	when 
		// If most of the stalls from a region of code are L1 data cache misses and FP stalls,
		// then issue a warning to that effect.  
		// The metric name is hairy - see the totalstalls.py script for details.
		//f : MeanEventFact ( m : metric == "((((BE_L1D_FPU_BUBBLE_L1D+BE_EXE_BUBBLE_GRALL)-BE_EXE_BUBBLE_GRGR)/BACK_END_BUBBLE_ALL)+((BE_EXE_BUBBLE_FRALL+BE_L1D_FPU_BUBBLE_FPU)/BACK_END_BUBBLE_ALL))", severity : severity > 0.02, e : eventName, v : eventValue > 0.50 )
		f : MeanEventFact ( m : metric == "((((BE_L1D_FPU_BUBBLE_L1D+BE_EXE_BUBBLE_GRALL)-BE_EXE_BUBBLE_GRGR)/BACK_END_BUBBLE_ALL)+((BE_EXE_BUBBLE_FRALL+BE_L1D_FPU_BUBBLE_FPU)/BACK_END_BUBBLE_ALL))", severity : severity, e : eventName, v : eventValue )
	then
		//System.out.println ( f.toString() );
		System.out.println("The event " + e + " has a high percentage of stalls due to L1 data cache misses and FP Stalls.");
		System.out.println("\tPercent of Stalls due to these two reasons: " + f.getPercentage(v));
		System.out.println("\tPercentage of total runtime: " + f.getPercentage(severity));
end

