connect to perfdmf

CREATE TABLE application ( \
	id						INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, \
	name					CLOB NOT NULL, \
	version					CLOB DEFAULT '1.0', \
	description				CLOB, \
	language				CLOB, \
	paradigm				CLOB, \
    algorithms              TEXT, \
    lines_of_code	    TEXT, \
    big_lil_endian	    TEXT, \
    directives		    TEXT, \
    memory_intensity	    TEXT, \
    communication_intensity TEXT, \
    cpu_intensity	    TEXT, \
    os_requirements	    TEXT, \
    other_requirements	    TEXT, \
    spectral_or_physical_mesh	TEXT, \
    static_or_adaptive_mesh	TEXT, \
    structured_or_unstructured_mesh	TEXT, \
    code_history	    TEXT,     \
    primary_industry	    TEXT, \
    primary_technology_area TEXT, \
    rib_entry		    TEXT \
)

CREATE TABLE experiment ( \
    id                      INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, \
    application             INT             NOT NULL, \
    name                    TEXT, \
    sysinfo                 TEXT, \
    configinfo		    TEXT, \
    instruinfo		    TEXT, \
    compilerinfo	    TEXT, \
 	FOREIGN KEY(application) REFERENCES application(id) ON DELETE NO ACTION \
)

CREATE TABLE trial ( \
    id                      INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, \
    name                    VARCHAR(100), \
    experiment              INT             NOT NULL, \
    date                    TIMESTAMP,       \
    collectorid		    INT, \
    node_count              INT, \
    contexts_per_node       INT, \
    threads_per_context     INT, \
	FOREIGN KEY(experiment) REFERENCES experiment(id) ON DELETE NO ACTION \
)

CREATE TABLE metric ( \
    id                      INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, \
    name                    CLOB            NOT NULL, \
    trial                   INT				NOT NULL, \
	FOREIGN KEY(trial) REFERENCES trial(id) ON DELETE NO ACTION \
)

CREATE TABLE interval_event ( \
    id                      INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, \
    trial                   INT             NOT NULL, \
    name                    CLOB            NOT NULL, \
    group_name              TEXT, \
    source_file		    TEXT, \
    line_number		    INT, \
    line_number_end	    INT, \
 	FOREIGN KEY(trial) REFERENCES trial(id) ON DELETE NO ACTION \
)

CREATE TABLE atomic_event ( \
    id                      INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, \
    trial                   INT              NOT NULL, \
    name                    CLOB             NOT NULL, \
    group_name              TEXT, \
    source_file		        TEXT, \
    line_number		        INT, \
	FOREIGN KEY(trial) REFERENCES trial(id) ON DELETE NO ACTION \
)

CREATE TABLE interval_location_profile ( \
    function                INT              NOT NULL, \
    node                    INT              NOT NULL,              \
    context                 INT              NOT NULL, \
    thread                  INT              NOT NULL, \
    metric                  INT				 NOT NULL, \
    inclusive_percentage    DOUBLE, \
    inclusive               DOUBLE, \
    exclusive_percentage    DOUBLE, \
    exclusive               DOUBLE, \
    call                    DOUBLE, \
    subroutines             DOUBLE, \
    inclusive_per_call      DOUBLE, \
    sum_exclusive_squared   DOUBLE, \
	FOREIGN KEY(function) REFERENCES function(id) ON DELETE NO ACTION, \
	FOREIGN KEY(metric) REFERENCES metric(id) ON DELETE NO ACTION \
)

CREATE TABLE atomic_location_profile ( \
    atomic_event            INT              NOT NULL, \
    node                    INT              NOT NULL,              \
    context                 INT              NOT NULL, \
    thread                  INT              NOT NULL, \
    sample_count            INT    ,          \
    maximum_value           DOUBLE, \
    minimum_value           DOUBLE, \
    mean_value              DOUBLE, \
    standard_deviation      DOUBLE, \
	FOREIGN KEY(user_event) REFERENCES user_event(id) ON DELETE NO ACTION \
)

CREATE TABLE interval_total_summary ( \
    interval_event          INT              NOT NULL, \
    metric                  INT				 NOT NULL, \
    inclusive_percentage    DOUBLE, \
    inclusive               DOUBLE, \
    exclusive_percentage    DOUBLE, \
    exclusive               DOUBLE, \
    call                    DOUBLE, \
    subroutines             DOUBLE, \
    inclusive_per_call      DOUBLE, \
    sum_exclusive_squared   DOUBLE, \
	FOREIGN KEY(function) REFERENCES function(id) ON DELETE NO ACTION, \
	FOREIGN KEY(metric) REFERENCES metric(id) ON DELETE NO ACTION \
)

CREATE TABLE interval_mean_summary ( \
    interval_event          INT              NOT NULL, \
    metric                  INT				 NOT NULL, \
    inclusive_percentage    DOUBLE, \
    inclusive               DOUBLE, \
    exclusive_percentage    DOUBLE, \
    exclusive               DOUBLE, \
    call                    DOUBLE, \
    subroutines             DOUBLE, \
    inclusive_per_call      DOUBLE, \
    sum_exclusive_squared   DOUBLE, \
	FOREIGN KEY(function) REFERENCES function(id) ON DELETE NO ACTION, \
	FOREIGN KEY(metric) REFERENCES metric(id) ON DELETE NO ACTION \
)

CREATE INDEX exp_app_idx on experiment (application)
CREATE INDEX trial_exp_idx on trial (experiment)
CREATE INDEX ie_trial_idx on interval_event (trial)
CREATE INDEX ilf_met_idx on interval_location_profile (interval_event, metric)
CREATE INDEX its_fun_met_idx on interval_total_summary (interval_event, metric)
CREATE INDEX ims_fun_met_idx on interval_mean_summary (interval_event, metric)
CREATE INDEX ilp_f_m_n_c_t_idx on interval_location_profile (interval_event, metric, node, context, thread)

terminate
