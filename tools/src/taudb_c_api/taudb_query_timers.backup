#include "taudb_api.h"
#include "libpq-fe.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

extern void taudb_parse_timer_group_names(TAUDB_TRIAL* trial, TAUDB_TIMER* timer, char* group_names);
extern void taudb_process_callpath_timer(TAUDB_TRIAL* trial, TAUDB_TIMER* timer, TAUDB_TIMER* tmp_timers, TAUDB_TIMER_CALLPATH* tmp_callpaths);
extern boolean taudb_is_callpath_timer(TAUDB_TIMER* timer);
extern void taudb_trim(char * s);

TAUDB_TIMER* taudb_query_timers(TAUDB_CONNECTION* connection, TAUDB_TRIAL* trial) {
#ifdef TAUDB_DEBUG_DEBUG
  printf("Calling taudb_query_timers(%p)\n", trial);
#endif
  void *res;
  int nFields;
  int i, j;

  if (trial == NULL) {
    fprintf(stderr, "Error: trial parameter null. Please provide a valid trial.\n");
    return NULL;
  }

  //if the Trial already has the data, return it.
  if (trial->timers != NULL && trial->timer_count > 0) {
    taudb_numItems = trial->timer_count;
    return trial->timers;
  }

  taudb_begin_transaction(connection);

  /*
   * Fetch rows from table_name, the system catalog of databases
   */
  char my_query[256];
  if (taudb_version == TAUDB_2005_SCHEMA) {
    /* this odd-looking query will make sure that the flat profile timers
     * will be processed before the callpath timers. */
    sprintf(my_query,"select *, 0 as order_rank from interval_event where trial = %d and name not like '%% => %%' union select *, 1 as order_rank from interval_event where trial = %d and name like '%% => %%' order by order_rank", trial->id, trial->id);
  } else {
    sprintf(my_query,"select * from timer where trial = %d", trial->id);
  }
#ifdef TAUDB_DEBUG
  printf("%s\n", my_query);
#endif
  res = taudb_execute_query(connection, my_query);

  int nRows = taudb_get_num_rows(res);
  taudb_numItems = nRows;

  nFields = taudb_get_num_columns(res);

  TAUDB_TIMER* tmp_timers = NULL; /* name hash for building callpath graph */
  TAUDB_TIMER_CALLPATH* tmp_timer_callpaths = NULL; /* name hash for building callpath graph */

  /* the rows */
  for (i = 0; i < taudb_get_num_rows(res); i++)
  {
    TAUDB_TIMER* timer = calloc(1, sizeof(TAUDB_TIMER));
    /* the columns */
    for (j = 0; j < nFields; j++) {
      if (strcmp(taudb_get_column_name(res, j), "id") == 0) {
        timer->id = atoi(taudb_get_value(res, i, j));
      } else if (strcmp(taudb_get_column_name(res, j), "trial") == 0) {
        timer->trial = trial;
      } else if (strcmp(taudb_get_column_name(res, j), "name") == 0) {
        timer->name = taudb_create_and_copy_string(taudb_get_value(res,i,j));
        taudb_trim(timer->name);
#ifdef TAUDB_DEBUG_DEBUG
        printf("Got timer '%s'\n", timer->name);
#endif
      } else if (strcmp(taudb_get_column_name(res, j), "short_name") == 0) {
        printf("Short Name: %s\n", taudb_get_value(res,i,j));
        timer->short_name = taudb_create_and_copy_string(taudb_get_value(res,i,j));
      } else if (strcmp(taudb_get_column_name(res, j), "source_file") == 0) {
        timer->source_file = taudb_create_and_copy_string(taudb_get_value(res,i,j));
      } else if (strcmp(taudb_get_column_name(res, j), "line_number") == 0) {
        timer->line_number = atoi(taudb_get_value(res, i, j));
      } else if (strcmp(taudb_get_column_name(res, j), "line_number_end") == 0) {
        timer->line_number_end = atoi(taudb_get_value(res, i, j));
      } else if (strcmp(taudb_get_column_name(res, j), "column_number") == 0) {
        timer->column_number = atoi(taudb_get_value(res, i, j));
      } else if (strcmp(taudb_get_column_name(res, j), "column_number_end") == 0) {
        timer->column_number_end = atoi(taudb_get_value(res, i, j));
      } else if (strcmp(taudb_get_column_name(res, j), "group_name") == 0) {
        // tokenize the string, something like 'TAU_USER|MPI|...'
        char* group_names = taudb_get_value(res, i, j);
        taudb_parse_timer_group_names(trial, timer, group_names);
      } else if (strcmp(taudb_get_column_name(res, j), "order_rank") == 0) {
        continue; // ignore this synthetic value
      } else {
        printf("Error: unknown column '%s'\n", taudb_get_column_name(res, j));
        taudb_exit_nicely(connection);
      }
      // TODO - Populate the rest properly?
      timer->parameter_count = 0;
    } 
    if (taudb_version == TAUDB_2005_SCHEMA) {
      // first...is this a callpath timer? If so, break it up.
      if (taudb_is_callpath_timer(timer)) {
        taudb_process_callpath_timer(trial, timer, tmp_timers, tmp_timer_callpaths);
      } else {
        // check if this timer is in the temporary name hash
        TAUDB_TIMER* tmp_timer = NULL;
        HASH_FIND(hh2, tmp_timers, timer->name, strlen(timer->name), tmp_timer);
        if (tmp_timer != NULL) {
          // iterate over the callpaths to redirect pointers
          TAUDB_TIMER_CALLPATH *current, *tmp;
          HASH_ITER(hh2, tmp_timer_callpaths, current, tmp) {
            if (current->timer == tmp_timer) {
              current->timer = timer;
            }
          }
          // Delete it from the name hash
          HASH_DELETE(hh2, tmp_timers, tmp_timer);
        }
        // save this timer in the id hash
        HASH_ADD_INT(trial->timers, id, timer);
        // save it in the temporary name hash
        HASH_ADD_KEYPTR(hh2, tmp_timers, timer->name, strlen(timer->name), timer);
        // check if this callpath is in the temporary name hash
        TAUDB_TIMER_CALLPATH* tmp_callpath = NULL;
        HASH_FIND(hh2, tmp_timer_callpaths, timer->name, strlen(timer->name), tmp_callpath);
        if (tmp_callpath != NULL) {
          // update the callpath object
          tmp_callpath->id = timer->id;
          tmp_callpath->timer = timer;
          tmp_callpath->parent = NULL;
          // save it in the trial, hashed by ID
          HASH_ADD_INT(trial->timer_callpaths, id, tmp_callpath);
          trial->timer_callpath_count++;
        } else {
          // create a timer_callpath object 
          tmp_callpath = calloc(1, sizeof (TAUDB_TIMER_CALLPATH));
          tmp_callpath->id = timer->id;
          tmp_callpath->timer = timer;
          tmp_callpath->parent = NULL;
          tmp_callpath->name = taudb_create_and_copy_string(timer->name);
          // save it in the trial, hashed by ID
          HASH_ADD_INT(trial->timer_callpaths, id, tmp_callpath);
          trial->timer_callpath_count++;
          // save it in the name hash
          HASH_ADD_KEYPTR(hh2, tmp_timer_callpaths, timer->name, strlen(timer->name), tmp_callpath);
        }
      }
    } else {
      // otherwise, save this in the hash
      HASH_ADD_INT(trial->timers, id, timer);
    }
  }

  taudb_clear_result(res);
  taudb_close_transaction(connection);

  return (trial->timers);
}

TAUDB_TIMER* taudb_get_timer_by_id(TAUDB_TIMER* timers, const int id) {
#ifdef TAUDB_DEBUG_DEBUG
  printf("Calling taudb_get_timer_by_id(%p,%d)\n", timers, id);
#endif
  if (timers == NULL) {
    fprintf(stderr, "Error: timer parameter null. Please provide a valid set of timers.\n");
    return NULL;
  }
  if (id == 0) {
    fprintf(stderr, "Error: name parameter null. Please provide a valid name.\n");
    return NULL;
  }

  TAUDB_TIMER* timer = NULL;
  HASH_FIND_INT(timers, &id, timer);
  return timer;
}

void taudb_parse_timer_group_names(TAUDB_TRIAL* trial, TAUDB_TIMER* timer, char* group_names) {
#ifdef TAUDB_DEBUG_DEBUG
  printf("Got timer groups '%s'\n", group_names);
#endif
  if (strlen(group_names) > 0) {
    char* group_name = strtok(group_names, "|");
    while (group_name != NULL) {
      timer->group_count++;
      timer->groups = realloc(timer->groups, (timer->group_count * sizeof(TAUDB_TIMER_GROUP*)));
      // see if the group exists
      TAUDB_TIMER_GROUP* group = taudb_get_timer_group_by_name(trial->timer_groups, group_name);
      if (group != NULL) {
#ifdef TAUDB_DEBUG_DEBUG
        printf("FOUND GROUP: %s\n", group_name);
#endif
      } else {
        group = calloc (1, sizeof(TAUDB_TIMER_GROUP));
        group->id = 0;
        group->name = taudb_create_and_copy_string(group_name);
        // add the group to the trial
        HASH_ADD_KEYPTR(hh, trial->timer_groups, group->name, strlen(group->name), group);
      }
      // add this timer group to our timer
      timer->groups[(timer->group_count)-1] = group;
      // add this timer to the list of timers in the group
      group->timer_count++;
      group->timers = realloc(group->timers, (group->timer_count * sizeof(TAUDB_TIMER*)));
      group->timers[(group->timer_count)-1] = timer;
      // get the next token
      group_name = strtok(NULL, "|");
    }
  } else {
    timer->group_count = 0;
    timer->groups = NULL;
  }
}

boolean taudb_is_callpath_timer(TAUDB_TIMER* timer) {
  if (strstr(timer->name, " => ") == NULL) {
    return FALSE;
  } else {
    return TRUE;
  }
}

void taudb_process_callpath_timer(TAUDB_TRIAL* trial, TAUDB_TIMER* timer, TAUDB_TIMER* tmp_timers, TAUDB_TIMER_CALLPATH* tmp_callpaths) {
  // tokenize the string
  char* callpath = timer->name;
  char* tmp_callpath = calloc((strlen(timer->name))+1, sizeof(char));
  char* end = strstr(callpath, " => ");
  TAUDB_TIMER* parent_timer = NULL;
  TAUDB_TIMER_CALLPATH* parent_callpath = NULL;
  while (end != NULL) {
    // get the parent timer name
    char* token = calloc((end-callpath)+1, sizeof(char));
    strncpy(token, callpath, end-callpath);
    taudb_trim(token);
    // find the parent timer in the hash
    HASH_FIND(hh2, tmp_timers, token, strlen(token), parent_timer);
    if (parent_timer != NULL) {
#ifdef TAUDB_DEBUG
      printf("Parent timer: '%s', id: %d\n", token, parent_timer->id);
#endif
    } else {
      // make the timer, and add it to the name hash
      parent_timer = calloc(1, sizeof(TAUDB_TIMER));
      parent_timer->name = taudb_create_and_copy_string(token);
      HASH_ADD_KEYPTR(hh2, tmp_timers, parent_timer->name, strlen(parent_timer->name), parent_timer);
    }

    // get the parent callpath
    strncpy(tmp_callpath, callpath, end-(timer->name));
    // find the parent callpath in the hash
    HASH_FIND(hh2, tmp_callpaths, tmp_callpath, strlen(tmp_callpath), parent_callpath);
    if (parent_callpath != NULL) {
#ifdef TAUDB_DEBUG
      printf("Parent callpath: '%s', id: %d\n", tmp_callpath, parent_callpath->id);
#endif
    } else {
      // make the timer, and add it to the name hash
      parent_callpath = calloc(1, sizeof(TAUDB_TIMER_CALLPATH));
      parent_callpath->timer = parent_timer;
      parent_callpath->name = taudb_create_and_copy_string(tmp_callpath);
      HASH_ADD_KEYPTR(hh2, tmp_callpaths, parent_callpath->name, strlen(parent_callpath->name), parent_callpath);
    }

    // increment the string pointer
    callpath = end+4;
    // increment the start index
    end = strstr(callpath, " => ");
  }
#ifdef TAUDB_DEBUG
  printf("Leaf timer: '%s'\n", callpath);
#endif

  // now, handle the leaf. The leaf timer may already exist - check for it
  TAUDB_TIMER* leaf_timer = NULL;
  // find the leaf timer in the hash
  HASH_FIND(hh2, tmp_timers, callpath, strlen(callpath), leaf_timer);
  if (leaf_timer != NULL) {
#ifdef TAUDB_DEBUG
    printf("Leaf timer: '%s', id: %d\n", callpath, leaf_timer->id);
#endif
  } else {
    // make the timer, and add it to the name hash
    leaf_timer = calloc(1, sizeof(TAUDB_TIMER));
    leaf_timer->name = taudb_create_and_copy_string(callpath);
    HASH_ADD_KEYPTR(hh2, tmp_timers, leaf_timer->name, strlen(leaf_timer->name), leaf_timer);
  }

  TAUDB_TIMER_CALLPATH* leaf_callpath = NULL;
  // get the leaf callpath
  strcpy(tmp_callpath, timer->name);
  // find the leaf callpath in the hash
  HASH_FIND(hh2, tmp_callpaths, tmp_callpath, strlen(tmp_callpath), leaf_callpath);
  if (leaf_callpath != NULL) {
#ifdef TAUDB_DEBUG
    printf("Leaf callpath: '%s', id: %d\n", tmp_callpath, leaf_callpath->id);
#endif
  } else {
    // make the timer, and add it to the name hash
    leaf_callpath = calloc(1, sizeof(TAUDB_TIMER_CALLPATH));
  }
  leaf_callpath->id = timer->id;
  leaf_callpath->timer = leaf_timer;
  leaf_callpath->name = taudb_create_and_copy_string(tmp_callpath);
  HASH_ADD_KEYPTR(hh2, tmp_callpaths, leaf_callpath->name, strlen(leaf_callpath->name), leaf_callpath);
  // ...and add it to the id hash
  HASH_ADD_INT(trial->timer_callpaths, id, leaf_callpath);

}

