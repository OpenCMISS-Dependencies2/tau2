*****************************************************************************
**			             PerfDB  - Performance Database                    **
**			             http://tau.cs.uoregon.edu  		               **
*****************************************************************************
**  Copyright 2003                                                         **
**  Department of Computer and Information Science, University of Oregon   **
*****************************************************************************
*****************************************************************************
**  Authors :    
**       Li Li (UO), 
**       Robert Michael Ansell Bell (UO), 
**       Kevin Huck (khuck@cs.uoregon.edu) (UO)
**  Principal Investigators : 
**		 Li Li (UO)
**		 Allen Malony (UO)
**  TAU project was developed by Bernd Mohr, Lars Hansen, Kurt Windisch, 
**  Darryl Brown, et. al. and directed by Allen Malony at University of Oregon.
**  The TAU Portable Profiling Package uses part of TAU.
*****************************************************************************

Performance Database: PerfDB
****************************

PerfDB is a tool related to the TAU framework.  The PerfDB database is
designed to store and provide access to TAU profile data.  A number of
utility programs have been written in Java to load the data into PerfDB
and to query the data.  With PerfDB, users can perform performance analyses
such as regression analysis, scalability analysis across multiple trials, 
and so on.  An unlimited number of comparative analyses are available 
through the PerfDB toolkit.  Work is being done to provide the user
with standard analysis tools, and an API has been developed to access the
data with standard Java classes.

Prerequisites:
************** 

- PostgreSQL 7.0 (or an equivalent DBMS)

PerfDB requires a DataBase Management System (DBMS).  It has been tested 
with both PostgreSQL and MySQL databases.  The default database is 
PostgreSQL (http://www.postgresql.org).

- Java 1.4

The PerfDB utilities and API are written in Java.

Installation:
*************

PerfDB is installed as part of the standard TAU release.  Shell scripts
are installed in the TAU bin directory to run the configuration and 
loading utilities.  It is assumed that the user has installed TAU and
run TAU's configure and 'make install'.

1) Create a database

Once a DBMS is installed, a database needs to be created.  This database
can be called anything the user likes - perfdb is the default.  If the 
DBMS is PostgreSQL, the command from the shell prompt is:

	$ createdb perfdb

If the user is in psql, the command is:

	psql=# create database perfdb

Other DBMS are similar.

2) Build PerfDB

The build process for PerfDB is simple.  Change to the 
$TAUROOT/tools/src/perfdb directory, and issue the command:

	$ make

3) Configuration

PerfDB needs to be configured for the first time use.  To configure PerfDB,
run the command (assuming $TAUROOT/$arch/bin is in your path):

	$ perfdb_configure

The configure program will prompt the user for several values.  The default
values in all cases will work for 99.9% of users.  Unless you need to specify
something other than the default values (for example, if you are using MySQL
instead of PostgreSQL, you need to specify a different JDBC .jar file, 
driver name, and database vendor).  The only value for which there is no 
default is the database username.  Enter the name of a database user which
has administrative access.  Because the utilities use the 'COPY' command with
PostgreSQL, the user requires administrative access.  Once the configuration
program collects the information, it prompts for the user's database password,
and connects to the database to test the configuration.  If the configuration
is valid, the database schema is loaded into the database.

4) Loading database schema

If the configuration ended successfuly, then the database schema was loaded
at the end of the configuration process.  If problems occurred, then it may
be necessary to load the database schema later.  If that is the case, then
the program to load the schema is:

	$ perfdb_loadschema

5) Loading application data

To load application data, simply run the perfdb_loadapp program.  There is 
one parameter for perfdb_loadapp, and it is:

	{-x --xmlfile} filename : the name of the application data file

The xmlfile passed in is the application data file.  A sample application
data file is $TAUROOT/tools/src/perfdb/data/App_Info.xml.  For example,
you could run perfdb_loadapp this way:

	$ perfdb_loadapp -x App_Info.xml

The application loader will load the application, and return the ID of the
application in the database.

6) Loading experiment data

To load experiment data, simply run the perfdb_loadexp program.  There are 
two parameters for perfdb_loadexp, and it is:

	{-x --xmlfile} filename : the name of the experiment data file
	{-a --applicationid} value : the value of the application ID

The xmlfile passed in is the experiment data file.  A sample experiment
data file is $TAUROOT/tools/src/perfdb/data/Exp_Info.xml.  For example,
you could run perfdb_loadexp this way:

	$ perfdb_loadexp -x Exp_Info.xml - a 1

The experiment loader will load the experiment, and return the ID of the
experiment in the database.

7) Translating TAU profiles

TAU data needs to be translated to XML in order to be loaded into the database.
This is a simple operation, performed with the perfdb_translate program.
There are several parameters for perfdb_translate:

	{-s --sourcefile} filename : the name of the TAU data file
	{-d --destinationfile} filename : the name of the XML output file
	{-a --applicationid} value : the value of the application ID
	{-e --experimentid} value : the value of the experiment ID

An example of how to run the translator:

	$ perfdb_translate -s pprof.dat -d pprof.xml -a 1 -e 1

8) Loading translated Trial data

Once the data has been translated, it can be loaded into the database.  The
data is loaded by running the perfdb_loadtrial command.  The parameters for
perfdb_loadtrial are:

	{-x --xmlfile} filename : the name of the translated trial data file
	{-t --trialid} value : the value of an existing trial ID
	{-p --problemfile} filename : the name of a problem definition file

perfdb_loadtrial can be run two ways.  When creating a new trial, the user
calls perfdb_loadtrial with an optional problem definition file.  The problem
definition file is a user-defined XML file that describes the trial data.
An example problem definiton file is in the data directory.  For example:

	$ perfdb_loadtrial -x pprof.xml -p sample_problem.xml

If the user is adding trial data to an existing trial (due to multiple
metrics recorded during the run with TAU), then the problem 
file is omitted, and the trial ID is passed in:

	$ perfdb_loadtrial -t 1

Once the data has been loaded into the database, analysis can be performed.
See the ${TAUROOT}/tools/src/dms/README file for more details.

