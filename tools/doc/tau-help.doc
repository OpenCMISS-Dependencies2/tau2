HelpSystem.doc
Kurt Windisch (kurtw@cs.uoregon.edu)
February 1996

This document describes how to write and integrate help files for the
TAU tools.


OVERVIEW
========

The TAU help system allows each tool to reference multiple hypertext-linked
help documents from the tool's Help menu.  Components of the help system
are:

  * Each tool has a "Help" menu with items for each help page available
    to the tool (see CREATING A HELP MENU).
  * The procedures implementing the help system are included into each
    tool from the tcl/tk library ".../TAU/tools/inc/help.tcl".  The only
    procedure called by the tool developer is "showHelp", described below
    (see CALLING THE "showHelp" PROCEDURE).
  * Each tool has a help directory in ".../TAU/tools/help", usually named
    after the tool itself (in all lowercase).   This directory may
    contain multiple help files (see WRITING HELP FILES).


CREATING A HELP MENU
====================

The first step in integrating help pages into a tool is to create a help
menu and menu items, one for each help page.  This is usually done within
the tool's procedure, named "createWindow" by convention, that creates the 
Tk widgets for the main window.  The code below, which creates a simple
help menu, is an example taken from ".../TAU/tools/src/tau.tcl", the main 
TAU control window.  Widget names may vary for other tools.

  menubutton .$myself.bar.b3 -text Help -menu .$myself.bar.b3.m1 -underline 0 
  menu .$myself.bar.b3.m1
  .$myself.bar.b3.m1 add command -label "on $myself" -underline 3 \
        -command "showHelp $myself 1-$myself 1"
  pack .$myself.bar.b3 -side right -padx 5

This example creates a help menu in the normal Tk manner.  Each command
menu entry, corresponding with a help page, calls the "showHelp" procedure
when selected.  See below for information on this procedure.


CALLING THE "showHelp" PROCEDURE
================================

Called from each Help menu item, the "showHelp" procedure creates a 
help window displaying the specified page.

  #
  # showHelp: help main function, displays on page of help text
  #
  #     prog: program name
  #  section: name of help page
  #    isTop: set is page is root of new help tree
  #
  proc showHelp {prog section {isTop 0}}

The "prog" parameter names the subdirectory of ".../TAU/tools/help" in which
to find the help page.  Usually this is the tool name (in all lowercase), 
but sometimes it may be the name of another tool or a general purpose
help directory (for example, "general") in order to cross-reference with
other tools or common help pages.

The "section" parameter names the file within the above directory to be 
loaded a a help page.  See WRITING HELP FILES for file naming conventions.

The optional "isTop" parameter, which defaults to "0" if not specified, 
determines whether the viewing stack is reinitialized with this page as
it's top page.

For example, the following opens the help viewer to the help file
".../TAU/tools/help/tau/1.1-menu":
	showHelp tau 1.1-menu

If a help viewer window is opened for a specific tool, subsequent "showHelp"
commands will update the contents of the open viewer rather than creating
a second help window.  However, help viewer windows created by different
tools are completely independent.


WRITING HELP FILES
==================

As described above, individual help files reside in a subdirectory of
".../TAU/tools/help".  By convention, help files are named with a
section, optional subsection, and name in the form:
	sec[.subsec]-name

The format for each help file is straight ASCII text with embedded formatting
commands.  The only restriction is that the '@' character is a reserved
keyword and may not be used except in the following recognized formatting 
commmands:

  @T string		Specifies the title for the help viewer window in
			<string>, usuaully a short phrase describing the 
			topic.  For example:
			     @T the master control panel

  @P command		Specifies a tcl/tk script, <command> to bind to 
			the "Prev" button in the help viewer window.  Often
			this with be another showHelp command.  For example:
			     @P showHelp tau 1.1-menu 1

  @N command		Specifies a tcl/tk script, <command> to bind to 
			the "Next" button in the help viewer window.  Often
			this with be another showHelp command.  For example:
			     @N showHelp tau 1.1-menu 1

  @D key {options}      Defines a set of Tk text widget tag options 
			that may be applied to text within the
			help page.  <key> defines a keyword to be used
			to apply these options using the @{key {}}
			command described below.  The key must contain only
			alphabetic characters (no numbers, spaces, or special 
			characters).  <options> is a list of Tk 4.0 text 
			widget tag options, as defined in the man page
			text(n).  For example, the following defines a 
			macro to underline text:
			     @D ul {-underline true}
			The line below defines a macro to specify a larger
			font and color the text blue:
			     @D headingbig {-font -Adobe-Helvetica-Bold-R-Normal--*-140-* -foreground blue}

  @{key {text}		Applies a set of Tk text widget tag options, defined
			in a previous @D command having the keyword <key>, 
			to a textual string, <text>.  For example, using
			the underlining definition above, the following
			displays the text "foo bar baz" with 'bar' and
			'baz' underlined:
			     foo @{ul {bar baz}

  @{L {text} {command}  Creates a highlighted (underlined) text string,
			given by <text> that, when clicked on with mouse
			button one, executes the Tcl/Tk script <command>.
			This is most often used to implement hypertext
			links withing help pages.  For example, the 
			following displays the text "compile in COSY", with
			'COSY' displayed as a hypertext link to the help 
			page ".../TAU/tools/help/cosy/1-cosy":
			     compile in @{L {COSY} {showHelp cosy 1-cosy 1}}
			 
